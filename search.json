[
  {
    "objectID": "posts/Week1Challenge_BenRamsey.html",
    "href": "posts/Week1Challenge_BenRamsey.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/Week1Challenge_BenRamsey.html#load-the-data",
    "href": "posts/Week1Challenge_BenRamsey.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_marriages.csv\nfish_encounters dataset (available in the tidyr package)\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\nCode\nlibrary(tidyverse)\n\n\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n\n\nv ggplot2 3.3.5     v purrr   0.3.4\nv tibble  3.1.5     v dplyr   1.0.7\nv tidyr   1.1.4     v stringr 1.4.0\nv readr   2.0.2     v forcats 0.5.1\n\n\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\n\nCode\ngot_marriages <- read_csv(\"_data/got/got_marriages.csv\")\n\n\nRows: 255 Columns: 5\n\n\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\n\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation."
  },
  {
    "objectID": "posts/Week1Challenge_BenRamsey.html#create-a-network",
    "href": "posts/Week1Challenge_BenRamsey.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\nCode\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\nCode\ngot_marriages.ig <- graph_from_data_frame(got_marriages, directed = FALSE)\n\nis_directed(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_bipartite(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nplot.igraph(got_marriages.ig)"
  },
  {
    "objectID": "posts/Week1_Challenge_Instructions.html",
    "href": "posts/Week1_Challenge_Instructions.html",
    "title": "Week 1 Challenge Instructions",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/Week1_Challenge_Instructions.html#load-the-data",
    "href": "posts/Week1_Challenge_Instructions.html#load-the-data",
    "title": "Week 1 Challenge Instructions",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_marriages.csv\nfish_encounters dataset (available in the tidyr package)\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation."
  },
  {
    "objectID": "posts/Week1_Challenge_Instructions.html#create-a-network",
    "href": "posts/Week1_Challenge_Instructions.html#create-a-network",
    "title": "Week 1 Challenge Instructions",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?"
  },
  {
    "objectID": "posts/Jyoti_Rani_Challenge_1.html",
    "href": "posts/Jyoti_Rani_Challenge_1.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object\n\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/Jyoti_Rani_Challenge_1.html#load-the-data",
    "href": "posts/Jyoti_Rani_Challenge_1.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\nCode\ngot_like_dislike <- read_csv(\"_data/got/got_like_dislike.csv\")\n\n\nRows: 46 Columns: 49\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Current house, Former house, Name\ndbl (46): Lysa Arryn, Petyr Baelish, Joffrey Baratheon, Margaery Tyrell, Ren...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nThe dataset has 46 rows and 49 columns"
  },
  {
    "objectID": "posts/Jyoti_Rani_Challenge_1.html#create-a-network",
    "href": "posts/Jyoti_Rani_Challenge_1.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\nCode\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\n\nFrom the below commands we know that the data is undirected, unmweighted and unimodal.\nThe plot is below:\n\n\nCode\ngot_like_dislike.ig <- graph_from_data_frame(got_like_dislike, directed = FALSE)\n\n\nWarning in graph_from_data_frame(got_like_dislike, directed = FALSE): In `d'\n`NA' elements were replaced with string \"NA\"\n\n\nCode\nis_directed(got_like_dislike.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_like_dislike.ig)\n\n\n[1] FALSE\n\n\nCode\nis_bipartite(got_like_dislike.ig)\n\n\n[1] FALSE\n\n\nCode\nplot.igraph(got_like_dislike.ig)"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html",
    "href": "posts/MirandaManka_Challenge1.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(igraph)\n\nknitr::opts_chunk$set(echo = TRUE)"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html#challenge-overview",
    "href": "posts/MirandaManka_Challenge1.html#challenge-overview",
    "title": "Week 1 Challenge",
    "section": "Challenge Overview",
    "text": "Challenge Overview\nToday’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html#load-the-data",
    "href": "posts/MirandaManka_Challenge1.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\n\n\nCode\ngot_marriages = read_csv(\"_data/got/got_marriages.csv\", show_col_types = FALSE)\ngot_marriages\n\n\n# A tibble: 255 × 5\n   From      To        Type    Notes  Generation\n   <chr>     <chr>     <chr>   <chr>  <chr>     \n 1 Targaryen Stark     Married R+L=J  Current   \n 2 Baratheon Martell   Engaged died   Current   \n 3 Baratheon Stark     Engaged broken Current   \n 4 Martell   Essos     Married <NA>   Current   \n 5 Martell   Reach     Affair  <NA>   Current   \n 6 Martell   Essos     Affair  <NA>   Current   \n 7 Martell   Essos     Affair  <NA>   Current   \n 8 Martell   Septa     Affair  <NA>   Current   \n 9 Martell   Dorne     Affair  <NA>   Current   \n10 Martell   Targaryen Married <NA>   Current   \n# … with 245 more rows"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html#create-a-network",
    "href": "posts/MirandaManka_Challenge1.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nThe network is undirected, unweighted, and unimodal. There are 20 vertices/nodes (families) and 255 edges/links (different connections/relationships).\n\n\nCode\ngot_marriages.ig = graph_from_data_frame(got_marriages, directed = FALSE) #directed = false because with relationships, if a is married to b then b is also married to a\ngot_marriages.ig\n\n\nIGRAPH 3af7a91 UN-- 20 255 -- \n+ attr: name (v/c), Type (e/c), Notes (e/c), Generation (e/c)\n+ edges from 3af7a91 (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n+ ... omitted several edges\n\n\nCode\nvcount(got_marriages.ig)\n\n\n[1] 20\n\n\nCode\necount(got_marriages.ig)\n\n\n[1] 255\n\n\nCode\nis_bipartite(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_directed(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\ntable(got_marriages$Type)\n\n\n\n Affair Engaged Married \n     36       2     217 \n\n\nCode\nplot(got_marriages.ig)"
  },
  {
    "objectID": "posts/steveoneill_week2.html",
    "href": "posts/steveoneill_week2.html",
    "title": "Short Assignment 1: Reading Network Data",
    "section": "",
    "text": "got_marriages <- read_csv(\"_data/got/got_marriages.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "posts/steveoneill_week2.html#statnet",
    "href": "posts/steveoneill_week2.html#statnet",
    "title": "Short Assignment 1: Reading Network Data",
    "section": "Statnet",
    "text": "Statnet\nI am assuming “loops” are cases where Lannister – Lannister, or similar. So I’ll be setting that to TRUE. And multiple to TRUE as well.\n\ngot_marriages.stat <- as.network(got_marriages, loops = TRUE, multiple = TRUE)\nprint(got_marriages.stat)\n\n Network attributes:\n  vertices = 20 \n  directed = TRUE \n  hyper = FALSE \n  loops = TRUE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 255 \n    missing edges= 0 \n    non-missing edges= 255 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names: \n    Generation Notes Type \n\n\nThis is a network object rather than a igraph object we were using before.\n\nclass(got_marriages.stat)\n\n[1] \"network\"\n\nclass(got_marriages.net)\n\n[1] \"igraph\"\n\n\nPlotting is ugly, but functional:\n\nplot(got_marriages.stat,\n     displaylabels = T)"
  },
  {
    "objectID": "posts/ClaireBattaglia_Week1Challenge.html",
    "href": "posts/ClaireBattaglia_Week1Challenge.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(igraph)\n\nknitr::opts_chunk$set(echo = TRUE)"
  },
  {
    "objectID": "posts/ClaireBattaglia_Week1Challenge.html#data",
    "href": "posts/ClaireBattaglia_Week1Challenge.html#data",
    "title": "Week 1 Challenge",
    "section": "Data",
    "text": "Data\nThis dataset represents the teams in Game of Thrones.\n\n\nCode\n# read in data\nteams <- read_csv(\"_data/got/got_teams.csv\", show_col_types = FALSE)\n\n# specify from, to fields\nteams <- teams %>%\n  rename(from = team, to = joins) %>%\n  relocate(from, to, alliance, gh, .before = id)\n\n# preview\nhead(teams, 25)\n\n\n# A tibble: 25 × 5\n   from         to                    alliance        gh    id\n   <chr>        <chr>                 <chr>        <dbl> <dbl>\n 1 Drogo        follows Drogo         Opportunists     0     0\n 2 Littlefinger follows Littlefinger  Opportunists     0     1\n 3 Martell      joins the Martells    Opportunists     0     2\n 4 Red God      worships the Red God  Opportunists     0     3\n 5 Renly        follows Renly         Opportunists     0     4\n 6 Second Sons  joins the Second Sons Opportunists     0     5\n 7 Stannis      follows Stannis       Opportunists     0     6\n 8 Stormcrows   joins the Stormcrows  Opportunists     0     7\n 9 Targaryen    joins the Targaryens  Opportunists     0     8\n10 Tyrell       joins the Tyrells     Opportunists     0     9\n# … with 15 more rows\n\n\nNow I’ll create a network object.\n\n\nCode\n# create network object\nteams.ig <- graph_from_data_frame(teams, directed = FALSE)\n\n# view\nteams.ig\n\n\nIGRAPH b1d14af UN-- 66 33 -- \n+ attr: name (v/c), alliance (e/c), gh (e/n), id (e/n)\n+ edges from b1d14af (vertex names):\n [1] Drogo       --follows Drogo         Littlefinger--follows Littlefinger \n [3] Martell     --joins the Martells    Red God     --worships the Red God \n [5] Renly       --follows Renly         Second Sons --joins the Second Sons\n [7] Stannis     --follows Stannis       Stormcrows  --joins the Stormcrows \n [9] Targaryen   --joins the Targaryens  Tyrell      --joins the Tyrells    \n[11] Windblown   --joins the Windblown  \n+ ... omitted several edges\n\n\nThis tells us a few things.\n\nThe network is undirected.\nThe network is named. I.e. the nodes have names.\nThe edges are not weighted.\nIt is not bipartite.\nThere are 66 nodes/vertices.\nThere are 33 edges/ties.\n\nWe can explore the nodes and edges further.\n\n\nCode\n# get nodes\nV(teams.ig)\n\n\n+ 66/66 vertices, named, from b1d14af:\n [1] Drogo                                  \n [2] Littlefinger                           \n [3] Martell                                \n [4] Red God                                \n [5] Renly                                  \n [6] Second Sons                            \n [7] Stannis                                \n [8] Stormcrows                             \n [9] Targaryen                              \n[10] Tyrell                                 \n+ ... omitted several vertices\n\n\nCode\n# get edges\nE(teams.ig)\n\n\n+ 33/33 edges from b1d14af (vertex names):\n [1] Drogo             --follows Drogo                          \n [2] Littlefinger      --follows Littlefinger                   \n [3] Martell           --joins the Martells                     \n [4] Red God           --worships the Red God                   \n [5] Renly             --follows Renly                          \n [6] Second Sons       --joins the Second Sons                  \n [7] Stannis           --follows Stannis                        \n [8] Stormcrows        --joins the Stormcrows                   \n [9] Targaryen         --joins the Targaryens                   \n[10] Tyrell            --joins the Tyrells                      \n+ ... omitted several edges\n\n\nLet’s try to plot this.\n\n\nCode\n# not sure what this does but I found it on the internet so why not :)\nteams.ig <- simplify(teams.ig, remove.multiple = F, remove.loops = T)\n\n# assign weight\nE(teams.ig)$weight <- E(teams.ig)$alliance\n\n# plot network\nplot(teams.ig,\n     vertex.size = 10,\n     vertex.color = \"maroon\",\n     vertex.label.cex = .5,\n     main = \"Game of Thrones Teams\")\n\n\nWarning in (function (graph, coords = NULL, dim = 2, niter = 500, start.temp =\nsqrt(vcount(graph)), : NAs introduced by coercion\n\n\n\n\n\nThat looks… sort of useless (but vaguely like a network!)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Contributors",
    "section": "",
    "text": "Find out more about our DACSS students who contributed to the blog.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJyoti Rani\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Name\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DACSS 697E: Social Networks Spring-2023",
    "section": "",
    "text": "The blog posts here are contributed by students enrolled in DACSS 697E, Social Networks Spring 2023. The course covers network scientific theory as it applies to the social sciences, network data collection and management, network visualization and description; and methods for the statistical analysis of networks. The course will make extensive use of real-world applications and students will gain a thorough background in the use of network analytic software. Most of the applications discussed will be drawn from political science, but this course will be relevant to anyone interested in network analytic research.\n\n\n\n\n\n\n\n\n\n\nShort Assignment 1: Reading Network Data\n\n\n\n\n\n\n\n\n\n\n\n\nSteve O’Neill\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge_1\n\n\nLoading data and creating network\n\n\nJyoti Rani\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 22, 2023\n\n\nJyoti Rani\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge1\n\n\nMiranda Manka\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\nMiranda Manka\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nClaire Battaglia\n\n\nchallenge1\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\nClaire Battaglia\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge_1\n\n\ninstruction\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 13, 2023\n\n\nBen Ramsey\n\n\n\n\n\n\n\n\nWeek 1 Challenge Instructions\n\n\n\n\n\n\n\nchallenge_1\n\n\ninstruction\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 13, 2023\n\n\nOriol Vallès Codina\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about/about.html",
    "href": "about/about.html",
    "title": "Your Name",
    "section": "",
    "text": "##Instructions"
  },
  {
    "objectID": "about/about.html#educationwork-background",
    "href": "about/about.html#educationwork-background",
    "title": "Your Name",
    "section": "Education/Work Background",
    "text": "Education/Work Background"
  },
  {
    "objectID": "about/about.html#r-experience",
    "href": "about/about.html#r-experience",
    "title": "Your Name",
    "section": "R experience",
    "text": "R experience"
  },
  {
    "objectID": "about/about.html#research-interests",
    "href": "about/about.html#research-interests",
    "title": "Your Name",
    "section": "Research interests",
    "text": "Research interests"
  },
  {
    "objectID": "about/about.html#hometown",
    "href": "about/about.html#hometown",
    "title": "Your Name",
    "section": "Hometown",
    "text": "Hometown"
  },
  {
    "objectID": "about/about.html#hobbies",
    "href": "about/about.html#hobbies",
    "title": "Your Name",
    "section": "Hobbies",
    "text": "Hobbies"
  },
  {
    "objectID": "about/about.html#fun-fact",
    "href": "about/about.html#fun-fact",
    "title": "Your Name",
    "section": "Fun fact",
    "text": "Fun fact"
  },
  {
    "objectID": "about/Jyoti_Rani.html",
    "href": "about/Jyoti_Rani.html",
    "title": "Jyoti Rani",
    "section": "",
    "text": "• Master in Computer Applications - Sikkim Manipal University • Bachelor of Science (Mathematics Honors) - Ranchi University"
  },
  {
    "objectID": "about/Jyoti_Rani.html#r-experience",
    "href": "about/Jyoti_Rani.html#r-experience",
    "title": "Jyoti Rani",
    "section": "R experience",
    "text": "R experience\n• Advanced level"
  },
  {
    "objectID": "about/Jyoti_Rani.html#research-interests",
    "href": "about/Jyoti_Rani.html#research-interests",
    "title": "Jyoti Rani",
    "section": "Research interests",
    "text": "Research interests\nFinancial Modelling, Trend analysis, Market analysis, Data Governance and Management"
  },
  {
    "objectID": "about/Jyoti_Rani.html#hometown",
    "href": "about/Jyoti_Rani.html#hometown",
    "title": "Jyoti Rani",
    "section": "Hometown",
    "text": "Hometown\nJamshedpur, Jharkhand, India"
  },
  {
    "objectID": "about/Jyoti_Rani.html#hobbies",
    "href": "about/Jyoti_Rani.html#hobbies",
    "title": "Jyoti Rani",
    "section": "Hobbies",
    "text": "Hobbies\nGardening, Travelling, Baking"
  }
]