[
  {
    "objectID": "posts/akhilesh_challenge_1.html",
    "href": "posts/akhilesh_challenge_1.html",
    "title": "Week 1 Challenge Submission",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/akhilesh_challenge_1.html#load-the-data",
    "href": "posts/akhilesh_challenge_1.html#load-the-data",
    "title": "Week 1 Challenge Submission",
    "section": "Load the Data",
    "text": "Load the Data\n\nUse ‘read.csv’ to read got_like_dislike.csv’ file\nRemove first columns to prepare Adjacency matrix\nConvert Dataframe to matrix format\n\n\n\nCode\ndata = read.csv('_data\\\\got\\\\got_like_dislike.csv', header=TRUE)\ndata = data[,4:ncol(data)]\n# Convert the data frame to matrix\nadj_matrix <- as.matrix(data)"
  },
  {
    "objectID": "posts/akhilesh_challenge_1.html#create-a-network",
    "href": "posts/akhilesh_challenge_1.html#create-a-network",
    "title": "Week 1 Challenge Submission",
    "section": "Create a Network",
    "text": "Create a Network\n\nLoad the package igraph and create an igraph object,\nThe network seem ‘undirected’ and ‘weighted’\nData is an adjacency matrix format.\n‘simplify’ is applied to remove multiple edges and combine their weights to represent the edges in a single line.\nNodes/ Vertexes have been color coded on the basis of total sum of likes and dislikes, where if:\n\ntotal sum of likes and dislikes >0, vertex color is green\ntotal sum of likes and dislikes <0, vertex color is red\ntotal sum of likes and dislikes =0, vertex color is yellow\n\nEdges between nodes have been color coded on the basis of like/ dislike value, where for a:\n\nlike, edge color is green\ndislike, vertex color is red\nOther, vertex color is yellow\n\n\n\n\nCode\nlibrary(igraph)\n# create a graph object from the adjacency matrix\ngraph.ig <- graph_from_adjacency_matrix(adj_matrix, mode = \"undirected\", diag = FALSE, weighted = TRUE)\n\n# simplify the graph to remove multiple edges and combine their weights\ngraph.ig <- simplify(graph.ig, edge.attr.comb = \"sum\")\n\n# add a small positive value to all edge weights to avoid layout errors\nE(graph.ig)$weight <- E(graph.ig)$weight + 10\n\n# specify color vectors based on likes/dislikes column for vertices and edges\ncolor_vector <- ifelse(rowSums(adj_matrix, na.rm = TRUE) > 0, \"green\", ifelse(rowSums(adj_matrix, na.rm = TRUE) < 0, \"red\", \"yellow\"))\nedge_color_vector <- ifelse(adj_matrix > 0, \"green\", ifelse(adj_matrix < 0, \"red\", \"yellow\"))\n\n# plot the graph with adjusted parameters\nplot(graph.ig, \n     layout=layout_with_fr(graph.ig, weights = E(graph.ig)$weight), \n     vertex.size=10, \n     vertex.label.cex=0.8, \n     vertex.label.color= 'black',\n     vertex.frame.color = color_vector,\n     vertex.color = color_vector,\n     edge.arrow.size=0.5,\n     edge.width=E(graph.ig)$weight/10,\n     edge.color=edge_color_vector,\n     main=\"Game of Thrones Likes/Dislikes Graph\")"
  },
  {
    "objectID": "posts/Week1_Challenge_AG.html",
    "href": "posts/Week1_Challenge_AG.html",
    "title": "Week 1 Challenge - AG",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nCode\nfish_encounters <- fish_encounters\n\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\nThe following object is masked from 'package:base':\n\n    union\n\n\nCode\nfish_encounters.net <-graph_from_data_frame(fish_encounters,\n                                      directed=FALSE)\nplot.igraph(fish_encounters.net,margin=0,arrow.mode=\"-\")\n\n\n\n\n\nCode\nis_directed(fish_encounters.net)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(fish_encounters.net)\n\n\n[1] FALSE\n\n\nCode\nis_bipartite(fish_encounters.net)\n\n\n[1] FALSE"
  },
  {
    "objectID": "posts/Week1Challenge_BenRamsey.html",
    "href": "posts/Week1Challenge_BenRamsey.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/Week1Challenge_BenRamsey.html#load-the-data",
    "href": "posts/Week1Challenge_BenRamsey.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_marriages.csv\nfish_encounters dataset (available in the tidyr package)\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\nCode\nlibrary(tidyverse)\n\n\n-- Attaching packages --------------------------------------- tidyverse 1.3.1 --\n\n\nv ggplot2 3.3.5     v purrr   0.3.4\nv tibble  3.1.5     v dplyr   1.0.7\nv tidyr   1.1.4     v stringr 1.4.0\nv readr   2.0.2     v forcats 0.5.1\n\n\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\n\nCode\ngot_marriages <- read_csv(\"_data/got/got_marriages.csv\")\n\n\nRows: 255 Columns: 5\n\n\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\n\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation."
  },
  {
    "objectID": "posts/Week1Challenge_BenRamsey.html#create-a-network",
    "href": "posts/Week1Challenge_BenRamsey.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\nCode\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\nCode\ngot_marriages.ig <- graph_from_data_frame(got_marriages, directed = FALSE)\n\nis_directed(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_bipartite(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nplot.igraph(got_marriages.ig)"
  },
  {
    "objectID": "posts/Week1_Challenge_Solutions.html",
    "href": "posts/Week1_Challenge_Solutions.html",
    "title": "Week 1 Challenge Solutions",
    "section": "",
    "text": "Before starting, the necessary packages should be loaded:\n\nlibrary(tidyverse)\nlibrary(igraph)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE,\n                      message=FALSE)\n\n\nMarriages in Game of Thrones\n\ngot.marriages <- read_csv('_data/got/got_marriages.csv')\n\nhead(got.marriages)\n\n\n\n  \n\n\n\nThe first two columns indicate the list of edges in the network. The network is symmetric and unweighted, but with 3 types of links (married, engaged, or affair):\n\ntable(got.marriages$Type)\n\n\n Affair Engaged Married \n     36       2     217 \n\n\nFinally, a graph can be created using the igraph package\n\ng.got.marriages <- graph_from_data_frame(got.marriages)\n\nand plotted:\n\nplot(g.got.marriages, edge.arrow.size = 0)\n\n\n\n\nWe could also color the edges depending on the type of link by creating another column as a factor and changing its levels to color names:\n\ngot.marriages$Type.Color <- as.factor(got.marriages$Type)\n\nlevels(got.marriages$Type.Color)\n\n[1] \"Affair\"  \"Engaged\" \"Married\"\n\nlevels(got.marriages$Type.Color) <- c('gray', 'blue', 'green')\n\nE(g.got.marriages)$color <- got.marriages$Type.Color\n\nplot(g.got.marriages, edge.arrow.size = 0)\n\n\n\n\n\n\nFish Encounters\nfish_encounters dataset is directly loaded with tidyverse or tidyr:\n\nhead(fish_encounters)\n\n\n\n  \n\n\n\nThe graph can be created using:\n\ng.fish <- graph_from_data_frame(fish_encounters)\n\nV(g.fish)$name\n\n [1] \"4842\"    \"4843\"    \"4844\"    \"4845\"    \"4847\"    \"4848\"    \"4849\"   \n [8] \"4850\"    \"4851\"    \"4854\"    \"4855\"    \"4857\"    \"4858\"    \"4859\"   \n[15] \"4861\"    \"4862\"    \"4863\"    \"4864\"    \"4865\"    \"Release\" \"I80_1\"  \n[22] \"Lisbon\"  \"Rstr\"    \"Base_TD\" \"BCE\"     \"BCW\"     \"BCE2\"    \"BCW2\"   \n[29] \"MAE\"     \"MAW\"    \n\n\nWe can color the stations by selecting the nodes with names that cannot be converted into numbers:\n\nV(g.fish)$color[is.na(as.numeric(V(g.fish)$name))] <- 'lightblue'\n\nplot(g.fish, edge.arrow.size = .5)\n\n\n\n\n\n\nLikes and Dislikes in Game of Thrones\n\ngot.likes <- read.csv('_data/got/got_like_dislike.csv')\n\nhead(got.likes)\n\n\n\n  \n\n\n\nAlthough the data is given in the form of an adjacency matrix, the object is a data frame that needs to be coerced into a matrix. The network is asymmetric and weighted, where negative weights indicate dislike.\n\ng.likes <- graph_from_adjacency_matrix(as.matrix(got.likes[ , - c(1 : 3)]), mode = 'directed', weighted = TRUE)\n\nkableExtra :: kable(as.matrix(got.likes[ , - c(1 : 3)]))\n\n\n\n \n  \n    Lysa.Arryn \n    Petyr.Baelish \n    Joffrey.Baratheon \n    Margaery.Tyrell \n    Renly.Baratheon \n    Robert.Baratheon \n    Stannis.Baratheon \n    Brienne.of.Tarth \n    Bronn \n    Gregor.Clegane \n    Sandor.Clegane \n    Xaro.Xhoan.Daxos \n    Gendry \n    Balon.Greyjoy \n    Theon.Greyjoy \n    Jaqen.H.ghar \n    Hodor \n    Khal.Drogo \n    Cersei.Lannister \n    Jaime.Lannister \n    Lancel.Lannister \n    Tyrion.Lannister \n    Tywin.Lannister \n    Maester.Luwin \n    Melisandre \n    Jeor.Mormont \n    Jorah.Mormont \n    Osha \n    Podrick.Payne \n    Pyat.Pree \n    Grand.Maester.Pycelle \n    Ros \n    Davos.Seaworth \n    Shae \n    Jon.Snow \n    Arya.Stark \n    Bran.Stark \n    Catelyn.Stark \n    Robb.Stark \n    Sansa.Stark \n    Daenerys.Targaryen \n    Viserys.Targaryen \n    Samwell.Tarly \n    Loras.Tyrell \n    Varys \n    Eddard.Stark \n  \n \n\n  \n    NA \n    3 \n    0 \n    0 \n    0 \n    1 \n    0 \n    1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -1 \n    -1 \n    0 \n    2 \n    0 \n    -1 \n    -1 \n    -1 \n    -1 \n    -1 \n    1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    1 \n    2 \n    2 \n    3 \n    2 \n    2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    3 \n  \n  \n    3 \n    NA \n    -1 \n    1 \n    -2 \n    1 \n    -1 \n    0 \n    -1 \n    -1 \n    -1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -2 \n    -2 \n    0 \n    -1 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -1 \n    0 \n    -1 \n    -2 \n    0 \n    -1 \n    0 \n    1 \n    1 \n    5 \n    0 \n    3 \n    -1 \n    0 \n    0 \n    1 \n    -1 \n    -3 \n  \n  \n    0 \n    -1 \n    NA \n    4 \n    -3 \n    2 \n    -5 \n    -3 \n    -1 \n    3 \n    4 \n    0 \n    -5 \n    -2 \n    -3 \n    0 \n    -1 \n    -3 \n    5 \n    4 \n    1 \n    -2 \n    3 \n    -1 \n    -4 \n    0 \n    -3 \n    -2 \n    -1 \n    0 \n    -1 \n    -5 \n    -2 \n    -1 \n    -1 \n    -2 \n    -2 \n    -3 \n    -5 \n    0 \n    -5 \n    -3 \n    0 \n    2 \n    -1 \n    -5 \n  \n  \n    0 \n    1 \n    3 \n    NA \n    5 \n    0 \n    -5 \n    -4 \n    0 \n    0 \n    1 \n    0 \n    -5 \n    -1 \n    -2 \n    0 \n    0 \n    0 \n    2 \n    1 \n    0 \n    -1 \n    3 \n    0 \n    -4 \n    0 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -2 \n    -1 \n    0 \n    -1 \n    -1 \n    -2 \n    -5 \n    0 \n    -5 \n    -3 \n    0 \n    5 \n    0 \n    0 \n  \n  \n    0 \n    -2 \n    -5 \n    5 \n    NA \n    3 \n    -5 \n    2 \n    -1 \n    -2 \n    -2 \n    0 \n    -4 \n    0 \n    -3 \n    0 \n    0 \n    0 \n    -4 \n    -3 \n    -1 \n    -2 \n    -5 \n    1 \n    -5 \n    0 \n    -2 \n    0 \n    -1 \n    0 \n    -1 \n    0 \n    -3 \n    -1 \n    0 \n    2 \n    2 \n    3 \n    2 \n    2 \n    -5 \n    -3 \n    0 \n    5 \n    -1 \n    1 \n  \n  \n    2 \n    1 \n    4 \n    0 \n    3 \n    NA \n    2 \n    0 \n    0 \n    -1 \n    0 \n    0 \n    4 \n    -1 \n    4 \n    0 \n    1 \n    -4 \n    -2 \n    -1 \n    0 \n    1 \n    -1 \n    2 \n    0 \n    0 \n    -3 \n    -2 \n    0 \n    0 \n    1 \n    2 \n    0 \n    0 \n    2 \n    4 \n    4 \n    5 \n    4 \n    4 \n    -5 \n    -4 \n    0 \n    0 \n    -2 \n    5 \n  \n  \n    0 \n    -1 \n    -5 \n    -4 \n    -5 \n    1 \n    NA \n    -2 \n    -2 \n    -3 \n    -4 \n    0 \n    -5 \n    -2 \n    0 \n    0 \n    -1 \n    0 \n    -5 \n    -4 \n    -2 \n    -3 \n    -5 \n    0 \n    5 \n    0 \n    -4 \n    -2 \n    -2 \n    0 \n    -3 \n    0 \n    5 \n    0 \n    -2 \n    -2 \n    -2 \n    -4 \n    -5 \n    -2 \n    -5 \n    -3 \n    0 \n    -5 \n    -2 \n    0 \n  \n  \n    1 \n    -1 \n    -3 \n    -3 \n    5 \n    0 \n    -4 \n    NA \n    -2 \n    -2 \n    -3 \n    0 \n    0 \n    -4 \n    -5 \n    0 \n    3 \n    0 \n    -5 \n    -5 \n    -2 \n    -5 \n    -5 \n    3 \n    -5 \n    0 \n    -3 \n    2 \n    -1 \n    0 \n    -1 \n    0 \n    -4 \n    -3 \n    1 \n    4 \n    4 \n    5 \n    3 \n    4 \n    -5 \n    0 \n    0 \n    3 \n    -1 \n    0 \n  \n  \n    0 \n    -1 \n    -2 \n    -1 \n    -1 \n    0 \n    -2 \n    -1 \n    NA \n    -3 \n    -5 \n    0 \n    0 \n    0 \n    -1 \n    0 \n    0 \n    -1 \n    -3 \n    -3 \n    -1 \n    5 \n    -4 \n    0 \n    -2 \n    0 \n    -1 \n    0 \n    4 \n    0 \n    -3 \n    0 \n    -2 \n    5 \n    0 \n    0 \n    0 \n    -2 \n    -2 \n    1 \n    -2 \n    -2 \n    0 \n    -1 \n    -2 \n    0 \n  \n  \n    0 \n    -1 \n    3 \n    -1 \n    -2 \n    -2 \n    -3 \n    -2 \n    -2 \n    NA \n    -5 \n    0 \n    -3 \n    0 \n    0 \n    -5 \n    0 \n    -4 \n    2 \n    2 \n    0 \n    -2 \n    5 \n    0 \n    -2 \n    0 \n    -2 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    -1 \n    -1 \n    -1 \n    -3 \n    -3 \n    -4 \n    -4 \n    0 \n    -4 \n    0 \n    0 \n    -3 \n    0 \n    -1 \n  \n  \n    0 \n    -2 \n    3 \n    0 \n    -2 \n    0 \n    -4 \n    -3 \n    -5 \n    -5 \n    NA \n    0 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    -3 \n    2 \n    1 \n    0 \n    0 \n    3 \n    0 \n    -2 \n    0 \n    -1 \n    0 \n    -2 \n    0 \n    0 \n    0 \n    -1 \n    -1 \n    0 \n    0 \n    0 \n    -3 \n    -3 \n    5 \n    -5 \n    0 \n    0 \n    0 \n    -1 \n    0 \n  \n  \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    NA \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    4 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -3 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    0 \n    0 \n    -5 \n    -5 \n    -4 \n    5 \n    -5 \n    0 \n    -1 \n    -3 \n    -2 \n    0 \n    NA \n    0 \n    0 \n    3 \n    2 \n    0 \n    -5 \n    -4 \n    -2 \n    0 \n    -5 \n    0 \n    0 \n    0 \n    0 \n    2 \n    0 \n    0 \n    -3 \n    0 \n    0 \n    0 \n    0 \n    5 \n    2 \n    0 \n    0 \n    0 \n    -2 \n    0 \n    0 \n    -1 \n    0 \n    3 \n  \n  \n    -1 \n    0 \n    -2 \n    -1 \n    -1 \n    -1 \n    -2 \n    -5 \n    0 \n    0 \n    -1 \n    0 \n    0 \n    NA \n    3 \n    0 \n    0 \n    0 \n    -3 \n    -2 \n    -1 \n    -2 \n    -3 \n    0 \n    -2 \n    0 \n    -1 \n    0 \n    -1 \n    0 \n    -1 \n    0 \n    0 \n    -1 \n    -2 \n    -1 \n    -1 \n    -4 \n    -5 \n    -2 \n    -3 \n    0 \n    0 \n    -1 \n    0 \n    -5 \n  \n  \n    -1 \n    0 \n    -3 \n    -2 \n    -3 \n    4 \n    -5 \n    -5 \n    -1 \n    0 \n    -2 \n    0 \n    0 \n    3 \n    NA \n    0 \n    -5 \n    0 \n    -4 \n    -3 \n    -1 \n    -3 \n    -4 \n    -5 \n    -2 \n    0 \n    -1 \n    -5 \n    -2 \n    0 \n    -1 \n    3 \n    0 \n    -1 \n    -2 \n    -4 \n    -5 \n    -4 \n    -4 \n    -2 \n    -3 \n    -1 \n    0 \n    -1 \n    -1 \n    3 \n  \n  \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -5 \n    0 \n    0 \n    3 \n    0 \n    0 \n    NA \n    3 \n    0 \n    -1 \n    -1 \n    -1 \n    0 \n    -3 \n    1 \n    0 \n    0 \n    0 \n    1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    1 \n    5 \n    1 \n    1 \n    1 \n    1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    2 \n    0 \n    -3 \n    0 \n    0 \n    3 \n    0 \n    3 \n    0 \n    0 \n    0 \n    0 \n    2 \n    0 \n    -5 \n    3 \n    NA \n    0 \n    -3 \n    -2 \n    0 \n    -1 \n    -3 \n    5 \n    0 \n    0 \n    0 \n    5 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    4 \n    5 \n    5 \n    5 \n    5 \n    4 \n    0 \n    0 \n    0 \n    0 \n    0 \n    4 \n  \n  \n    0 \n    0 \n    -1 \n    0 \n    -5 \n    -5 \n    0 \n    0 \n    -1 \n    -4 \n    -3 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    NA \n    -3 \n    -2 \n    0 \n    -1 \n    -3 \n    0 \n    0 \n    0 \n    4 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    5 \n    -4 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    -1 \n    -2 \n    5 \n    -5 \n    -5 \n    3 \n    -5 \n    -5 \n    -3 \n    2 \n    2 \n    0 \n    -5 \n    -3 \n    -4 \n    -1 \n    -3 \n    -3 \n    NA \n    5 \n    5 \n    -4 \n    4 \n    0 \n    -3 \n    0 \n    -3 \n    -2 \n    0 \n    0 \n    2 \n    1 \n    -2 \n    -3 \n    -2 \n    -1 \n    -1 \n    -4 \n    -5 \n    1 \n    -5 \n    -3 \n    0 \n    -2 \n    2 \n    -4 \n  \n  \n    -1 \n    -2 \n    3 \n    -3 \n    -4 \n    -1 \n    -5 \n    -5 \n    -3 \n    2 \n    1 \n    0 \n    -4 \n    -2 \n    -3 \n    -1 \n    -2 \n    -2 \n    5 \n    NA \n    2 \n    2 \n    4 \n    0 \n    -1 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    2 \n    0 \n    -1 \n    0 \n    0 \n    -1 \n    -2 \n    -5 \n    -5 \n    0 \n    -4 \n    -2 \n    0 \n    -1 \n    0 \n    -5 \n  \n  \n    -1 \n    0 \n    1 \n    -1 \n    -1 \n    0 \n    -2 \n    -2 \n    -1 \n    0 \n    0 \n    0 \n    -2 \n    -1 \n    -1 \n    -1 \n    0 \n    0 \n    5 \n    2 \n    NA \n    -1 \n    2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -2 \n    -2 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    -5 \n    -1 \n    -3 \n    0 \n    -2 \n    1 \n    -5 \n    -4 \n    5 \n    -3 \n    -2 \n    0 \n    0 \n    -2 \n    -3 \n    0 \n    -1 \n    -1 \n    -4 \n    -3 \n    -1 \n    NA \n    -5 \n    0 \n    -3 \n    0 \n    -1 \n    0 \n    5 \n    0 \n    1 \n    5 \n    0 \n    5 \n    0 \n    0 \n    0 \n    -1 \n    -1 \n    3 \n    -1 \n    -1 \n    0 \n    -1 \n    -1 \n    0 \n  \n  \n    -1 \n    -2 \n    3 \n    -5 \n    -5 \n    1 \n    -5 \n    -5 \n    -4 \n    5 \n    3 \n    0 \n    -5 \n    -3 \n    -4 \n    -3 \n    -3 \n    -3 \n    4 \n    4 \n    2 \n    -5 \n    NA \n    0 \n    -4 \n    0 \n    -3 \n    0 \n    0 \n    0 \n    2 \n    0 \n    -2 \n    -2 \n    -1 \n    -1 \n    -1 \n    -5 \n    -5 \n    0 \n    -5 \n    0 \n    0 \n    -3 \n    1 \n    0 \n  \n  \n    1 \n    0 \n    -1 \n    0 \n    0 \n    2 \n    0 \n    3 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -5 \n    1 \n    5 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    NA \n    0 \n    0 \n    0 \n    3 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    5 \n    5 \n    5 \n    5 \n    5 \n    5 \n    0 \n    0 \n    0 \n    0 \n    0 \n    5 \n  \n  \n    0 \n    0 \n    -5 \n    -5 \n    -5 \n    0 \n    5 \n    -4 \n    -1 \n    -2 \n    -2 \n    0 \n    0 \n    -2 \n    -2 \n    0 \n    0 \n    0 \n    -3 \n    -1 \n    0 \n    0 \n    -4 \n    0 \n    NA \n    0 \n    -3 \n    0 \n    0 \n    0 \n    -1 \n    0 \n    -2 \n    0 \n    0 \n    -1 \n    -1 \n    -5 \n    -5 \n    -2 \n    -4 \n    0 \n    0 \n    -3 \n    -3 \n    -5 \n  \n  \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    NA \n    3 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    5 \n    0 \n    0 \n    2 \n    0 \n    0 \n    0 \n    0 \n    3 \n    0 \n    0 \n    1 \n  \n  \n    0 \n    0 \n    -3 \n    -2 \n    -2 \n    -3 \n    -5 \n    -3 \n    -1 \n    -2 \n    -1 \n    0 \n    0 \n    -1 \n    -1 \n    0 \n    0 \n    4 \n    -3 \n    -1 \n    0 \n    -1 \n    -3 \n    0 \n    -3 \n    3 \n    NA \n    0 \n    0 \n    -5 \n    0 \n    0 \n    -2 \n    0 \n    0 \n    -1 \n    -1 \n    -3 \n    -3 \n    -1 \n    5 \n    -1 \n    0 \n    -1 \n    0 \n    -2 \n  \n  \n    0 \n    0 \n    -2 \n    0 \n    0 \n    -2 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    2 \n    0 \n    -5 \n    1 \n    5 \n    0 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    3 \n    0 \n    0 \n    0 \n    NA \n    0 \n    0 \n    -1 \n    0 \n    -1 \n    0 \n    2 \n    2 \n    5 \n    3 \n    2 \n    1 \n    -2 \n    -1 \n    0 \n    -3 \n    -2 \n    2 \n  \n  \n    0 \n    0 \n    -1 \n    -1 \n    -1 \n    0 \n    -2 \n    -1 \n    5 \n    -1 \n    0 \n    0 \n    0 \n    -1 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    5 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    NA \n    0 \n    -2 \n    1 \n    -3 \n    4 \n    0 \n    0 \n    0 \n    -2 \n    -2 \n    3 \n    -3 \n    0 \n    0 \n    -1 \n    -2 \n    0 \n  \n  \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    4 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -5 \n    0 \n    0 \n    NA \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -5 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    0 \n    -1 \n    -1 \n    -1 \n    -1 \n    1 \n    -3 \n    -1 \n    -3 \n    0 \n    0 \n    0 \n    -3 \n    -1 \n    -1 \n    0 \n    0 \n    0 \n    2 \n    2 \n    0 \n    2 \n    2 \n    0 \n    -1 \n    0 \n    0 \n    -1 \n    -2 \n    0 \n    NA \n    1 \n    -1 \n    -1 \n    0 \n    0 \n    0 \n    -2 \n    -3 \n    0 \n    -3 \n    -1 \n    0 \n    -1 \n    -3 \n    -1 \n  \n  \n    0 \n    -2 \n    -5 \n    0 \n    0 \n    1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    3 \n    0 \n    0 \n    0 \n    1 \n    0 \n    0 \n    5 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    1 \n    0 \n    1 \n    NA \n    0 \n    3 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    0 \n    0 \n    -2 \n    -2 \n    -3 \n    -1 \n    5 \n    -3 \n    -2 \n    -1 \n    -1 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -2 \n    -1 \n    0 \n    0 \n    -2 \n    0 \n    -2 \n    0 \n    -2 \n    -1 \n    -3 \n    0 \n    -1 \n    0 \n    NA \n    -1 \n    -1 \n    -2 \n    -2 \n    -3 \n    -3 \n    -1 \n    -3 \n    0 \n    0 \n    -1 \n    -2 \n    0 \n  \n  \n    0 \n    -1 \n    -1 \n    -1 \n    -1 \n    0 \n    0 \n    -3 \n    5 \n    -1 \n    0 \n    0 \n    0 \n    -1 \n    -1 \n    0 \n    0 \n    0 \n    -3 \n    0 \n    0 \n    5 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    4 \n    0 \n    -1 \n    3 \n    -1 \n    NA \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n  \n  \n    1 \n    0 \n    -1 \n    -1 \n    0 \n    2 \n    -2 \n    1 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    -2 \n    -2 \n    1 \n    4 \n    0 \n    -2 \n    0 \n    0 \n    0 \n    -1 \n    5 \n    0 \n    5 \n    0 \n    2 \n    0 \n    0 \n    0 \n    0 \n    -1 \n    0 \n    NA \n    5 \n    5 \n    -1 \n    5 \n    5 \n    0 \n    0 \n    5 \n    0 \n    0 \n    5 \n  \n  \n    2 \n    1 \n    -1 \n    -1 \n    0 \n    4 \n    -2 \n    4 \n    0 \n    -3 \n    0 \n    0 \n    5 \n    -1 \n    -4 \n    5 \n    5 \n    0 \n    -1 \n    -1 \n    0 \n    0 \n    -1 \n    5 \n    -1 \n    0 \n    -1 \n    2 \n    0 \n    0 \n    0 \n    0 \n    -2 \n    0 \n    5 \n    NA \n    5 \n    5 \n    5 \n    4 \n    -1 \n    -1 \n    1 \n    -1 \n    -5 \n    5 \n  \n  \n    2 \n    1 \n    -1 \n    -1 \n    0 \n    4 \n    -2 \n    4 \n    0 \n    -3 \n    0 \n    0 \n    2 \n    -1 \n    -5 \n    1 \n    5 \n    0 \n    -1 \n    -2 \n    0 \n    0 \n    -1 \n    5 \n    -1 \n    0 \n    -1 \n    5 \n    0 \n    0 \n    0 \n    0 \n    -2 \n    0 \n    5 \n    5 \n    NA \n    5 \n    5 \n    5 \n    -1 \n    -1 \n    1 \n    -1 \n    -5 \n    5 \n  \n  \n    3 \n    2 \n    -5 \n    -2 \n    3 \n    5 \n    -5 \n    5 \n    -3 \n    -4 \n    -2 \n    0 \n    0 \n    -4 \n    -4 \n    1 \n    4 \n    0 \n    -4 \n    -5 \n    -1 \n    -5 \n    -5 \n    5 \n    -5 \n    1 \n    -3 \n    3 \n    -2 \n    0 \n    -2 \n    0 \n    -3 \n    0 \n    -1 \n    5 \n    5 \n    NA \n    4 \n    5 \n    -5 \n    -1 \n    0 \n    -1 \n    -5 \n    5 \n  \n  \n    2 \n    0 \n    -5 \n    -1 \n    -4 \n    5 \n    -5 \n    3 \n    -2 \n    -4 \n    -3 \n    0 \n    0 \n    -5 \n    -4 \n    1 \n    5 \n    0 \n    -5 \n    -5 \n    -2 \n    -1 \n    -5 \n    5 \n    -5 \n    0 \n    -3 \n    2 \n    -2 \n    0 \n    -3 \n    0 \n    -3 \n    0 \n    5 \n    5 \n    5 \n    3 \n    NA \n    5 \n    -5 \n    -3 \n    1 \n    -4 \n    -5 \n    5 \n  \n  \n    1 \n    2 \n    -1 \n    0 \n    -3 \n    4 \n    -2 \n    4 \n    1 \n    0 \n    1 \n    0 \n    0 \n    -2 \n    -3 \n    1 \n    4 \n    0 \n    1 \n    0 \n    0 \n    3 \n    0 \n    5 \n    -2 \n    0 \n    -1 \n    1 \n    1 \n    0 \n    0 \n    0 \n    -1 \n    0 \n    5 \n    5 \n    5 \n    5 \n    5 \n    NA \n    -3 \n    -1 \n    1 \n    -1 \n    -1 \n    5 \n  \n  \n    0 \n    -2 \n    -5 \n    -5 \n    -5 \n    -5 \n    -5 \n    -5 \n    -2 \n    -4 \n    -5 \n    -3 \n    -2 \n    -3 \n    -3 \n    0 \n    0 \n    5 \n    -5 \n    -4 \n    -1 \n    -1 \n    -5 \n    0 \n    -4 \n    0 \n    5 \n    -2 \n    -3 \n    -5 \n    -3 \n    0 \n    -3 \n    0 \n    0 \n    -1 \n    -1 \n    -4 \n    -5 \n    -3 \n    NA \n    2 \n    0 \n    0 \n    -3 \n    -2 \n  \n  \n    0 \n    0 \n    -3 \n    -3 \n    -4 \n    -3 \n    -3 \n    0 \n    -2 \n    0 \n    0 \n    0 \n    0 \n    0 \n    -1 \n    0 \n    0 \n    -4 \n    -3 \n    -2 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    0 \n    -1 \n    -1 \n    0 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    0 \n    -1 \n    -1 \n    -1 \n    -3 \n    -1 \n    -2 \n    NA \n    0 \n    0 \n    -1 \n    0 \n  \n  \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    3 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    0 \n    5 \n    1 \n    1 \n    0 \n    1 \n    1 \n    0 \n    0 \n    NA \n    0 \n    0 \n    1 \n  \n  \n    0 \n    1 \n    -2 \n    5 \n    5 \n    0 \n    -5 \n    -3 \n    -1 \n    -3 \n    0 \n    0 \n    -1 \n    -1 \n    -1 \n    0 \n    0 \n    0 \n    -2 \n    -1 \n    0 \n    -1 \n    -3 \n    0 \n    -3 \n    0 \n    -1 \n    -3 \n    -1 \n    0 \n    -1 \n    0 \n    -1 \n    0 \n    0 \n    -1 \n    -1 \n    -1 \n    -4 \n    -1 \n    0 \n    0 \n    0 \n    NA \n    -1 \n    0 \n  \n  \n    0 \n    -1 \n    -1 \n    0 \n    -1 \n    -2 \n    -2 \n    -1 \n    -2 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    2 \n    0 \n    0 \n    2 \n    1 \n    0 \n    -3 \n    0 \n    0 \n    -2 \n    -2 \n    0 \n    -3 \n    0 \n    -2 \n    0 \n    0 \n    -5 \n    -5 \n    -5 \n    -5 \n    -1 \n    -3 \n    -1 \n    0 \n    -1 \n    NA \n    -5 \n  \n  \n    3 \n    -1 \n    -5 \n    0 \n    1 \n    5 \n    0 \n    0 \n    -1 \n    -1 \n    0 \n    0 \n    3 \n    -5 \n    3 \n    0 \n    4 \n    0 \n    -4 \n    -5 \n    0 \n    -1 \n    0 \n    5 \n    -5 \n    1 \n    -2 \n    2 \n    0 \n    0 \n    -1 \n    0 \n    0 \n    0 \n    5 \n    5 \n    5 \n    5 \n    5 \n    5 \n    -2 \n    0 \n    1 \n    0 \n    -5 \n    NA \n  \n\n\n\n\n\nCharacters in Game of Thrones seem to dislike each other much more than like each other…\n\nhist(E(g.likes)$weight)\n\n\n\nE(g.likes)$color <- colorRampPalette(c(\"yellow\", \"blue\"))(11)[E(g.likes)$weight + 6]\n\nplot(g.likes, edge.arrow.size = 0.5)"
  },
  {
    "objectID": "posts/Challenge_1_Mekhala.html",
    "href": "posts/Challenge_1_Mekhala.html",
    "title": "Challenge 1 Mekhala",
    "section": "",
    "text": "Code\ngot_marriages<-read_csv(\"_data/got/got_marriages.csv\")\n\n\nRows: 255 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nhead(got_marriages)\n\n\n# A tibble: 6 × 5\n  From      To      Type    Notes  Generation\n  <chr>     <chr>   <chr>   <chr>  <chr>     \n1 Targaryen Stark   Married R+L=J  Current   \n2 Baratheon Martell Engaged died   Current   \n3 Baratheon Stark   Engaged broken Current   \n4 Martell   Essos   Married <NA>   Current   \n5 Martell   Reach   Affair  <NA>   Current   \n6 Martell   Essos   Affair  <NA>   Current"
  },
  {
    "objectID": "posts/Challenge_1_Mekhala.html#creating-the-network",
    "href": "posts/Challenge_1_Mekhala.html#creating-the-network",
    "title": "Challenge 1 Mekhala",
    "section": "Creating the network",
    "text": "Creating the network\n\n\nCode\ngot_marriages_net<-graph_from_data_frame(got_marriages,directed=FALSE)"
  },
  {
    "objectID": "posts/Challenge_1_Mekhala.html#features-of-the-network",
    "href": "posts/Challenge_1_Mekhala.html#features-of-the-network",
    "title": "Challenge 1 Mekhala",
    "section": "Features of the network",
    "text": "Features of the network\nThe network has 20 vertices and 255 edges. It is a unimodal, undirected and unweighted network.\n\n\nCode\nvcount(got_marriages_net)\n\n\n[1] 20\n\n\nCode\necount(got_marriages_net)\n\n\n[1] 255\n\n\nCode\nis_bipartite(got_marriages_net)\n\n\n[1] FALSE\n\n\nCode\nis_directed(got_marriages_net)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_marriages_net)\n\n\n[1] FALSE\n\n\nCode\nvertex_attr_names(got_marriages_net)\n\n\n[1] \"name\"\n\n\nCode\nedge_attr_names(got_marriages_net)\n\n\n[1] \"Type\"       \"Notes\"      \"Generation\""
  },
  {
    "objectID": "posts/Challenge_1_Mekhala.html#plotting-the-network",
    "href": "posts/Challenge_1_Mekhala.html#plotting-the-network",
    "title": "Challenge 1 Mekhala",
    "section": "Plotting the network",
    "text": "Plotting the network\n\n\nCode\nplot(got_marriages_net)\n\n\n\n\n\n##Trying a Second dataset The fish encounters network has 30 vertices and 114 edges. It is also a unimodal, undirected and unweighted network. I am not sure how to interpret the plot for the fish encounters data.\n\n\nCode\nfish<-fish_encounters\nhead(fish)\n\n\n# A tibble: 6 × 3\n  fish  station  seen\n  <fct> <fct>   <int>\n1 4842  Release     1\n2 4842  I80_1       1\n3 4842  Lisbon      1\n4 4842  Rstr        1\n5 4842  Base_TD     1\n6 4842  BCE         1\n\n\nCode\nfish_n<-graph_from_data_frame(fish_encounters,directed=FALSE)\nvcount(fish_n)\n\n\n[1] 30\n\n\nCode\necount(fish_n)\n\n\n[1] 114\n\n\nCode\nis_bipartite(fish_n)\n\n\n[1] FALSE\n\n\nCode\nis_directed(fish_n)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(fish_n)\n\n\n[1] FALSE\n\n\nCode\nvertex_attr_names(fish_n)\n\n\n[1] \"name\"\n\n\nCode\nedge_attr_names(fish_n)\n\n\n[1] \"seen\"\n\n\nCode\nplot(fish_n)"
  },
  {
    "objectID": "posts/Week1Challenge_KenDocekal.html",
    "href": "posts/Week1Challenge_KenDocekal.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\nError in library(tidyverse): there is no package called 'tidyverse'\n\n\nCode\nknitr::opts_chunk$set(echo = TRUE)\n\n\n\n\nCode\ngetwd()\n\n\n[1] \"/home/runner/work/Social_Networks_Spring_2023/Social_Networks_Spring_2023/posts\"\n\n\n\n\nCode\nsetwd(\"C:/Users/User/Documents/DACSS/697/Social_Networks_Spring_2023/posts/\")\n\n\nError in setwd(\"C:/Users/User/Documents/DACSS/697/Social_Networks_Spring_2023/posts/\"): cannot change working directory\n\n\n\n\nCode\ngotDislike <- read_csv(\"_data/got/got_like_dislike.csv\")\n\n\nError in read_csv(\"_data/got/got_like_dislike.csv\"): could not find function \"read_csv\"\n\n\n\n\nCode\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\n\n\nCode\ngotDislike.ig <- graph_from_data_frame(gotDislike, directed = FALSE)\n\n\nError in as.data.frame(d): object 'gotDislike' not found\n\n\n\n\nCode\nplot.igraph(gotDislike.ig)\n\n\nError in plot.igraph(gotDislike.ig): object 'gotDislike.ig' not found\n\n\nTests below show the data is unimodal, undirected, and unweighted\n\n\nCode\nis_directed(gotDislike.ig)\n\n\nError in \"igraph\" %in% class(graph): object 'gotDislike.ig' not found\n\n\nCode\nis_weighted(gotDislike.ig)\n\n\nError in \"igraph\" %in% class(graph): object 'gotDislike.ig' not found\n\n\nCode\nis_bipartite(gotDislike.ig)\n\n\nError in \"igraph\" %in% class(graph): object 'gotDislike.ig' not found"
  },
  {
    "objectID": "posts/Week1_Challenge_Instructions.html",
    "href": "posts/Week1_Challenge_Instructions.html",
    "title": "Week 1 Challenge Instructions",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/Week1_Challenge_Instructions.html#load-the-data",
    "href": "posts/Week1_Challenge_Instructions.html#load-the-data",
    "title": "Week 1 Challenge Instructions",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_marriages.csv\nfish_encounters dataset (available in the tidyr package)\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation."
  },
  {
    "objectID": "posts/Week1_Challenge_Instructions.html#create-a-network",
    "href": "posts/Week1_Challenge_Instructions.html#create-a-network",
    "title": "Week 1 Challenge Instructions",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?"
  },
  {
    "objectID": "posts/Jyoti_Rani_Challenge_1.html",
    "href": "posts/Jyoti_Rani_Challenge_1.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object\n\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/Jyoti_Rani_Challenge_1.html#load-the-data",
    "href": "posts/Jyoti_Rani_Challenge_1.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\nCode\ngot_like_dislike <- read_csv(\"_data/got/got_like_dislike.csv\")\n\n\nRows: 46 Columns: 49\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Current house, Former house, Name\ndbl (46): Lysa Arryn, Petyr Baelish, Joffrey Baratheon, Margaery Tyrell, Ren...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nThe dataset has 46 rows and 49 columns"
  },
  {
    "objectID": "posts/Jyoti_Rani_Challenge_1.html#create-a-network",
    "href": "posts/Jyoti_Rani_Challenge_1.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\nCode\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\n\nFrom the below commands we know that the data is undirected, unmweighted and unimodal.\nThe plot is below:\n\n\nCode\ngot_like_dislike.ig <- graph_from_data_frame(got_like_dislike, directed = FALSE)\n\n\nWarning in graph_from_data_frame(got_like_dislike, directed = FALSE): In `d'\n`NA' elements were replaced with string \"NA\"\n\n\nCode\nis_directed(got_like_dislike.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_like_dislike.ig)\n\n\n[1] FALSE\n\n\nCode\nis_bipartite(got_like_dislike.ig)\n\n\n[1] FALSE\n\n\nCode\nplot.igraph(got_like_dislike.ig)"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html",
    "href": "posts/MirandaManka_Challenge1.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(igraph)\n\nknitr::opts_chunk$set(echo = TRUE)"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html#challenge-overview",
    "href": "posts/MirandaManka_Challenge1.html#challenge-overview",
    "title": "Week 1 Challenge",
    "section": "Challenge Overview",
    "text": "Challenge Overview\nToday’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html#load-the-data",
    "href": "posts/MirandaManka_Challenge1.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\n\n\nCode\ngot_marriages = read_csv(\"_data/got/got_marriages.csv\", show_col_types = FALSE)\ngot_marriages\n\n\n# A tibble: 255 × 5\n   From      To        Type    Notes  Generation\n   <chr>     <chr>     <chr>   <chr>  <chr>     \n 1 Targaryen Stark     Married R+L=J  Current   \n 2 Baratheon Martell   Engaged died   Current   \n 3 Baratheon Stark     Engaged broken Current   \n 4 Martell   Essos     Married <NA>   Current   \n 5 Martell   Reach     Affair  <NA>   Current   \n 6 Martell   Essos     Affair  <NA>   Current   \n 7 Martell   Essos     Affair  <NA>   Current   \n 8 Martell   Septa     Affair  <NA>   Current   \n 9 Martell   Dorne     Affair  <NA>   Current   \n10 Martell   Targaryen Married <NA>   Current   \n# … with 245 more rows"
  },
  {
    "objectID": "posts/MirandaManka_Challenge1.html#create-a-network",
    "href": "posts/MirandaManka_Challenge1.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nThe network is undirected, unweighted, and unimodal. There are 20 vertices/nodes (families) and 255 edges/links (different connections/relationships).\n\n\nCode\ngot_marriages.ig = graph_from_data_frame(got_marriages, directed = FALSE) #directed = false because with relationships, if a is married to b then b is also married to a\ngot_marriages.ig\n\n\nIGRAPH 3af7a91 UN-- 20 255 -- \n+ attr: name (v/c), Type (e/c), Notes (e/c), Generation (e/c)\n+ edges from 3af7a91 (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n+ ... omitted several edges\n\n\nCode\nvcount(got_marriages.ig)\n\n\n[1] 20\n\n\nCode\necount(got_marriages.ig)\n\n\n[1] 255\n\n\nCode\nis_bipartite(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_directed(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\ntable(got_marriages$Type)\n\n\n\n Affair Engaged Married \n     36       2     217 \n\n\nCode\nplot(got_marriages.ig)"
  },
  {
    "objectID": "posts/steveoneill_week2.html",
    "href": "posts/steveoneill_week2.html",
    "title": "Short Assignment 1: Reading Network Data",
    "section": "",
    "text": "got_marriages <- read_csv(\"_data/got/got_marriages.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "posts/steveoneill_week2.html#statnet",
    "href": "posts/steveoneill_week2.html#statnet",
    "title": "Short Assignment 1: Reading Network Data",
    "section": "Statnet",
    "text": "Statnet\nI am assuming “loops” are cases where Lannister – Lannister, or similar. So I’ll be setting that to TRUE. And multiple to TRUE as well.\n\ngot_marriages.stat <- as.network(got_marriages, loops = TRUE, multiple = TRUE)\nprint(got_marriages.stat)\n\n Network attributes:\n  vertices = 20 \n  directed = TRUE \n  hyper = FALSE \n  loops = TRUE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 255 \n    missing edges= 0 \n    non-missing edges= 255 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names: \n    Generation Notes Type \n\n\nThis is a network object rather than a igraph object we were using before.\n\nclass(got_marriages.stat)\n\n[1] \"network\"\n\nclass(got_marriages.net)\n\n[1] \"igraph\"\n\n\nPlotting is ugly, but functional:\n\nplot(got_marriages.stat,\n     displaylabels = T)"
  },
  {
    "objectID": "posts/Week1_Challenge_AnanyaPujary.html",
    "href": "posts/Week1_Challenge_AnanyaPujary.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/Week1_Challenge_AnanyaPujary.html#load-the-data",
    "href": "posts/Week1_Challenge_AnanyaPujary.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\nReading in the got_marriages.csv file:\n\n\nCode\ngot_marriages<-read_csv(\"../posts/_data/got/got_marriages.csv\")\n\n\nRows: 255 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\ngot_marriages\n\n\n# A tibble: 255 × 5\n   From      To        Type    Notes  Generation\n   <chr>     <chr>     <chr>   <chr>  <chr>     \n 1 Targaryen Stark     Married R+L=J  Current   \n 2 Baratheon Martell   Engaged died   Current   \n 3 Baratheon Stark     Engaged broken Current   \n 4 Martell   Essos     Married <NA>   Current   \n 5 Martell   Reach     Affair  <NA>   Current   \n 6 Martell   Essos     Affair  <NA>   Current   \n 7 Martell   Essos     Affair  <NA>   Current   \n 8 Martell   Septa     Affair  <NA>   Current   \n 9 Martell   Dorne     Affair  <NA>   Current   \n10 Martell   Targaryen Married <NA>   Current   \n# … with 245 more rows"
  },
  {
    "objectID": "posts/Week1_Challenge_AnanyaPujary.html#create-a-network",
    "href": "posts/Week1_Challenge_AnanyaPujary.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nCreating an igraph object and finding out whether the network directed, weighted or bipartite.\n\n\nCode\n# not adjacency matrix, not n x n matrix => undirected\ngot_marriages.ig <-graph_from_data_frame(got_marriages, directed = FALSE)\n\nhead(got_marriages.ig)\n\n\n6 x 20 sparse Matrix of class \"dgCMatrix\"\n\n\n   [[ suppressing 20 column names 'Targaryen', 'Baratheon', 'Martell' ... ]]\n\n\n                                                     \nTargaryen 19 2 3 . .  4 . 7  1 1 2 3 . . 11 3 8 . 2 .\nBaratheon  2 . 1 1 4  2 . 1  1 1 1 . . .  2 1 . . . .\nMartell    3 1 . . .  1 . .  . . . . . .  . . 4 1 2 .\nLannister  . 1 . 4 .  1 . . 15 1 . . . 2  . . . . . .\nTyrell     . 4 . . .  8 . .  . . . . . .  . . . . . .\nReach      4 2 1 1 8 12 1 3  1 . . . . 2  . 1 1 . . .\n\n\nCode\n# describing the network\nis_directed(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_bipartite(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_marriages.ig)\n\n\n[1] FALSE\n\n\nThus, this network is undirected, unimodal, and unweighted.\nNow, I’ll plot the network:\n\n\nCode\n# plotting the network \nplot(got_marriages.ig, edge.curved=.1, vertex.color = \"orange\")"
  },
  {
    "objectID": "posts/ClaireBattaglia_Week2Challenge.html",
    "href": "posts/ClaireBattaglia_Week2Challenge.html",
    "title": "Week 2 Challenge",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(statnet)\n\nknitr::opts_chunk$set(echo = TRUE)"
  },
  {
    "objectID": "posts/ClaireBattaglia_Week2Challenge.html#describe-the-network-data",
    "href": "posts/ClaireBattaglia_Week2Challenge.html#describe-the-network-data",
    "title": "Week 2 Challenge",
    "section": "Describe the network data",
    "text": "Describe the network data\nThis week I’ll be creating a network of the distances between various places in Game of Thrones. The data are organized in an edgelist.\n\n\nCode\n# read in data\ndist <- read_csv(\"_data/got/got_distances.csv\", show_col_types = FALSE)\n\n# reorder columns\ndist <- dist %>%\n    relocate(From, To, Miles, Mode, .before = \"Region From\")\n\n# preview\nhead(dist, 10)\n\n\n# A tibble: 10 × 6\n   From          To               Miles Mode  `Region From` Notes   \n   <chr>         <chr>            <dbl> <chr> <chr>         <chr>   \n 1 Casterly Rock the Golden Tooth   240 land  Westerlands   <NA>    \n 2 Casterly Rock Lannisport          40 land  Westerlands   <NA>    \n 3 Casterly Rock Kayce              100 land  Westerlands   <NA>    \n 4 Casterly Rock Kayce               12 water Westerlands   <NA>    \n 5 Casterly Rock Deep Den           240 land  Westerlands   Goldroad\n 6 Deep Den      King’s Landing     590 land  Westerlands   Goldroad\n 7 Kayce         Faircastle         480 raven Westerlands   <NA>    \n 8 Faircastle    the Crag           115 Boat  Westerlands   Island  \n 9 the Crag      Ashemark            85 land  Westerlands   <NA>    \n10 Ashemark      Casterly Rock      170 land  Westerlands   <NA>    \n\n\nThe “from” and “to” fields are already clearly defined and it seems as though the miles and mode are edge attributes. I’m not sure what the “Region From” field is in the context of a network, though.\n\n\nCode\n# create network object\ndist.ig <- graph_from_data_frame(dist, directed = FALSE)\n\n# view\nprint(dist.ig)\n\n\nIGRAPH 0440fcf UN-- 134 200 -- \n+ attr: name (v/c), Miles (e/n), Mode (e/c), Region From (e/c), Notes\n| (e/c)\n+ edges from 0440fcf (vertex names):\n [1] Casterly Rock--the Golden Tooth Casterly Rock--Lannisport      \n [3] Casterly Rock--Kayce            Casterly Rock--Kayce           \n [5] Casterly Rock--Deep Den         Deep Den     --King’s Landing  \n [7] Kayce        --Faircastle       Faircastle   --the Crag        \n [9] the Crag     --Ashemark         Casterly Rock--Ashemark        \n[11] Ashemark     --the Golden Tooth Lannisport   --Crakehall       \n[13] Crakehall    --Old Oak          Old Oak      --Highgarden      \n+ ... omitted several edges\n\n\nWe can see a few things from this summary:\n\nThe network is undirected. This makes sense as distances between physical locations are by nature symmetrical.\nThe network is named. I.e. the nodes/vertices have names. In this network the nodes are physical places with names.\nThe edges are unweighted.\nIt is not bipartite.\nThere are 134 nodes/vertices.\nThere are 200 edges/ties.\n\nWe can get a bit more information about the nodes and edges.\n\n\nCode\n# get count\nvcount(dist.ig)\n\n\n[1] 134\n\n\nCode\necount(dist.ig)\n\n\n[1] 200\n\n\nCode\n# get attributes\nvertex_attr_names(dist.ig)\n\n\n[1] \"name\"\n\n\nCode\nedge_attr_names(dist.ig)\n\n\n[1] \"Miles\"       \"Mode\"        \"Region From\" \"Notes\"      \n\n\nThe “Region From” field is currently being understood as an edge attribute, which doesn’t really make sense to me so I am wondering if I need to specify it as something else."
  },
  {
    "objectID": "posts/ClaireBattaglia_Week2Challenge.html#dyad-and-triad-census",
    "href": "posts/ClaireBattaglia_Week2Challenge.html#dyad-and-triad-census",
    "title": "Week 2 Challenge",
    "section": "Dyad and triad census",
    "text": "Dyad and triad census\nWe can also use a dyad and triad census to get a better understanding of the network.\n\n\nCode\n# dyad census\nigraph::dyad.census(dist.ig)\n\n\n$mut\n[1] 190\n\n$asym\n[1] 0\n\n$null\n[1] 8721\n\n\nI’m not sure what to make of the dyad census. Given that distances between places are by nature reciprocal, I don’t understand why all the dyads aren’t mutual. There is no way for Casterly Rock to be 240 miles from the Golden Tooth without the Golden Tooth also being 240 miles from Casterly Rock.\nGiven the number of null dyads (i.e. missing ties), it seems as though the mileage between many places hasn’t been recorded. Again, there is by definition a distance between any two physical places.\n\n\nCode\n# triad census\nigraph::triad.census(dist.ig)\n\n\nWarning in igraph::triad.census(dist.ig): At core/misc/motifs.c:1165 : Triad\ncensus called on an undirected graph.\n\n\n [1] 368822      0  22731      0      0      0      0      0      0      0\n[11]    501      0      0      0      0     30\n\n\nA triad census doesn’t work on an undirected grapgh so I’m not sure whether there is anything meaningful here.\nLogically we know there is a distance between every two physical place so it seems like the dyad and triad census in this case is more useful for revealing missing distances than anything else.\nIf the ties in this network were roads or established routes of some kind, both censuses could reveal interesting insight into places that are more connected than others but distance is a feature of the physical world, not a human creation."
  },
  {
    "objectID": "posts/ClaireBattaglia_Week2Challenge.html#global-and-local-transitivity",
    "href": "posts/ClaireBattaglia_Week2Challenge.html#global-and-local-transitivity",
    "title": "Week 2 Challenge",
    "section": "Global and local transitivity",
    "text": "Global and local transitivity\n\n\nCode\n# get global trans\ntransitivity(dist.ig)\n\n\n[1] 0.1522843\n\n\nCode\n# get avg local trans\ntransitivity(dist.ig, type = \"average\")\n\n\n[1] 0.1767116\n\n\nCode\n# get local trans of Winterfell, Casterly Rock\ntransitivity(dist.ig, type = \"local\", vids = V(dist.ig)[c(\"Winterfell\", \"Casterly Rock\")])\n\n\n[1] 0.03571429 0.09523810\n\n\nWe can see that the transitivity scores of Winterfell and Casterly Rock are .04 and .1, respectively, indicating that in the context of this network, a higher percentage of the nodes connected to Casterly Rock are also connected to each other than for Winterfell.\nAgain, the concept of transitivity doesn’t make a lot of sense when we’re talking about distances between physical features."
  },
  {
    "objectID": "posts/ClaireBattaglia_Week2Challenge.html#path-length-and-component-structure",
    "href": "posts/ClaireBattaglia_Week2Challenge.html#path-length-and-component-structure",
    "title": "Week 2 Challenge",
    "section": "Path length and component structure",
    "text": "Path length and component structure\n\n\nCode\n# get component names\nnames(igraph::components(dist.ig))\n\n\n[1] \"membership\" \"csize\"      \"no\"        \n\n\nCode\n# get number of components\nigraph::components(dist.ig)$no\n\n\n[1] 3\n\n\nCode\n# get size of components\nigraph::components(dist.ig)$csize\n\n\n[1] 129   3   2\n\n\nThis is interesting. There are three components in the network. If the network included the distances between each of the places included—as in a map—there would be just a single component in the network. Either the network is missing a lot of information or I read it in incorrectly.\n\n\nCode\n# get distance between Winterfell and Casterly Rock\ndistances(dist.ig,\"Winterfell\",\"Casterly Rock\")\n\n\n           Casterly Rock\nWinterfell             2\n\n\nCode\n# get distance between Winterfell and King’s Landing\ndistances(dist.ig,\"Winterfell\",\"King’s Landing\")\n\n\n           King’s Landing\nWinterfell              1\n\n\nCode\n# get distance between Casterly Rock and King’s Landing\ndistances(dist.ig,\"King’s Landing\",\"Casterly Rock\")\n\n\n               Casterly Rock\nKing’s Landing             1\n\n\nBoth Winterfell and Casterly Rock are equidistant from King’s Landing. We know this isn’t true in terms of the number of miles so I think this is talking about the number of nodes in between each of them and King’s Landing. This is interesting because even this measure of distance (i.e. number of nodes instead of number of miles) can have profound socio-political implications.\n\n\nCode\n# get density\ngraph.density(dist.ig, loops = T)\n\n\n[1] 0.02211166\n\n\n\n\nCode\n# remove multiple and loops\ndist.ig <- simplify(dist.ig, remove.multiple = F, remove.loops = T)\n\n# assign weight??\n#E(dist.ig)$weight <- E(dist.ig)$Miles\n\n# plot network\nplot(dist.ig,\n     vertex.size = 5,\n     vertex.color = \"maroon\",\n     vertex.label.cex = .5,\n     main = \"Distances between places in Game of Thrones\")"
  },
  {
    "objectID": "posts/ClaireBattaglia_Week2Challenge.html#questions",
    "href": "posts/ClaireBattaglia_Week2Challenge.html#questions",
    "title": "Week 2 Challenge",
    "section": "Questions",
    "text": "Questions\n\nWhat to do with “Region From” field? This is potentially meaningful information but I’m not sure how to incorporate it into the network.\nHow to make the length of the tie proportional to the number of miles? I’d like the distance() function to return the number of miles between two nodes–is this possible?\nHow to display the number of miles?\nHow to color the edges according to the mode?"
  },
  {
    "objectID": "posts/ClaireBattaglia_Week1Challenge.html",
    "href": "posts/ClaireBattaglia_Week1Challenge.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(igraph)\n\nknitr::opts_chunk$set(echo = TRUE)"
  },
  {
    "objectID": "posts/ClaireBattaglia_Week1Challenge.html#data",
    "href": "posts/ClaireBattaglia_Week1Challenge.html#data",
    "title": "Week 1 Challenge",
    "section": "Data",
    "text": "Data\nThis dataset represents the teams in Game of Thrones.\n\n\nCode\n# read in data\nteams <- read_csv(\"_data/got/got_teams.csv\", show_col_types = FALSE)\n\n# specify from, to fields\nteams <- teams %>%\n  rename(from = team, to = joins) %>%\n  relocate(from, to, alliance, gh, .before = id)\n\n# preview\nhead(teams, 25)\n\n\n# A tibble: 25 × 5\n   from         to                    alliance        gh    id\n   <chr>        <chr>                 <chr>        <dbl> <dbl>\n 1 Drogo        follows Drogo         Opportunists     0     0\n 2 Littlefinger follows Littlefinger  Opportunists     0     1\n 3 Martell      joins the Martells    Opportunists     0     2\n 4 Red God      worships the Red God  Opportunists     0     3\n 5 Renly        follows Renly         Opportunists     0     4\n 6 Second Sons  joins the Second Sons Opportunists     0     5\n 7 Stannis      follows Stannis       Opportunists     0     6\n 8 Stormcrows   joins the Stormcrows  Opportunists     0     7\n 9 Targaryen    joins the Targaryens  Opportunists     0     8\n10 Tyrell       joins the Tyrells     Opportunists     0     9\n# … with 15 more rows\n\n\nNow I’ll create a network object.\n\n\nCode\n# create network object\nteams.ig <- graph_from_data_frame(teams, directed = FALSE)\n\n# view\nteams.ig\n\n\nIGRAPH b1d14af UN-- 66 33 -- \n+ attr: name (v/c), alliance (e/c), gh (e/n), id (e/n)\n+ edges from b1d14af (vertex names):\n [1] Drogo       --follows Drogo         Littlefinger--follows Littlefinger \n [3] Martell     --joins the Martells    Red God     --worships the Red God \n [5] Renly       --follows Renly         Second Sons --joins the Second Sons\n [7] Stannis     --follows Stannis       Stormcrows  --joins the Stormcrows \n [9] Targaryen   --joins the Targaryens  Tyrell      --joins the Tyrells    \n[11] Windblown   --joins the Windblown  \n+ ... omitted several edges\n\n\nThis tells us a few things.\n\nThe network is undirected.\nThe network is named. I.e. the nodes have names.\nThe edges are not weighted.\nIt is not bipartite.\nThere are 66 nodes/vertices.\nThere are 33 edges/ties.\n\nWe can explore the nodes and edges further.\n\n\nCode\n# get nodes\nV(teams.ig)\n\n\n+ 66/66 vertices, named, from b1d14af:\n [1] Drogo                                  \n [2] Littlefinger                           \n [3] Martell                                \n [4] Red God                                \n [5] Renly                                  \n [6] Second Sons                            \n [7] Stannis                                \n [8] Stormcrows                             \n [9] Targaryen                              \n[10] Tyrell                                 \n+ ... omitted several vertices\n\n\nCode\n# get edges\nE(teams.ig)\n\n\n+ 33/33 edges from b1d14af (vertex names):\n [1] Drogo             --follows Drogo                          \n [2] Littlefinger      --follows Littlefinger                   \n [3] Martell           --joins the Martells                     \n [4] Red God           --worships the Red God                   \n [5] Renly             --follows Renly                          \n [6] Second Sons       --joins the Second Sons                  \n [7] Stannis           --follows Stannis                        \n [8] Stormcrows        --joins the Stormcrows                   \n [9] Targaryen         --joins the Targaryens                   \n[10] Tyrell            --joins the Tyrells                      \n+ ... omitted several edges\n\n\nLet’s try to plot this.\n\n\nCode\n# not sure what this does but I found it on the internet so why not :)\nteams.ig <- simplify(teams.ig, remove.multiple = F, remove.loops = T)\n\n# assign weight\nE(teams.ig)$weight <- E(teams.ig)$alliance\n\n# plot network\nplot(teams.ig,\n     vertex.size = 10,\n     vertex.color = \"maroon\",\n     vertex.label.cex = .5,\n     main = \"Game of Thrones Teams\")\n\n\nWarning in (function (graph, coords = NULL, dim = 2, niter = 500, start.temp =\nsqrt(vcount(graph)), : NAs introduced by coercion\n\n\n\n\n\nThat looks… sort of useless (but vaguely like a network!)."
  },
  {
    "objectID": "posts/Week1_Challenge_QuinnH.html",
    "href": "posts/Week1_Challenge_QuinnH.html",
    "title": "Week 1 Challenge",
    "section": "",
    "text": "Today’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/Week1_Challenge_QuinnH.html#load-the-data",
    "href": "posts/Week1_Challenge_QuinnH.html#load-the-data",
    "title": "Week 1 Challenge",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_marriages.csv\nfish_encounters dataset (available in the tidyr package)\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\nCode\ngot <- read_csv(\"../posts/_data/got/got_marriages.csv\")\n\n\nRows: 255 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation."
  },
  {
    "objectID": "posts/Week1_Challenge_QuinnH.html#create-a-network",
    "href": "posts/Week1_Challenge_QuinnH.html#create-a-network",
    "title": "Week 1 Challenge",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\nThe first graph I create is by attempting to add weights to the edges based on what we discussed in class. I am still looking for resources on statnet graphing.\n\n\nCode\ngot2<- group_by(got, From, To) %>% \n  summarise(weight = n())\n\n\n`summarise()` has grouped output by 'From'. You can override using the\n`.groups` argument.\n\n\n\n\nCode\ngot2_graph <- graph_from_data_frame(got2, directed = F)\nplot(got2_graph)\n\n\n\n\n\nThe next graph is using basic, unweighted functions.\n\n\nCode\n#deg <- degree(got, mode=\"all\")\n#V(got)$size <-deg*3\n\ngot_graph <- graph_from_data_frame(got, directed = F)\nplot(got_graph)\n\n\n\n\n\nThe graph is an undirected graph because when we look at marriage networks, when one is married to the other person, that other person is also married. It’s a mutual relationship. Groups of certain families have a history of marrying one another according to this network. There are even internal marriages that take place within certain families. The Tyrells only marry to two houses. What families have the marriages with the most families? Which families tend to marry the most within themselves?\nThe Targaryens have the most marriages in other families. Since degree represents the total edges connected to the particular nodes, I can see that with 85 total degrees, the Targaryen family has the most marriages to other houses.\n\n\nCode\nvcount(got_graph)\n\n\n[1] 20\n\n\n\n\nCode\necount(got_graph)\n\n\n[1] 255\n\n\n\n\nCode\ndegree(got_graph)\n\n\nError in FUN(X[[i]], ...): as.edgelist.sna input must be an adjacency matrix/array, edgelist matrix, network, or sparse matrix, or list thereof.\n\n\n\n\nCode\nis_weighted(got_graph)\n\n\n[1] FALSE\n\n\n\n\nCode\nis_bipartite(got_graph)\n\n\n[1] FALSE\n\n\nThe network is both not weighted and not bipartite."
  },
  {
    "objectID": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html",
    "href": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html",
    "title": "Week 1 Challenge Instructions",
    "section": "",
    "text": "Code\nlibrary(readr)\n\n\nWarning: package 'readr' was built under R version 4.1.3"
  },
  {
    "objectID": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html#challenge-overview",
    "href": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html#challenge-overview",
    "title": "Week 1 Challenge Instructions",
    "section": "Challenge Overview",
    "text": "Challenge Overview\nToday’s challenge is to\n\nread in a dataset, and\ncreate a network object"
  },
  {
    "objectID": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html#load-the-data",
    "href": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html#load-the-data",
    "title": "Week 1 Challenge Instructions",
    "section": "Load the Data",
    "text": "Load the Data\nRead in one (or more) of the following data sets, using the correct R package and command.\n\ngot_marriages.csv\nfish_encounters dataset (available in the tidyr package)\ngot_like_dislike.csv\n\nFind the _data folder, located inside the posts folder. Then you can read in the data, using base read.csv or read_csv standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\nCode\nlibrary(readr)\nsetwd(\"~/GitHub/Social_Networks_Spring_2023/posts/_data\")\ngot_marriages <- read_csv(\"got/got_marriages.csv\")\n\n\nRows: 255 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation.\n\n\nCode\ngot_marriages\n\n\n# A tibble: 255 x 5\n   From      To        Type    Notes  Generation\n   <chr>     <chr>     <chr>   <chr>  <chr>     \n 1 Targaryen Stark     Married R+L=J  Current   \n 2 Baratheon Martell   Engaged died   Current   \n 3 Baratheon Stark     Engaged broken Current   \n 4 Martell   Essos     Married <NA>   Current   \n 5 Martell   Reach     Affair  <NA>   Current   \n 6 Martell   Essos     Affair  <NA>   Current   \n 7 Martell   Essos     Affair  <NA>   Current   \n 8 Martell   Septa     Affair  <NA>   Current   \n 9 Martell   Dorne     Affair  <NA>   Current   \n10 Martell   Targaryen Married <NA>   Current   \n# ... with 245 more rows"
  },
  {
    "objectID": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html#create-a-network",
    "href": "posts/Yakub_Rabiutheen_Challenge1_Instructions.html#create-a-network",
    "title": "Week 1 Challenge Instructions",
    "section": "Create a Network",
    "text": "Create a Network\nLoad the package igraph and create an igraph object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\nCode\nlibrary(igraph)\n\n\nWarning: package 'igraph' was built under R version 4.1.3\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\nCode\ngot_marriages.ig = graph_from_data_frame(got_marriages, directed = FALSE) \ngot_marriages.ig\n\n\nIGRAPH 76aa63c UN-- 20 255 -- \n+ attr: name (v/c), Type (e/c), Notes (e/c), Generation (e/c)\n+ edges from 76aa63c (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n+ ... omitted several edges\n\n\n##Node and Edge Exploration\n\n\nCode\n##Nodes\nV(got_marriages.ig)\n\n\n+ 20/20 vertices, named, from 76aa63c:\n [1] Targaryen   Baratheon   Martell     Lannister   Tyrell      Reach      \n [7] North       Riverlands  Westerlands Stark       Vale        Arryn      \n[13] Tully       Frey        Crownlands  Stormlands  Essos       Septa      \n[19] Dorne       Beyond Wall\n\n\n\n\nCode\nE(got_marriages.ig)\n\n\n+ 255/255 edges from 76aa63c (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n[25] Tyrell   --Reach       Tyrell   --Reach       Tyrell   --Reach      \n[28] Baratheon--Tyrell      Tyrell   --Reach       Baratheon--Tyrell     \n+ ... omitted several edges\n\n\n##Directed,Bipariate,Weighted Test\n\n\nCode\nis_bipartite(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_directed(got_marriages.ig)\n\n\n[1] FALSE\n\n\nCode\nis_weighted(got_marriages.ig)\n\n\n[1] FALSE\n\n\nThis network is not directed, it’s unweighted and unimodal.\n\n\nCode\nplot(got_marriages.ig)"
  },
  {
    "objectID": "posts/Week2_Challenge_Instructions.html",
    "href": "posts/Week2_Challenge_Instructions.html",
    "title": "Week 2 Challenge Instructions",
    "section": "",
    "text": "Describe the basic structure of a network following the steps in tutorial of week 2, this time using a dataset of your choice: for instance, you could use Marriages in Game of Thrones or Like/Dislike from week 1.\nAnother more complex option is the newly added dataset of the US input-output table of direct requirements by industry, availabe in the Bureau of Economic Analysis. Input-output tables show the economic transactions between industries of an economy and thus can be understood as a directed adjacency matrix. Data is provided in the form of an XLSX file, so using read_xlsx from package readxl is recommended, including the sheet as an argument (2012 for instance).\nIdentify and describe content of nodes and links, and identify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and whether attribute data are present. Be sure to provide information about network size (e.g., information obtained from network description using week 1 network basic tutorial commands.)\nExplore the dataset using commands from week 2 tutorial. Comment on the highlighted aspects of network structure such as:\n\nGeodesic and Path Distances; Path Length\nDyads and Dyad Census\nTriads and Triad Census\nNetwork Transitivity and Clustering\nComponent Structure and Membership\n\nBe sure to both provide the relevant statistics calculated in R, as well as your own interpretation of these statistics."
  },
  {
    "objectID": "posts/Week2_Challenge_Instructions.html#describe-the-network-data",
    "href": "posts/Week2_Challenge_Instructions.html#describe-the-network-data",
    "title": "Week 2 Challenge Instructions",
    "section": "Describe the Network Data",
    "text": "Describe the Network Data\n\nList and inspect List the objects to make sure the datafiles are working properly.\nNetwork Size What is the size of the network? You may use vcount and ecount.\nNetwork features Are these networks weighted, directed, and bipartite?\nNetwork Attributes Now, using commands from either statnet or igraph, list the vertex and edge attributes."
  },
  {
    "objectID": "posts/Week2_Challenge_Instructions.html#dyad-and-triad-census",
    "href": "posts/Week2_Challenge_Instructions.html#dyad-and-triad-census",
    "title": "Week 2 Challenge Instructions",
    "section": "Dyad and Triad Census",
    "text": "Dyad and Triad Census\nNow try a full dyad census. This gives us the number of dyads where the relationship is:\n\nReciprocal (mutual), or mut\nAsymmetric (non-mutual), or asym, and\nAbsent, or null\n\nNow use triad.census in order to do a triad census."
  },
  {
    "objectID": "posts/Week2_Challenge_Instructions.html#global-and-local-transitivity-or-clustering",
    "href": "posts/Week2_Challenge_Instructions.html#global-and-local-transitivity-or-clustering",
    "title": "Week 2 Challenge Instructions",
    "section": "Global and Local Transitivity or Clustering",
    "text": "Global and Local Transitivity or Clustering\nCompute global transitivity using transitivity on igraph or gtrans on statnet and local transitivity of specific nodes of your choice, in addition to the average clustering coefficient. What is the distribution of node degree and how does it compare with the distribution of local transitivity?"
  },
  {
    "objectID": "posts/Week2_Challenge_Instructions.html#path-length-and-component-structure",
    "href": "posts/Week2_Challenge_Instructions.html#path-length-and-component-structure",
    "title": "Week 2 Challenge Instructions",
    "section": "Path Length and Component Structure",
    "text": "Path Length and Component Structure\nCan you compute the average path length and the diameter of the network? Can you find the component structure of the network and identify the cluster membership of each node?"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Contributors",
    "section": "",
    "text": "Find out more about our DACSS students who contributed to the blog.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJyoti Rani\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Name\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DACSS 697E: Social Networks Spring-2023",
    "section": "",
    "text": "The blog posts here are contributed by students enrolled in DACSS 697E, Social Networks Spring 2023. The course covers network scientific theory as it applies to the social sciences, network data collection and management, network visualization and description; and methods for the statistical analysis of networks. The course will make extensive use of real-world applications and students will gain a thorough background in the use of network analytic software. Most of the applications discussed will be drawn from political science, but this course will be relevant to anyone interested in network analytic research.\n\n\n\n\n\n\n\n\n\n\nWeek 1 Challenge Solutions\n\n\n\n\n\n\n\nchallenge_1\n\n\nsolution\n\n\n\n\n\n\n\n\n\n\n\nOriol Vallès Codina\n\n\n\n\n\n\n\n\nShort Assignment 1: Reading Network Data\n\n\n\n\n\n\n\n\n\n\n\n\nSteve O’Neill\n\n\n\n\n\n\n\n\nWeek 2 Challenge\n\n\n\n\n\n\n\nClaire Battaglia\n\n\nchallenge2\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2023\n\n\nClaire Battaglia\n\n\n\n\n\n\n\n\nWeek 1 Challenge Submission\n\n\n\n\n\n\n\nchallenge_1\n\n\ninstruction\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 27, 2023\n\n\nAkhilesh Kumar\n\n\n\n\n\n\n\n\nWeek 1 Challenge Instructions\n\n\n\n\n\n\n\nchallenge_1\n\n\ninstructions\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 27, 2023\n\n\nYakub Rabiutheen\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge_1\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 23, 2023\n\n\nKen Docekal\n\n\n\n\n\n\n\n\nChallenge 1 Mekhala\n\n\n\n\n\n\n\nchallenge1\n\n\nMekhala Kumar\n\n\ngotmarriages\n\n\nfish_encounters\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\nMekhala Kumar\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge_1\n\n\nLoading data and creating network\n\n\nJyoti Rani\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 22, 2023\n\n\nJyoti Rani\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge1\n\n\nMiranda Manka\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\nMiranda Manka\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge_1\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 22, 2023\n\n\nAnanya Pujary\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nClaire Battaglia\n\n\nchallenge1\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2023\n\n\nClaire Battaglia\n\n\n\n\n\n\n\n\nWeek 2 Challenge Instructions\n\n\n\n\n\n\n\nchallenge_2\n\n\ninstructions\n\n\n\n\nDescribing the Basic Structure of a Network\n\n\n\n\n\n\nFeb 22, 2023\n\n\nOriol Vallès Codina\n\n\n\n\n\n\n\n\nWeek 1 Challenge - AG\n\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 13, 2023\n\n\nAlex Genovese\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge_1\n\n\ninstruction\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 13, 2023\n\n\nBen Ramsey\n\n\n\n\n\n\n\n\nWeek 1 Challenge Instructions\n\n\n\n\n\n\n\nchallenge_1\n\n\ninstruction\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 13, 2023\n\n\nOriol Vallès Codina\n\n\n\n\n\n\n\n\nWeek 1 Challenge\n\n\n\n\n\n\n\nchallenge_1\n\n\ninstruction\n\n\n\n\nLoading Data and Creating a Network\n\n\n\n\n\n\nFeb 13, 2023\n\n\nQuinn He\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about/about.html",
    "href": "about/about.html",
    "title": "Your Name",
    "section": "",
    "text": "##Instructions"
  },
  {
    "objectID": "about/about.html#educationwork-background",
    "href": "about/about.html#educationwork-background",
    "title": "Your Name",
    "section": "Education/Work Background",
    "text": "Education/Work Background"
  },
  {
    "objectID": "about/about.html#r-experience",
    "href": "about/about.html#r-experience",
    "title": "Your Name",
    "section": "R experience",
    "text": "R experience"
  },
  {
    "objectID": "about/about.html#research-interests",
    "href": "about/about.html#research-interests",
    "title": "Your Name",
    "section": "Research interests",
    "text": "Research interests"
  },
  {
    "objectID": "about/about.html#hometown",
    "href": "about/about.html#hometown",
    "title": "Your Name",
    "section": "Hometown",
    "text": "Hometown"
  },
  {
    "objectID": "about/about.html#hobbies",
    "href": "about/about.html#hobbies",
    "title": "Your Name",
    "section": "Hobbies",
    "text": "Hobbies"
  },
  {
    "objectID": "about/about.html#fun-fact",
    "href": "about/about.html#fun-fact",
    "title": "Your Name",
    "section": "Fun fact",
    "text": "Fun fact"
  },
  {
    "objectID": "about/Jyoti_Rani.html",
    "href": "about/Jyoti_Rani.html",
    "title": "Jyoti Rani",
    "section": "",
    "text": "• Master in Computer Applications - Sikkim Manipal University • Bachelor of Science (Mathematics Honors) - Ranchi University"
  },
  {
    "objectID": "about/Jyoti_Rani.html#r-experience",
    "href": "about/Jyoti_Rani.html#r-experience",
    "title": "Jyoti Rani",
    "section": "R experience",
    "text": "R experience\n• Advanced level"
  },
  {
    "objectID": "about/Jyoti_Rani.html#research-interests",
    "href": "about/Jyoti_Rani.html#research-interests",
    "title": "Jyoti Rani",
    "section": "Research interests",
    "text": "Research interests\nFinancial Modelling, Trend analysis, Market analysis, Data Governance and Management"
  },
  {
    "objectID": "about/Jyoti_Rani.html#hometown",
    "href": "about/Jyoti_Rani.html#hometown",
    "title": "Jyoti Rani",
    "section": "Hometown",
    "text": "Hometown\nJamshedpur, Jharkhand, India"
  },
  {
    "objectID": "about/Jyoti_Rani.html#hobbies",
    "href": "about/Jyoti_Rani.html#hobbies",
    "title": "Jyoti Rani",
    "section": "Hobbies",
    "text": "Hobbies\nGardening, Travelling, Baking"
  }
]