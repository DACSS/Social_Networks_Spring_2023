{
  "hash": "32d6ea13989191de627265b30c7bdaa7",
  "result": {
    "markdown": "---\ntitle: \"Week 3 Challenge Instructions\"\nauthor: \"Yakub\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/06/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_3\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readxl' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nUS_input_output<-read_excel(\"~/GitHub/Social_Networks_Spring_2023/posts/_data/got/US_input_output_table_2007_and_2012.xlsx\",sheet=\"2012\",skip=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n* `` -> `...2`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_input_subset <- US_input_output[, c(\"Motion picture and video industries\", \"Sound recording industries\")]\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- graph_from_data_frame(US_input_subset)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in graph_from_data_frame(US_input_subset): could not find function \"graph_from_data_frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges <- data.frame(\n  from = rep(1:2, each = nrow(US_input_subset)),\n  to = c(as.integer(factor(US_input_subset[, 1])) + 2, \n         as.integer(factor(US_input_subset[, 2])) + 2)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in xtfrm.data.frame(x): cannot xtfrm data frames\n\nWarning in xtfrm.data.frame(x): cannot xtfrm data frames\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- graph_from_data_frame(edges, directed = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in graph_from_data_frame(edges, directed = TRUE): could not find function \"graph_from_data_frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nV(g)$name <- c(\"Motion picture and video industries\", \"Sound recording industries\", \n               unique(US_input_subset[, 1]), unique(US_input_subset[, 2]))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in V(g)$name <- c(\"Motion picture and video industries\", \"Sound recording industries\", : object 'g' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_list <- as.matrix(US_input_output[,-1])  # Exclude the first column (row names)\nedges_list <- edges_list[complete.cases(edges_list),]  # Remove rows with missing values\nedges_list <- unique(edges_list)  # Remove duplicate edges\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- graph_from_edgelist(edges_list, directed = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in graph_from_edgelist(edges_list, directed = TRUE): could not find function \"graph_from_edgelist\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nus_graph <- FW_001_nw %>% select(species1, species2, connection_strength) %>% \n  graph_from_data_frame(directed = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in select(., species1, species2, connection_strength): could not find function \"select\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_input_output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 410 x 407\n   `Commodity / Indust~` ...2  `Oilseed farmi~` `Grain farming` `Vegetable and~`\n   <chr>                 <chr> <chr>            <chr>                      <dbl>\n 1 Code                  Comm~ 1111A0           1111B0             111200       \n 2 1111A0                Oils~ 5.24173E-2       1.3503E-3               0.000237\n 3 1111B0                Grai~ 0                6.633949999999~         0       \n 4 111200                Vege~ 0                0                       0.0303  \n 5 111300                Frui~ 0                0                       0       \n 6 111400                Gree~ 0                0                       0       \n 7 111900                Othe~ 6.3566999999999~ 7.138300000000~         0       \n 8 112120                Dair~ 0                0                       0       \n 9 1121A0                Beef~ 8.3659999999999~ 2.584100000000~         0.000276\n10 112300                Poul~ 2.262E-4         0                       0       \n# ... with 400 more rows, and 402 more variables:\n#   `Fruit and tree nut farming` <dbl>,\n#   `Greenhouse, nursery, and floriculture production` <dbl>,\n#   `Other crop farming` <dbl>, `Dairy cattle and milk production` <dbl>,\n#   `Beef cattle ranching and farming, including feedlots and dual-purpose ranching and farming` <chr>,\n#   `Poultry and egg production` <dbl>,\n#   `Animal production, except cattle and poultry and eggs` <chr>, ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nus_input.mat <- as.matrix(US_input_output)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nus_input.mat <-us_input.mat[complete.cases(us_input.mat),] \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nus_input.mat <- unique(us_input.mat)  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- graph_from_edgelist(us_input.mat, directed = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in graph_from_edgelist(us_input.mat, directed = TRUE): graph_from_edgelist expects a matrix with two columns\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- graph.edgelist(us_input.mat, directed = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in graph.edgelist(us_input.mat, directed = FALSE): graph_from_edgelist expects a matrix with two columns\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(igraphdata)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(igraphdata): there is no package called 'igraphdata'\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_input_.mat <- as.matrix(US_input_output)\n```\n:::\n\n\n\n\n\n\n## Challenge Overview\n\nDescribe the many measures of degree, as well as density, of a network and compare \n\n## Degree\n\nIf you have not done it before, evaluate the structure of the network (number of edges and vertices, dyad and triad census, etc.).\n\nCompute the many measures of _degree_ of the network of your choice, most preferably directed. Create a data frame called `nodes` where each row corresponds to a node and each column to an attribute of the node, namely the id, name or label, and different measures of degree: total, out-degree, and in-degree. What is the average degree of the network?\n\nCompute the distributions of those measures (or histograms if your network is small). What does this tell us about the structure of the network?\n\n## Density\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree? \n\n## Random Network\n\nCreate a random (Erdos-Renyi) network with the same number of nodes and edges than the network of your choice. On `igraph`, the necessary commands are `random.graph.game(n, p.or.m, type = c(\"gnp\", \"gnm\"), directed = FALSE, loops = FALSE)` (deprecated), `sample_gnp(n, p, directed = FALSE, loops = FALSE)` or `sample_gnm(n, m, directed = FALSE, loops = FALSE)`. The `p.or.m` argument is to specify the probability of an edge $p$ or the number of edges $m$.\n  \nCompare the densities, dyad and triad censuses, and degree distributions, with the measures of the network of your choice. Does the comparison us something about the network of your choice? \n\n\n\n::: {.cell}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}