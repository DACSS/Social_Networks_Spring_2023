---
title: "Week 4 Challenge"
author: "Kalimah Muhammad"
description: "Degree and Density of a Network "
date: "05/1/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
# editor: visual
categories: 
  - challenge_4
---

```{r}
#| label: setup
#| include: false
```

```{r, warning= FALSE, include=FALSE}
library(igraph)
library(statnet)
library(readr)
library(network)
library(ggplot2)
library(tidyverse)
```

## Challenge Overview

Describe the many measures of centrality of at least one network of your choice.

## Describe the Network Data

```{r, results='hide'}
#load Game of Thrones like and dislike data
like_dislike<- read_csv('_data/got/got_like_dislike.csv')
```

```{r, warning=FALSE}
#create iGraph object
like_dislike.ig <- graph_from_data_frame(like_dislike)
```

Below is a plot of the like/dislike network. 

```{r}
plot(like_dislike.ig)
```

On initial review, we see the majority of contacts are directed towards NA. However, Arryn and Tyrell's most direct relationship is with the contacts Tully and Baratheon respectively. Stark appears as one of the few egos with contacts directed out. Tully appears as a potential mediator between Arryn, Stark, and NA. 

*Network Size*

```{r}
#count nodes
vcount(like_dislike.ig)

#count edges
ecount(like_dislike.ig)
```

There are 11 vertices and 46 nodes.

*Network features*

```{r}
is_weighted(like_dislike.ig)
is_directed(like_dislike.ig)
is_bipartite(like_dislike.ig)
```

The network is directed but neither weighted nor bipartite. 

*Network Attributes*

```{r}
#display vertex attributes for igraph object
vertex_attr_names(like_dislike.ig)
```
`Name` is the only vertex attribute.

```{r}
#display edge attributes for igraph object
edge_attr_names(like_dislike.ig)
```

There are approximately 47 edge attributes.

## Dyad and Triad Census

*Dyad Census*

```{r}
igraph::dyad.census(like_dislike.ig)
```

There is one mutual/ reciprocal dyad, 12 asymmetric dyads, and 42 absent relationships. 

*Triad Census*

```{r, triad census}
igraph::triad_census(like_dislike.ig)
```
Here we see most triads are null as shown in the first classification. This result is consistent with the high absent relationships in the dyad census. The second classification with a result of 32 points toward a single directed edge, similar to the asymmetrical dyad relationships seen earlier. Finally in the fifth classification with a result of 22, there is a suggestion of an inward star as the third most frequent triad type.   


## Degree

```{r}
#create a data frame with the degree values
like_dislike.nodes<-data.frame(
    totdegree=igraph::degree(like_dislike.ig, loops=TRUE),
    indegree=igraph::degree(like_dislike.ig, mode="in", loops=TRUE),
    outdegree=igraph::degree(like_dislike.ig, mode="out", loops=TRUE))

like_dislike.nodes
```

Here we see a significant number of relationships between NA, the most popular node in the network. This is likely due to the networks tracing relationships between current and former houses in which 40 of the 46 observations do not include a former house and 8 observations do not include a current house. There is a high prevalence of in-degrees for NA houses compared to out-degrees, 39 to 8 respectively. For out-degrees, both Lannister and then Stark have the most relationships directed out with 11 and 10 out-degrees. Baratheon has the closest in- to out-degree relationships, 4 and 5, suggesting more mutual/ reciprocal contacts. 

## Density

Compute the density of the network. 

```{r, graph degree}
#get network density: igraph with loops
graph.density(like_dislike.ig, loops=TRUE)

```

The density of the network is 0.38 which is relatively low. This suggests there is less spread of contacts among the group. This seconds our findings in the degree statistics where overall contacts had little contact between each other outside of a few popular egos, Lannister, Stark, Baratheon, and NA houses.

## Centrality

```{r, network centraility}
#identify network centrality using iGraph

#calculate centralization score of in-degrees
centr_degree(like_dislike.ig, loops=TRUE, mode="in")$centralization

#calculate centralization score of out-degrees
centr_degree(like_dislike.ig, loops=TRUE, mode="out")$centralization

```

The in-degree centralization score is 3.48 and the out-degree centralization score is 0.68. As suspected, the prevalence of relationship directed to a central node is much higher than those directed outward or among the other nodes.


### **Calculate Closeness Centrality**

```{r, node closeness centrality}
#calculate to ten closeness centrality: igraph
igraph::closeness(like_dislike.ig)

#add closeness centrality to node measures
like_dislike.nodes$closeness<-igraph::closeness(like_dislike.ig)
```

In the results above, there is a high closeness score for NA, Arryn, and Baratheon.
Interestingly, Tully does not have any out-degrees, only in, and has NaN value for closeness. The other actors have varying levels of closeness likely depending on if the actor has a connection outside of NA or multiple loops between NA. 


### Betweenness Centrality

```{r, betweenness}

#calculate network betweenness centralization
centr_betw(like_dislike.ig,directed=T)$centralization

#calculate node-level betweenness centralization
igraph::betweenness(like_dislike.ig, directed=TRUE)

#add betweenness centrality to node measures
like_dislike.nodes$between<-igraph::betweenness(like_dislike.ig, directed=TRUE)
```

The network-level betweenness score is 0.054. At the node-level, the betweenness score is similarly low among most of the nodes with the exception of NA (5) and Stark (1). Both Tully and Arryn are singularly connected to Stark to get to the remaining network while NA is the most centralized node in the group. 

### Bonacich Power Centrality & Centralization

```{r}
#calculate bon. power centrality for nodes: igraph
power_centrality(like_dislike.ig)

#add bonachic power centrality to node measures
like_dislike.nodes$bonpow<-power_centrality(like_dislike.ig)

```


### Eigenvector Centrality & Centralization

```{r}
##calculate eigenvector centrality scores: igraph
temp<-centr_eigen(like_dislike.ig,directed=T)

#identify names 
names(temp)
#length
length(temp$vector)
#first 6 eigenvector scores
head(temp$vector)
#graph level centralization score
temp$centralization

#add eigenvector centrality to node measures
like_dislike.nodes$eigen<-centr_eigen(like_dislike.ig)$centralization

```

#### Derived and Reflected Centrality

```{r}
#create adjacency matrix
ld.matrix<-as.matrix(as_adjacency_matrix(like_dislike.ig))

#square the adjacency matrix
ld.matrixsq<-t(ld.matrix) %*% ld.matrix

#Calculate the proportion of reflected centrality.
like_dislike.nodes$rc<-diag(ld.matrixsq)/rowSums(ld.matrixsq)
#replace missing values with 0
like_dislike.nodes$rc<-ifelse(is.nan(like_dislike.nodes$rc),0,like_dislike.nodes$rc)

#Calculate received eigenvalue centrality
like_dislike.nodes$eigen.rc<-like_dislike.nodes$eigen*like_dislike.nodes$rc

#Calculate the proportion of derived centrality.
like_dislike.nodes$dc<-1-diag(ld.matrixsq)/rowSums(ld.matrixsq)
#replace missing values with 0
like_dislike.nodes$dc<-ifelse(is.nan(like_dislike.nodes$dc),1,like_dislike.nodes$dc)
#Calculate derived eigenvalue centrality
like_dislike.nodes$eigen.dc<-like_dislike.nodes$eigen*like_dislike.nodes$dc
```


### Dataframe of Centralization Scores

```{r}
like_dislike.nodes
```

When investigating the reflected and derived centrality scores, we notice most actors have the same score for each measure with the exception of Baratheon, Stark, and NA. Baratheon has low reflected centrality (0.19) and high derived centrality (0.81) suggesting it's likely a peripheral among actors. Stark has relatively low reflected centrality (0.33) and moderate derived centrality (0.67) denoting a pure bridge between nodes. NA has high reflected centrality (0.87) and low derived centrality (0.13) meaning it's likely a pure hub between actors. All other nodes score 0 for reflected centrality and 1 for derived centrality suggesting the remaining nodes are pure bridges. 

### Network Constraint

```{r, network constraint}
constraint(like_dislike.ig)
```

With most nodes, there is significant redundancy. This is likely due to most nodes directly connected towards NA. Tully is unique in that this node has in-degrees with Stark and Arryn but not directly to NA. Both Tyrell and Night's Watch have a constraint score above 1 signifying over redundant contacts. This may be due to direct connections with NA and one other node who also have direct connections with NA.

```{r, warning=FALSE}
#plot distribution of centralization scores
like_dislike.nodes%>%
  gather() %>% 
  ggplot(aes(value)) +
    geom_histogram() +
    facet_wrap(~key, scales = "free") +
    ggtitle("Game of Thrones Book Like/Dislikes")
```

## Radomn Network Comparison

```{r, random network}
#create vertices and edges variables based on like_dislike network
vertices<-11
edges <- 46

#create a random network with the same number of nodes and edges 
random_network<-sample_gnm(n=vertices,m=edges, directed = TRUE, loops = TRUE)

```

First, let's plot the random graph.

```{r, plot random network}
plot(random_network)
```

Upon initial review, the random network with the same number of edges (46) and vertices (11) appear more distributed than the like_dislike network which displayed a high concentration toward a central node. We also see a higher prevalence of in-degree relationships than out-degrees suggesting a hierarchy in the relationships. 

### Comparing Centralization Scores in a Random Network

```{r, centralization statistics in random network}
#create a data frame with the degree values
random_network.nodes<-data.frame(
  totdegree=igraph::degree(random_network, loops=TRUE),
    indegree=igraph::degree(random_network, mode="in", loops=TRUE),
    outdegree=igraph::degree(random_network, mode="out", loops=TRUE),
    closeness=igraph::closeness(random_network),
    betweenness=igraph::betweenness(random_network, directed=TRUE),
    eigen= igraph::centr_eigen(random_network)$centralization,
    bonpow= igraph::power_centrality(random_network),
    constraint=igraph::constraint(random_network))

random_network.nodes
```

Overall in the random network, there is a more even distribution of values in the closeness and constraint scores. The closeness scores are still low under 0.1 suggesting actors are not centralized at all. Variability within the betweenness scores point towards multiple centralized hubs rather than only 2 mentioned in the Game of Thrones like_dislike network. The network Eigenvector score of 0.45 denotes that nodes are moderately connected to other central nodes. This is a stark difference than the Game of Throne network where the Eigenvector score was 0.94 highlighting the highly centralized nature of that network. 