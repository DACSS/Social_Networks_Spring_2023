---
title: "Week 2 Challenge Erika Nagai"
author: "Erika Nagai"
description: "Describing the Basic Structure of a Network"
date: "02/22/2023"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
# editor: visual
categories: 
  - challenge_2
  - Erika_Nagai
  - industry
  - IO_account
---

```{r}
#| label: setup
#| include: false


library(dplyr)
library(readr)
library(ggplot2)
library(igraph)
library(statnet)

```

## Challenge Overview

Describe the basic structure of a network following the steps in tutorial of week 2

Explore the dataset using commands from week 2 tutorial. Comment on the highlighted aspects of network structure such as:

-   Geodesic and Path Distances; Path Length
-   Dyads and Dyad Census
-   Triads and Triad Census
-   Network Transitivity and Clustering
-   Component Structure and Membership
-   

## 

## Read in data

This week I will work on the "us_input_output_table_2007_and_2012.xlsx". This file has 4 sheets (1. Read_me: overview of the data, 2: List of industry codes, 3: 2007, 4: 2012) and I read in 2007 and 2012 data.

```{r}
library("readxl")
Industry_2007 <- read_xlsx("../posts/_data/got/US_input_output_table_2007_and_2012.xlsx", 
    sheet = "2007", skip = 3)
Industry_2012 <- read_xlsx("../posts/_data/got/US_input_output_table_2007_and_2012.xlsx", 
    sheet = "2012", skip = 3)

head(Industry_2007)

```

These datasets consist of 407 columns and 410 rows and they show the economic transaction network within 405 different industry groups. The first two columns of this data are the industry code and the name of the corresponding industry. The 405 columns that follow indicate the economic transactions with the industry in the second column. The unit of the economic transactions is in %. The data is in an adjacency matrix format.

```{r}
dim(Industry_2007)
dim(Industry_2012)
```

## Clean the data and convert it into network file

```{r}

# First remove the first row because it doesn't show the transaction values.
Industry_2007 <- Industry_2007[-1,]
Industry_2012 <- Industry_2012[-1,]

# Change the column name

colnames(Industry_2007)[1] <- "Industry_code"
colnames(Industry_2012)[1] <- "Industry_code"
colnames(Industry_2007)[2] <- "Industry"
colnames(Industry_2007)[2] <- "Industry"

# Change the column order
Industry_2007 <- Industry_2007 %>% relocate(Industry_code, .after = last_col())
Industry_2012 <- Industry_2012 %>% relocate(Industry_code, .after = last_col())

```

Now, convert these adjacency matrix to a network format.

```{r}
# 2007 
matrix_2007 <- as.matrix(Industry_2007[1:405, 2:406], nrow = 405, ncol = 405)
industry_2007.net <- graph_from_adjacency_matrix(matrix_2007, mode="directed", weighted = TRUE)

# 2012
matrix_2012 <- as.matrix(Industry_2012[1:405, 2:406], nrow = 405, ncol = 405)
industry_2012.net <- graph_from_adjacency_matrix(matrix_2012, mode="directed", weighted = TRUE)

```

## Describe the Network Data

As mentioned above, `Industry_2007.net` and `Industry_2012.net` are Input-Output accounts and show the economic transaction among 405 detailed industries in the United States of 2007 and 2012 respectively. This classification is based on the 2012 North American Industry Classification System (NAICS).

Edge weights indicate the amount of production required from other industries to deliver a 1 USD worth of goods in that industry category to the final consumers.

1.  **Network size**: Both 2007 and 2012 networks have 405 nodes (detailed industry groups). 2007 network has 52599 edges and 2012 network has 52670 edges (0.1% growth from 2007)

```{r}
# Number of Nodes and Edges
summary(industry_2007.net)
summary(industry_2012.net)
```

2.  **Network features**

Both 2007 and 2012 networks have the same network features. Both of them are weighted (with the % of transaction) and directed. None of them is bipartite.

```{r}
#weighted
print("weighted")
is_weighted(industry_2007.net)
is_weighted(industry_2012.net)

#directed
print("directed")
is_directed(industry_2007.net)
is_directed(industry_2012.net)

#bipartite
print("bipartite")
is_bipartite(industry_2007.net)
is_bipartite(industry_2012.net)
```

3.  **Network Attributes:**

Both 2007 and 2012 networks have "weight" attribute for their edges and "name" attribute for their nodes.

```{r}
#2007
print("2007")
igraph::edge_attr_names(industry_2007.net)
igraph::vertex_attr_names(industry_2007.net)

#2012
print("2012")
igraph::edge_attr_names(industry_2012.net)
igraph::vertex_attr_names(industry_2012.net)
```

The value of weight should be o or greater because it shows the amoung of production required from other industries, however, **there are values that are negative**. I don't change these numbers but I will keep this in my mind.

```{r}
summary(E(industry_2007.net)$weight)
summary(E(industry_2012.net)$weight)
```

### Dyad and Triad Census

**Dyad census:**

Mutual dyads are few compared to null dyads.

```{r}

dyad_census(industry_2007.net)

dyad_census(industry_2012.net)
```

**Triad census:**

The majority of triads is empty (null). There is not a huge change between 2007 and 2012 networks.

```{r}
triad_census(industry_2007.net)
triad_census(industry_2012.net)
```

### Global and local transitivity or clustering

The global transitivity (=global clustering coefficient) means the transitivity of the whole network. The transitivity of both 2007 and 2012 network is around 0.65.

The average transitivity, a mean score of all local transitivity, of both 2007 and 2012 networks is around 0.78, which is greater than the global transitivity.

This means that **2007 and 2012 industry networks have more smaller clusters of nodes rather than large clusters**. Also, it may mean that these networks have many nodes with few edges.

```{r}
# Global transitivity
transitivity(industry_2007.net)
transitivity(industry_2012.net)

# Average transitivity
transitivity(industry_2007.net, type = "average")
transitivity(industry_2012.net, type = "average")
```

### Path length

The edge weights are ignored when calculating the path length. The average path length of industries network is around 1.68, which seems small. This might mean that the network is well connected and a disrupt in an industry can influence other industries relatively fast and directly.

```{r}
average.path.length(industry_2007.net, directed=T, weights=NA)
average.path.length(industry_2012.net, directed=T, weights=NA)
```

### Component structure

Both of industry_2007 and industry_2012 networks have 2 components, each containing 404 industries and one isolate industry.

```{r}
igraph::components(industry_2007.net)$no
igraph::components(industry_2012.net)$no

igraph::components(industry_2007.net)$csize
igraph::components(industry_2012.net)$csize
```

Looking the below, the isolate was "private household"

```{r}
igraph::components(industry_2007.net)$membership

```

```{r}
igraph::components(industry_2012.net)$membership
```

## Plotting

### The simplest plot

This is the simplest network, meaning that you plot all nodes and all edges. However, it is not informative nor visually appealing.

```{r}

E(industry_2007.net)$weight <- E(industry_2007.net)$weight[!is.nan(E(industry_2007.net)$weight)]
plot(industry_2007.net,
     vertex.label = NA,
     size = 0.5,
     frame.color = NA,
     arrow.size = 0.1,
     arrow.mode = "small",
     edge.width = E(industry_2007.net)$weight * 2
     )


```

`layout = layout_as_kk` seems to make a busy network visualization cleaner, however when I run with "layout_as_kk" I get this error "Weight vector must not contain NaN values, Invalid value"

### Generate a plot by industry categories

It is challenging to plot the graph of 405 nodes visually informative. So, I will try to plot the graph of 21 sectors instead of 405 detailed industry groups.

```{r}
# Read in the industry code list
code <- read_xlsx("../posts/_data/got/US_input_output_table_2007_and_2012.xlsx", sheet = "NAICS codes", skip = 4)


# Clean the data
colnames(code)[1] <- "sector_code"

library(stringr)


# Summary
code$sector_name <- code$Summary %>% str_remove("\\d+\\w*")
code$summary_code <- code$Summary %>% str_extract("\\d+\\w*")
code <- code %>% relocate(sector_name, .before = Summary)
code <- code %>% relocate(summary_code, .before = Summary)
code <- code %>% select(-Summary)

# U.Summary
code$summary_name <- code$U.Summary %>% str_remove("\\d+\\w*")
code$usummary_code <- code$U.Summary %>% str_extract("\\d+\\w*")
code <- code %>% relocate(c(summary_name, usummary_code), .before=U.Summary)
code <- code %>% select(-U.Summary)

# Detail
code$usummary_name <- code$Detail %>% str_remove("\\d+\\w*")
code$detail_code <- code$Detail %>% str_extract("\\d+\\w*")
code <- code %>% relocate(c(usummary_name, detail_code), .before=Detail)
code <- code %>% select(-Detail)

# ...5
colnames(code)[8] <- "detail_name"

code_list <- code %>% select(c(sector_code:detail_name))

code_list

```

```{r}
# Fill in missing values with previous value
library(tidyr)

code_list <- code_list %>% 
  mutate(across(c("sector_name", "summary_name", "usummary_name"), ~ifelse(.=="", NA, as.character(.))))
code_list <- code_list %>% fill(sector_code, sector_name, summary_code, summary_name, usummary_code, usummary_name )

code_list <- code_list %>% filter(!is.na(detail_code))
code_list
```

```{r}
# graph to edgelist

edgelist_2007 <- as_data_frame(industry_2007.net, "edges")
edgelist_2007

edgelist_2012 <- as_data_frame(industry_2012.net, "edges")
edgelist_2012
```

```{r}

# Join edgelist with code list to add "sector" information to the edgelist

edgelist_2007 <- edgelist_2007 %>% left_join(code_list, by = c("from"="detail_name")) %>% select(from, to, sector_name, weight)
colnames(edgelist_2007)[3] <- "from_sector"

edgelist_2007 <- edgelist_2007 %>% left_join(code_list, by = c("to"="detail_name")) %>% select(from, to, from_sector, sector_name, weight)
colnames(edgelist_2007)[4] <- "to_sector"

edgelist_2007 <- edgelist_2007 %>% select(from_sector, to_sector, weight, from, to)


```

```{r}
# Do the same with 2012 

edgelist_2012 <- edgelist_2012 %>% left_join(code_list, by = c("from"="detail_name")) %>% select(from, to, sector_name, weight)
colnames(edgelist_2012)[3] <- "from_sector"

edgelist_2012 <- edgelist_2012 %>% left_join(code_list, by = c("to"="detail_name")) %>% select(from, to, from_sector, sector_name, weight)
colnames(edgelist_2012)[4] <- "to_sector"

edgelist_2012 <- edgelist_2012 %>% select(from_sector, to_sector, weight, from, to)
```

(!! The values in the weight column is a proportion of the transaction amount so I'm not supposed to sum those values. However, I don't know the absolute amount of the transaction, so I just sum them.)

```{r}
# Network from edgelist
sector_2007.net <- graph_from_data_frame(edgelist_2007, directed = TRUE)
sector_2012.net <- graph_from_data_frame(edgelist_2012, directed = TRUE)

```

```{r}
# Removing the weight smaller than 0
E(sector_2007.net)$weight <- E(sector_2007.net)$weight[(E(sector_2007.net)$weight)>0]

E(sector_2012.net)$weight <- E(sector_2012.net)$weight[(E(sector_2012.net)$weight)>0]
```

```{r}
summary(E(sector_2007.net)$weight)
summary(E(sector_2012.net)$weight)
```

### Plot by sectors

These networks show the transactions between 21 industry sectors.

#### 2007 Industry sectors' input and output network

Question: I don't think the edge weight is not reflected in the visualization. Why is that??

```{r}
plot(sector_2007.net,
     vertex.size = 5,
     vertex.label.cex = 0.6,
     frame.color = NA,
     edge.width = E(sector_2007.net)$weight * 2, #edge value
     edge.arrow.size = 0.1,
     edge.arrow.width = 0.3
     )
```

#### 2012 Industry sectors' input and output network

Question: I don't think the edge weight is not reflected in the visualization. Why is that??

```{r}
plot(sector_2012.net,
     vertex.size = 5,
     vertex.label.cex = 0.6,
     frame.color = NA,
     edge.width = E(sector_2012.net)$weight * 2,
     edge.arrow.size = 0.1,
     edge.arrow.width = 0.3
     )
```
