{
  "hash": "d13c12ac0f2928f3cd3ad64ef7be022e",
  "result": {
    "markdown": "---\ntitle: \"Week 1 Challenge Instructions\"\nauthor: \"Hannah Rosenbaum\"\ndescription: \"Loading Data and Creating a Network\"\ndate: \"02/13/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_1\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n## Challenge Overview\n\nToday's challenge is to\n\n1) read in a dataset, and\n\n2) create a network object\n\n## Load the Data\n\nRead in one (or more) of the following data sets, using the correct R package and command.\n\n-   got_marriages.csv\n-   fish_encounters dataset (available in the `tidyr` package)\n-   got_like_dislike.csv\n\nFind the `_data` folder, located inside the `posts` folder. Then you can read in the data, using base `read.csv` or `read_csv` standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in tidyverse and igraph packages for got marriages data frame\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n\nThe following objects are masked from 'package:lubridate':\n\n    %--%, union\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# find got marriages data frame\ngot_marriages <- read.csv(\"C:/Users/18639/Social_Networks_Spring_2023/posts/_data/got/got_marriages.csv\")\n```\n:::\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation.\n\n## Create a Network\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- graph_from_edgelist(as.matrix(got_marriages[, c(\"From\", \"To\")]))\n```\n:::\n\n\n\nLoad the package `igraph` and create an `igraph` object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the vertex objects in a network function: igraph\nvcount(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\n# Count the edge objects in a network function: igraph\n\necount(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 255\n```\n:::\n\n```{.r .cell-code}\n# what type of network data is this object bipartite or weighted? \n\nis_bipartite(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# are the network objects in this graph weighted or not? \n\nis_weighted(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# are the network objects directed or undirected?\n\nis_directed(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# display vertex names for got marriages set for igraph object\n\nvertex_attr_names(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\n# display edge names for got marriages set for igraph object\n\nedge_attr_names(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n\n```{.r .cell-code}\n# next step is to start describing the actual network itself we see this with the co-joining of the data frame and attributes\n\n# access vertex attribute in igraph for got marriages date frame: igraph\nV(graph)$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Targaryen\"   \"Stark\"       \"Baratheon\"   \"Martell\"     \"Essos\"      \n [6] \"Reach\"       \"Septa\"       \"Dorne\"       \"Lannister\"   \"Vale\"       \n[11] \"Riverlands\"  \"Crownlands\"  \"Westerlands\" \"Tyrell\"      \"North\"      \n[16] \"Beyond Wall\" \"Frey\"        \"Tully\"       \"Arryn\"       \"Stormlands\" \n```\n:::\n\n```{.r .cell-code}\n# access edge attributes in igraph for got marriages data frame: igraph \n\nE(graph)$weight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nplot(graph)\n```\n\n::: {.cell-output-display}\n![](Week1_Challenge_Instructions_HannahRosenbaum_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::",
    "supporting": [
      "Week1_Challenge_Instructions_HannahRosenbaum_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}