{
  "hash": "5b54cd9db83a573f85e1a46fdc3c535e",
  "result": {
    "markdown": "---\ntitle: \"Final Project\"\nauthor: \"Jerin Jacob\"\ndescription: \"\"\ndate: \"02/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - final_project\n#   output:\n# pdf_document: default\n---\n\n\n\n\n# Introduction\n\nWe are living in a world that produces a huge volume of waste everyday. It is estimated that by 2050, the global waste produced will be more than 3.4 billion tons every year. Certain industries produce large volume of waste while some other industries are considered to be cleaner than others. The world has already moved towards recycling as a part of reducing waste dumped in overall. Waste materials produced by certain industries can be used as raw material for certain other industries.\nThis project is an attempt to study the input-output data of materials between industries and the categories of wastes each industries produce. The dataset is from the 'Waste Input Output Analysis' by Nakamura, S. and Kondo, Yasushi. It is a data from Japan and therefore the economic flow is given in 1 million Japanese yen. The analysis will help us to find which all industries serve how many other industries with the goods they produce and compare it with the waste emission by each of those industires. \n\n# Research Question\nHow the most influencial industries in terms of their interaction to other industries contribute to the wastes produced?\n\n\n\nReading the Data\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_2011 <- read_xlsx(\"_data/Project_data/WIO_2011.xlsx\", sheet = \"WIOdata\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nhead(data_2011)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 103\n  ...1      `Crop cultivation` Livestock Agricultural service…¹ Forestry Fishery\n  <chr>                  <dbl>     <dbl>                  <dbl>    <dbl>   <dbl>\n1 Crop cul…             183568    305684                   7436     2481       0\n2 Livestock              47771    238628                  14235       11       0\n3 Agricult…             337249    176157                      0       20       0\n4 Forestry                1321         0                      0    86929     216\n5 Fishery                    0         0                      0        0   54905\n6 Metallic…                  0         0                      0        0       0\n# ℹ abbreviated name: ¹​`Agricultural services`\n# ℹ 97 more variables: `Metallic ores` <dbl>, `Coal mining etc.` <dbl>,\n#   `Non-metallic ores` <dbl>, Foods <dbl>, Beverage <dbl>,\n#   `Feeds & organic fertilizer` <dbl>, Tobacco <dbl>,\n#   `Textile products` <dbl>, `Wearing apparel etc.` <dbl>,\n#   `Lumber and wood products` <dbl>, `Furniture & fixtures` <dbl>,\n#   `Pulp & paper` <dbl>, `Paper products` <dbl>, `Printing etc.` <dbl>, …\n```\n:::\n\n```{.r .cell-code}\n#data_2011\ndim(data_2011)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 294 103\n```\n:::\n:::\n\nThe dataset has 294 rows and 103 columns. We are interested in only the output flow between industries and the waste flow from industries to different waste management processes. Therefore, we can trim the data as a subset which is in the form we want.  \n## Cleaning Data\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data_2011[1:81, 1:92]\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 92\n  ...1      `Crop cultivation` Livestock Agricultural service…¹ Forestry Fishery\n  <chr>                  <dbl>     <dbl>                  <dbl>    <dbl>   <dbl>\n1 Crop cul…             183568    305684                   7436     2481       0\n2 Livestock              47771    238628                  14235       11       0\n3 Agricult…             337249    176157                      0       20       0\n4 Forestry                1321         0                      0    86929     216\n5 Fishery                    0         0                      0        0   54905\n6 Metallic…                  0         0                      0        0       0\n# ℹ abbreviated name: ¹​`Agricultural services`\n# ℹ 86 more variables: `Metallic ores` <dbl>, `Coal mining etc.` <dbl>,\n#   `Non-metallic ores` <dbl>, Foods <dbl>, Beverage <dbl>,\n#   `Feeds & organic fertilizer` <dbl>, Tobacco <dbl>,\n#   `Textile products` <dbl>, `Wearing apparel etc.` <dbl>,\n#   `Lumber and wood products` <dbl>, `Furniture & fixtures` <dbl>,\n#   `Pulp & paper` <dbl>, `Paper products` <dbl>, `Printing etc.` <dbl>, …\n```\n:::\n\n```{.r .cell-code}\nindustry_io <- data_2011[1:81, 1:82]\nwaste_io <- data_2011[1:81, c(1, 83:92)]\nhead(waste_io)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n  ...1    Incineration Dehydration Concentration Shredding Filtration Composting\n  <chr>          <dbl>       <dbl>         <dbl>     <dbl>      <dbl>      <dbl>\n1 Crop c…            0           0             0         0          0          0\n2 Livest…            0           0             0         0          0          0\n3 Agricu…            0           0             0         0          0          0\n4 Forest…            0           0             0         0          0          0\n5 Fishery            0           0             0         0          0          0\n6 Metall…            0           0             0         0          0          0\n# ℹ 4 more variables: `Feed conversion` <dbl>, Gasification <dbl>,\n#   `Refuse derived fuel` <dbl>, Landfill <dbl>\n```\n:::\n:::\n\n# Creating Network\nAfter cleaning the dataset, next step is to create network data out of it. \n\n::: {.cell}\n\n```{.r .cell-code}\n#df <- industry_io\n# Transform the data to long format\ndf_long <- melt(df, id.vars = \"...1\", variable.name = \"to\", value.name = \"weight\", variable.factor = FALSE)\n\n# Rename the \"Industries\" column to \"From\"\ncolnames(df_long)[colnames(df_long) == \"...1\"] <- \"from\"\n\n# Drop rows with weight 0\ndf_long <- df_long[df_long$weight != 0, ]\n\ndf_long <- df_long |>\n  mutate(waste_process = ifelse(to %in% c(\"Incineration\", \"Dehydration\", \"Concentration\", \"Shredding\", \"Filtration\", \"Composting\",\n                                  \"Feed conversion\", \"Gasification\", \"Refuse derived fuel\", \"Landfill\"), 1, 0))\nhead(df_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         from               to weight waste_process\n1            Crop cultivation Crop cultivation 183568             0\n2                   Livestock Crop cultivation  47771             0\n3       Agricultural services Crop cultivation 337249             0\n4                    Forestry Crop cultivation   1321             0\n11 Feeds & organic fertilizer Crop cultivation  46056             0\n13           Textile products Crop cultivation    829             0\n```\n:::\n\n```{.r .cell-code}\ndim(df_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4167    4\n```\n:::\n:::\n\nThere are negative values in the 'weight' column. When the value is negative in directed network, it could be probably because the transaction was done in the reverse direction. So, assuming likewise, we can swap the from and to where weight is negative and then get the absolute values for weight so that we don't want to deal with anymore negative values! \n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4167 obs. of  4 variables:\n $ from         : chr  \"Crop cultivation\" \"Livestock\" \"Agricultural services\" \"Forestry\" ...\n $ to           : Factor w/ 91 levels \"Crop cultivation\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ weight       : num  183568 47771 337249 1321 46056 ...\n $ waste_process: num  0 0 0 0 0 0 0 0 0 0 ...\n```\n:::\n\n```{.r .cell-code}\ndf_long$to <- as.character(df_long$to)\n\n\ndf_long <- df_long %>%\n  mutate(new_from = ifelse(weight < 0, to, from),\n         new_to = ifelse(weight < 0, from, to)) %>%\n  select(-c(from, to)) %>%\n  mutate(weight = abs(weight)) %>%\n  rename(from = new_from, to = new_to)\ndf_long <- df_long[, c(\"from\", \"to\", \"weight\", \"waste_process\")]\n\n\ndf_long |>\n  filter(waste_process == 1) |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      from           to      weight waste_process\n1         Coal mining etc. Incineration   16.705982             1\n2         Textile products Incineration   44.167870             1\n3     Wearing apparel etc. Incineration 2035.383591             1\n4 Lumber and wood products Incineration    2.975038             1\n5     Furniture & fixtures Incineration 2438.157947             1\n6             Pulp & paper Incineration  192.004366             1\n```\n:::\n:::\n\n\n## Creating the network\n\n::: {.cell}\n\n```{.r .cell-code}\ng_df <- graph_from_data_frame(df_long)\n# Extract the weighted vertex attribute values from the dataframe\n#vertex_attributes <- df[, 82:92]\nE(g_df)$weight <- df_long$weight\n#E(g_df)$waste_process <- df_long$waste_process\n\nprocess_names <- c(\"Incineration\", \"Dehydration\", \"Concentration\", \"Shredding\", \"Filtration\", \"Composting\",\n                   \"Feed conversion\", \"Gasification\", \"Refuse derived fuel\", \"Landfill\")\n\n# Create an empty vector to store the attribute values\nvertex_attribute <- rep(\"industry\", vcount(g_df))\n\n# Find the vertices with names in the list and assign attribute value of \"waste processing\"\nmatching_vertices <- which(V(g_df)$name %in% process_names)\nvertex_attribute[matching_vertices] <- \"waste processing\"\n\n# Add the vertex attribute to the graph\nV(g_df)$process <- vertex_attribute\n\n\n#V(g_df)$process\n\nls(df_long)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"from\"          \"to\"            \"waste_process\" \"weight\"       \n```\n:::\n\n```{.r .cell-code}\n#plot(g_df)\n```\n:::\n\n\n# Describing the Network Data\n\n::: {.cell}\n\n```{.r .cell-code}\nvcount(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n\n```{.r .cell-code}\necount(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4167\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_directed(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nThe network has 90 vertices and 4167 edges.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(E(g_df)$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n       0      467     5410   110218    36673 11899111 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvertex_attr_names(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"    \"process\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"weight\"        \"waste_process\"\n```\n:::\n:::\n\n\n## Dyad & Triad Census\n\n\n::: {.cell}\n\n```{.r .cell-code}\nigraph::dyad.census(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 1064\n\n$asym\n[1] 1951\n\n$null\n[1] 990\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nigraph::triad_census(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  7680 10472  2204 21177  1242  2515   663 11570 11335   188  1561  2147\n[13] 21579  2396 12177  8574\n```\n:::\n\n```{.r .cell-code}\nsum(igraph::triad_census(g_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 117480\n```\n:::\n\n```{.r .cell-code}\n(90*89*88)/(3*2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 117480\n```\n:::\n:::\n\n## Transitivity/ Global Clustering\nLet us look at the clustering pattern in a global level of network\n\n::: {.cell}\n\n```{.r .cell-code}\ntransitivity(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.818957\n```\n:::\n:::\n\nThe network has a high level of transitivity. It means, when two nodes are connected to a neighbouring node, it is highly likely that all of them are connected to each other. \n\n## Local Transitivity / Clustering\nNow let us look at the Local transitivity. Since the number of vertices are fairly high, we will look on the average clustering coefficient rather than local clustering coefficient.\n\n::: {.cell}\n\n```{.r .cell-code}\ntransitivity(g_df, type = \"average\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8658444\n```\n:::\n:::\n\nThe average clustering coefficient of 0.8658 suggests that the network is highly clustered. This means that the network has tightly connected sub groups/clusters. \n\n## Path Length and Geodesic\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage.path.length(g_df, directed = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.457572\n```\n:::\n:::\n\nThe average path length of the network is 7.45. \n\n# Component Structure and Membership\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(igraph::components(g_df)) # Elements of components\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"membership\" \"csize\"      \"no\"        \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nigraph::components(g_df)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nigraph::components(g_df)$csize\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#igraph::components(g_df)$membership\n```\n:::\n\n\nThe component structure shows that there is only one big component with 90 members. In other words, there is no isolates in this network.\n\n# Density of Network\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph.density(g_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5202247\n```\n:::\n:::\n\nThe network has a 0.5202 density which means 0.5202 proportion of all possible ties are present in this network. \n\n\n\n## Creating a Dataframe with the Vertex Degree values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree <- data.frame(name = V(g_df)$name, degree = igraph::degree(g_df))\nhead(df_degree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                 name degree\nCrop cultivation                     Crop cultivation     75\nLivestock                                   Livestock     53\nAgricultural services           Agricultural services     48\nForestry                                     Forestry     73\nFeeds & organic fertilizer Feeds & organic fertilizer     54\nTextile products                     Textile products    121\n```\n:::\n:::\n\n\n\n## In degree and out degree\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree <- df_degree |>\n  mutate(indegree = igraph::degree(g_df, mode = \"in\"), \n         \n         outdegree = igraph::degree(g_df, mode = \"out\"))\ndf_degree |>\n  arrange(desc(outdegree)) |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                     name degree indegree\nCommerce                                         Commerce    135       43\nMiscellaneous metal products Miscellaneous metal products    145       54\nMisc. manufacturing products Misc. manufacturing products    152       61\nWearing apparel etc.                 Wearing apparel etc.    132       42\nFinal chemical products           Final chemical products    144       54\n                             outdegree\nCommerce                            92\nMiscellaneous metal products        91\nMisc. manufacturing products        91\nWearing apparel etc.                90\nFinal chemical products             90\n```\n:::\n\n```{.r .cell-code}\ndf_degree |>\n  arrange(desc(indegree)) |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                     name degree indegree\nPig iron & crude steel             Pig iron & crude steel     76       66\nPublic administration               Public administration     66       65\nMisc. manufacturing products Misc. manufacturing products    152       61\nTransport & post service         Transport & post service    151       61\nPersonal services                       Personal services    150       61\n                             outdegree\nPig iron & crude steel              10\nPublic administration                1\nMisc. manufacturing products        91\nTransport & post service            90\nPersonal services                   89\n```\n:::\n:::\n\n## Summary statistics of Network Degree\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df_degree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name               degree          indegree       outdegree    \n Length:90          Min.   : 38.00   Min.   :17.00   Min.   : 0.00  \n Class :character   1st Qu.: 57.75   1st Qu.:39.25   1st Qu.:10.25  \n Mode  :character   Median : 89.00   Median :48.00   Median :41.00  \n                    Mean   : 92.60   Mean   :46.30   Mean   :46.30  \n                    3rd Qu.:126.75   3rd Qu.:52.00   3rd Qu.:86.00  \n                    Max.   :152.00   Max.   :66.00   Max.   :92.00  \n```\n:::\n:::\n\n## Network Degree Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree %>% melt %>% filter(variable != 'output' & variable != 'eigen.centrality') %>% \n  ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = .2, bw = 5) +\n  ggtitle('Degree Distribution')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing name as id variables\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attributes are not identical across measure variables; they will be\ndropped\n```\n:::\n\n::: {.cell-output-display}\n![](final_project_jerinjacob_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nThe distribution of degrees shows that the indegree values are more at a level of 50.\n\n## Network Degree Centralization\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentr_degree(g_df, mode = \"in\")$centralization\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2213483\n```\n:::\n\n```{.r .cell-code}\ncentr_degree(g_df, mode = \"out\")$centralization\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5134831\n```\n:::\n:::\n\n\n# Eigen Vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_eigen <- centr_eigen(g_df, directed = T)\nnames(temp_eigen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"vector\"          \"value\"           \"options\"         \"centralization\" \n[5] \"theoretical_max\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(temp_eigen$vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_eigen$vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.5953827 0.5120362 0.6280237 0.6805738 0.5954991 0.6824618 0.6057831\n [8] 0.8187135 0.7071076 0.6528368 0.6034703 0.6478165 0.7163664 0.7881786\n[15] 0.5418807 0.7574951 0.6661287 0.6401862 0.6576396 0.7781058 0.6086314\n[22] 0.7930444 0.7667579 0.7641407 0.7718081 0.8899521 0.7727183 0.5146864\n[29] 0.5145222 0.6882062 0.6419725 0.5519556 0.5175506 0.9087712 0.7717444\n[36] 0.7442549 0.5454263 0.8646528 0.9102065 0.2697866 0.7511301 0.7086050\n[43] 0.6025945 0.6784769 0.6992363 0.7370351 0.7233416 0.7887455 0.7168331\n[50] 0.6934170 0.7050182 0.7535558 0.8082977 0.8390455 0.6841809 0.7379447\n[57] 0.7483575 0.7978797 0.7380666 0.5369580 0.5485777 0.5782104 0.4740734\n[64] 0.5273760 0.6535068 0.5117106 0.5468021 1.0000000 0.7119895 0.7187400\n[71] 0.7131842 0.7267811 0.7680584 0.7145214 0.6885328 0.8205471 0.8157092\n[78] 0.7580999 0.9623841 0.6121869 0.8306890 0.5704533 0.5704533 0.5594488\n[85] 0.5594488 0.5594488 0.5594488 0.5594488 0.5594488 0.5704533\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_eigen$centralization\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3226412\n```\n:::\n:::\n\n\n## Adding Eigen Vector to node level measures dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree$eigen <- centr_eigen(g_df, directed = T)$vector\n#df_degree\narrange(df_degree, desc(eigen)) |> slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                     name degree indegree\nPig iron & crude steel             Pig iron & crude steel     76       66\nPublic administration               Public administration     66       65\nPersonal services                       Personal services    150       61\nTransport & post service         Transport & post service    151       61\nMisc. manufacturing products Misc. manufacturing products    152       61\n                             outdegree     eigen\nPig iron & crude steel              10 1.0000000\nPublic administration                1 0.9623841\nPersonal services                   89 0.9102065\nTransport & post service            90 0.9087712\nMisc. manufacturing products        91 0.8899521\n```\n:::\n:::\n\n\n## Bonacich Power Centrality to the dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree$bonpow <- power_centrality(g_df)\n\ndf_degree |>\n  arrange(desc(bonpow)) |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                     name degree indegree\nPetrochemical basic products Petrochemical basic products     64       33\nMedical service etc.                 Medical service etc.     82       54\nTextile products                         Textile products    121       48\nNon-ferrous metal products     Non-ferrous metal products    124       50\nGlass & glass products             Glass & glass products    116       48\n                             outdegree     eigen   bonpow\nPetrochemical basic products        31 0.4740734 1.980978\nMedical service etc.                28 0.7887455 1.940789\nTextile products                    73 0.6824618 1.842212\nNon-ferrous metal products          74 0.7380666 1.829821\nGlass & glass products              68 0.6934170 1.790583\n```\n:::\n:::\n\n\n## Derived and Reflected Centrality\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix_df_degree <- as.matrix(as_adjacency_matrix(g_df, attr = \"weight\"))\n# Square the adjacency matrix\nmatrix_df_degree_sq <- t(matrix_df_degree) %*% matrix_df_degree\n# Calculate the proportion of reflected centrality\ndf_degree$rc <- diag(matrix_df_degree_sq)/rowSums(matrix_df_degree_sq)\n\n# Replace missing values with 0\ndf_degree$rc <- ifelse(is.nan(df_degree$rc), 0, df_degree$rc)\n\n# Calculate received eigen value centrality\n\ndf_degree$eigen.rc <- df_degree$eigen * df_degree$rc\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the proportion of derived centrality\ndf_degree$dc <- 1-diag(matrix_df_degree_sq)/rowSums(matrix_df_degree_sq)\n\n# Replace missing values with 0\ndf_degree$dc <- ifelse(is.nan(df_degree$dc), 0, df_degree$dc)\n\n# Calculate derived eigen value centrality\n\ndf_degree$eigen.dc <- df_degree$eigen * df_degree$dc\n```\n:::\n\n\n## Centrality Score Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree |>\n  select(-name) |>\n  gather() |>\n  ggplot(aes(value)) +\n  geom_histogram() +\n  facet_wrap(~key, scales = \"free\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attributes are not identical across measure variables; they will be\ndropped\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](final_project_jerinjacob_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n## Centrality Measure Correlations\n\n\n## Closeness Centrality\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree$close <- igraph::closeness(g_df)\n\ndf_degree |>\n  arrange(desc(close)) |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                           name degree indegree\nMisc. electronic components         Misc. electronic components    115       51\nHousehold electronics equipment Household electronics equipment    137       52\nForestry                                               Forestry     73       46\nMedical service etc.                       Medical service etc.     82       54\nGlass & glass products                   Glass & glass products    116       48\n                                outdegree     eigen     bonpow          rc\nMisc. electronic components            64 0.7483575 -0.9292872 0.058312827\nHousehold electronics equipment        85 0.7718081  0.2486351 0.036339969\nForestry                               27 0.6805738 -1.0649043 0.002618866\nMedical service etc.                   28 0.7887455  1.9407891 0.187127156\nGlass & glass products                 68 0.6934170  1.7905830 0.004020029\n                                   eigen.rc        dc  eigen.dc        close\nMisc. electronic components     0.043638842 0.9416872 0.7047187 0.0004294927\nHousehold electronics equipment 0.028047484 0.9636600 0.7437607 0.0003648980\nForestry                        0.001782331 0.9973811 0.6787915 0.0003220622\nMedical service etc.            0.147595704 0.8128728 0.6411498 0.0003208223\nGlass & glass products          0.002787557 0.9959800 0.6906294 0.0003087959\n```\n:::\n:::\n\n\n## Betweenness Centrality\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree$between <- igraph::betweenness(g_df)\n\ndf_degree |>\n  arrange(desc(between)) |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                     name degree indegree\nGlass & glass products             Glass & glass products    116       48\nPottery, china & earthenware Pottery, china & earthenware     99       45\nForestry                                         Forestry     73       46\nChemical fertilizer                   Chemical fertilizer     86       45\nMetallic ores                               Metallic ores     45       36\n                             outdegree     eigen     bonpow           rc\nGlass & glass products              68 0.6934170  1.7905830 4.020029e-03\nPottery, china & earthenware        54 0.6576396  0.9827723 1.447672e-03\nForestry                            27 0.6805738 -1.0649043 2.618866e-03\nChemical fertilizer                 41 0.6478165 -2.7943767 2.322144e-03\nMetallic ores                        9 0.5468021 -0.7909125 6.729973e-05\n                                 eigen.rc        dc  eigen.dc        close\nGlass & glass products       2.787557e-03 0.9959800 0.6906294 0.0003087959\nPottery, china & earthenware 9.520466e-04 0.9985523 0.6566876 0.0003059049\nForestry                     1.782331e-03 0.9973811 0.6787915 0.0003220622\nChemical fertilizer          1.504323e-03 0.9976779 0.6463122 0.0003035391\nMetallic ores                3.679964e-05 0.9999327 0.5467653 0.0001723726\n                              between\nGlass & glass products       2424.500\nPottery, china & earthenware 2018.000\nForestry                     1897.667\nChemical fertilizer          1823.000\nMetallic ores                1097.500\n```\n:::\n:::\n\nWe can calculate the network level score of betweenness centralization\n\n::: {.cell}\n\n```{.r .cell-code}\ncentr_betw(g_df)$centralization\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02636484\n```\n:::\n:::\n\n\n## Network Constraint\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_degree$constraint <- constraint(g_df)\n\ndf_degree |> arrange(constraint) |> slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                     name\nMisc. ceramic, stone & clay products Misc. ceramic, stone & clay products\nGlass & glass products                             Glass & glass products\nIndustrial inorganic chemicals             Industrial inorganic chemicals\nMiscellaneous metal products                 Miscellaneous metal products\nPlastic products                                         Plastic products\n                                     degree indegree outdegree     eigen\nMisc. ceramic, stone & clay products    129       54        75 0.7781058\nGlass & glass products                  116       48        68 0.6934170\nIndustrial inorganic chemicals          133       49        84 0.7163664\nMiscellaneous metal products            145       54        91 0.7930444\nPlastic products                        138       52        86 0.7574951\n                                         bonpow          rc    eigen.rc\nMisc. ceramic, stone & clay products -2.2143080 0.003338320 0.002597566\nGlass & glass products                1.7905830 0.004020029 0.002787557\nIndustrial inorganic chemicals       -1.0782885 0.011994287 0.008592304\nMiscellaneous metal products         -0.1973909 0.034581989 0.027425052\nPlastic products                     -0.3806956 0.102300442 0.077492086\n                                            dc  eigen.dc        close between\nMisc. ceramic, stone & clay products 0.9966617 0.7755083 0.0001890447   284.0\nGlass & glass products               0.9959800 0.6906294 0.0003087959  2424.5\nIndustrial inorganic chemicals       0.9880057 0.7077741 0.0001681996   108.0\nMiscellaneous metal products         0.9654180 0.7656193 0.0002504898    85.0\nPlastic products                     0.8976996 0.6800030 0.0001914863    11.5\n                                     constraint\nMisc. ceramic, stone & clay products  0.1079631\nGlass & glass products                0.1139342\nIndustrial inorganic chemicals        0.1153943\nMiscellaneous metal products          0.1241241\nPlastic products                      0.1291672\n```\n:::\n\n```{.r .cell-code}\ndf_degree |> arrange(desc(constraint)) |> slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                 name degree indegree outdegree\nFeeds & organic fertilizer Feeds & organic fertilizer     54       41        13\nMetallic ores                           Metallic ores     45       36         9\nMedicaments                               Medicaments     74       48        26\nLivestock                                   Livestock     53       35        18\nCoal mining etc.                     Coal mining etc.     89       36        53\n                               eigen     bonpow           rc     eigen.rc\nFeeds & organic fertilizer 0.5954991 -2.5409675 2.244451e-02 1.336568e-02\nMetallic ores              0.5468021 -0.7909125 6.729973e-05 3.679964e-05\nMedicaments                0.6992363 -0.2167730 3.451293e-02 2.413270e-02\nLivestock                  0.5120362 -0.8037581 5.637439e-02 2.886573e-02\nCoal mining etc.           0.5369580  0.7873295 3.621458e-04 1.944571e-04\n                                  dc  eigen.dc        close between constraint\nFeeds & organic fertilizer 0.9775555 0.5821334 2.312144e-04  1031.0  0.5746577\nMetallic ores              0.9999327 0.5467653 1.723726e-04  1097.5  0.5452584\nMedicaments                0.9654871 0.6751036 5.124449e-05    55.0  0.4914972\nLivestock                  0.9436256 0.4831705 2.963850e-04   508.5  0.4913486\nCoal mining etc.           0.9996379 0.5367635 1.916560e-04   131.5  0.4890750\n```\n:::\n:::\n\n\n\nFeeds & organic fertilizer, Metallic ores and Medicaments are the most reduntant industries while Misc. ceramic, stone & clay products, Glass & glass products and Industrial inorganic chemicals industries are the least reduntant ones.\n\n## Centrality Measure Correlations\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot :: corrplot(cor(df_degree[ , -1]), title = 'Correlation Plot')\n```\n\n::: {.cell-output-display}\n![](final_project_jerinjacob_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1 <- kableExtra :: kable(apply(df_degree[ , -1], 2, function (x) df_degree$name[order(x, decreasing = TRUE)][1 : 10]))\ntable1\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> degree </th>\n   <th style=\"text-align:left;\"> indegree </th>\n   <th style=\"text-align:left;\"> outdegree </th>\n   <th style=\"text-align:left;\"> eigen </th>\n   <th style=\"text-align:left;\"> bonpow </th>\n   <th style=\"text-align:left;\"> rc </th>\n   <th style=\"text-align:left;\"> eigen.rc </th>\n   <th style=\"text-align:left;\"> dc </th>\n   <th style=\"text-align:left;\"> eigen.dc </th>\n   <th style=\"text-align:left;\"> close </th>\n   <th style=\"text-align:left;\"> between </th>\n   <th style=\"text-align:left;\"> constraint </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Misc. manufacturing products </td>\n   <td style=\"text-align:left;\"> Pig iron &amp; crude steel </td>\n   <td style=\"text-align:left;\"> Commerce </td>\n   <td style=\"text-align:left;\"> Pig iron &amp; crude steel </td>\n   <td style=\"text-align:left;\"> Petrochemical basic products </td>\n   <td style=\"text-align:left;\"> Petroleum refinery products </td>\n   <td style=\"text-align:left;\"> Pig iron &amp; crude steel </td>\n   <td style=\"text-align:left;\"> Feed conversion </td>\n   <td style=\"text-align:left;\"> Public administration </td>\n   <td style=\"text-align:left;\"> Misc. electronic components </td>\n   <td style=\"text-align:left;\"> Glass &amp; glass products </td>\n   <td style=\"text-align:left;\"> Feeds &amp; organic fertilizer </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Transport &amp; post service </td>\n   <td style=\"text-align:left;\"> Public administration </td>\n   <td style=\"text-align:left;\"> Miscellaneous metal products </td>\n   <td style=\"text-align:left;\"> Public administration </td>\n   <td style=\"text-align:left;\"> Medical service etc. </td>\n   <td style=\"text-align:left;\"> Steel products </td>\n   <td style=\"text-align:left;\"> Petroleum refinery products </td>\n   <td style=\"text-align:left;\"> Gasification </td>\n   <td style=\"text-align:left;\"> Misc. manufacturing products </td>\n   <td style=\"text-align:left;\"> Household electronics equipment </td>\n   <td style=\"text-align:left;\"> Pottery, china &amp; earthenware </td>\n   <td style=\"text-align:left;\"> Metallic ores </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Personal services </td>\n   <td style=\"text-align:left;\"> Misc. manufacturing products </td>\n   <td style=\"text-align:left;\"> Misc. manufacturing products </td>\n   <td style=\"text-align:left;\"> Personal services </td>\n   <td style=\"text-align:left;\"> Textile products </td>\n   <td style=\"text-align:left;\"> Motor vehicle parts &amp; accessories </td>\n   <td style=\"text-align:left;\"> Motor vehicle parts &amp; accessories </td>\n   <td style=\"text-align:left;\"> Composting </td>\n   <td style=\"text-align:left;\"> Lumber and wood products </td>\n   <td style=\"text-align:left;\"> Forestry </td>\n   <td style=\"text-align:left;\"> Forestry </td>\n   <td style=\"text-align:left;\"> Medicaments </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Business services </td>\n   <td style=\"text-align:left;\"> Transport &amp; post service </td>\n   <td style=\"text-align:left;\"> Wearing apparel etc. </td>\n   <td style=\"text-align:left;\"> Transport &amp; post service </td>\n   <td style=\"text-align:left;\"> Non-ferrous metal products </td>\n   <td style=\"text-align:left;\"> Pig iron &amp; crude steel </td>\n   <td style=\"text-align:left;\"> Steel products </td>\n   <td style=\"text-align:left;\"> Refuse derived fuel </td>\n   <td style=\"text-align:left;\"> Personal services </td>\n   <td style=\"text-align:left;\"> Medical service etc. </td>\n   <td style=\"text-align:left;\"> Chemical fertilizer </td>\n   <td style=\"text-align:left;\"> Livestock </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Miscellaneous metal products </td>\n   <td style=\"text-align:left;\"> Personal services </td>\n   <td style=\"text-align:left;\"> Final chemical products </td>\n   <td style=\"text-align:left;\"> Misc. manufacturing products </td>\n   <td style=\"text-align:left;\"> Glass &amp; glass products </td>\n   <td style=\"text-align:left;\"> Passenger motor cars </td>\n   <td style=\"text-align:left;\"> Passenger motor cars </td>\n   <td style=\"text-align:left;\"> Filtration </td>\n   <td style=\"text-align:left;\"> Public construction </td>\n   <td style=\"text-align:left;\"> Glass &amp; glass products </td>\n   <td style=\"text-align:left;\"> Metallic ores </td>\n   <td style=\"text-align:left;\"> Coal mining etc. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Final chemical products </td>\n   <td style=\"text-align:left;\"> Business services </td>\n   <td style=\"text-align:left;\"> Petroleum refinery products </td>\n   <td style=\"text-align:left;\"> Business services </td>\n   <td style=\"text-align:left;\"> General-purpose machinery </td>\n   <td style=\"text-align:left;\"> Medical service etc. </td>\n   <td style=\"text-align:left;\"> Medical service etc. </td>\n   <td style=\"text-align:left;\"> Metallic ores </td>\n   <td style=\"text-align:left;\"> Misc. transportation equipment  &amp; repair </td>\n   <td style=\"text-align:left;\"> Steel products </td>\n   <td style=\"text-align:left;\"> Coal products </td>\n   <td style=\"text-align:left;\"> Miscellaneous cars </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Repair of construction </td>\n   <td style=\"text-align:left;\"> Production machinery </td>\n   <td style=\"text-align:left;\"> Electricity </td>\n   <td style=\"text-align:left;\"> Production machinery </td>\n   <td style=\"text-align:left;\"> Cement &amp; cement products </td>\n   <td style=\"text-align:left;\"> Foods </td>\n   <td style=\"text-align:left;\"> Foods </td>\n   <td style=\"text-align:left;\"> Coal mining etc. </td>\n   <td style=\"text-align:left;\"> Production machinery </td>\n   <td style=\"text-align:left;\"> Pottery, china &amp; earthenware </td>\n   <td style=\"text-align:left;\"> Feeds &amp; organic fertilizer </td>\n   <td style=\"text-align:left;\"> Passenger motor cars </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Communications &amp; broadcasting </td>\n   <td style=\"text-align:left;\"> Lumber and wood products </td>\n   <td style=\"text-align:left;\"> Transport &amp; post service </td>\n   <td style=\"text-align:left;\"> Building construction </td>\n   <td style=\"text-align:left;\"> Synthetic fibers </td>\n   <td style=\"text-align:left;\"> Non-ferrous metal products </td>\n   <td style=\"text-align:left;\"> Non-ferrous metal products </td>\n   <td style=\"text-align:left;\"> Concentration </td>\n   <td style=\"text-align:left;\"> Building construction </td>\n   <td style=\"text-align:left;\"> Chemical fertilizer </td>\n   <td style=\"text-align:left;\"> Lumber and wood products </td>\n   <td style=\"text-align:left;\"> Petrochemical basic products </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Activities not elsewhere classified </td>\n   <td style=\"text-align:left;\"> Building construction </td>\n   <td style=\"text-align:left;\"> Printing etc. </td>\n   <td style=\"text-align:left;\"> Misc. transportation equipment  &amp; repair </td>\n   <td style=\"text-align:left;\"> Pottery, china &amp; earthenware </td>\n   <td style=\"text-align:left;\"> Real estate services </td>\n   <td style=\"text-align:left;\"> Transport &amp; post service </td>\n   <td style=\"text-align:left;\"> Agricultural services </td>\n   <td style=\"text-align:left;\"> Transport &amp; post service </td>\n   <td style=\"text-align:left;\"> Non-ferrous metal products </td>\n   <td style=\"text-align:left;\"> Textile products </td>\n   <td style=\"text-align:left;\"> Fishery </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Lumber and wood products </td>\n   <td style=\"text-align:left;\"> General-purpose machinery </td>\n   <td style=\"text-align:left;\"> Repair of construction </td>\n   <td style=\"text-align:left;\"> Lumber and wood products </td>\n   <td style=\"text-align:left;\"> Metal products for construction </td>\n   <td style=\"text-align:left;\"> Communications &amp; broadcasting </td>\n   <td style=\"text-align:left;\"> Communications &amp; broadcasting </td>\n   <td style=\"text-align:left;\"> Pottery, china &amp; earthenware </td>\n   <td style=\"text-align:left;\"> Ships &amp; repair of ships </td>\n   <td style=\"text-align:left;\"> Rubber products </td>\n   <td style=\"text-align:left;\"> Pig iron &amp; crude steel </td>\n   <td style=\"text-align:left;\"> Pig iron &amp; crude steel </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\nindustry_io.node <-data.frame(apply(df_degree[ , -1], 2, function (x) df_degree$name[order(x, decreasing = TRUE)][1 : 10]))\nindustry_io.node\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                degree                     indegree\n1         Misc. manufacturing products       Pig iron & crude steel\n2             Transport & post service        Public administration\n3                    Personal services Misc. manufacturing products\n4                    Business services     Transport & post service\n5         Miscellaneous metal products            Personal services\n6              Final chemical products            Business services\n7               Repair of construction         Production machinery\n8        Communications & broadcasting     Lumber and wood products\n9  Activities not elsewhere classified        Building construction\n10            Lumber and wood products    General-purpose machinery\n                      outdegree                                    eigen\n1                      Commerce                   Pig iron & crude steel\n2  Miscellaneous metal products                    Public administration\n3  Misc. manufacturing products                        Personal services\n4          Wearing apparel etc.                 Transport & post service\n5       Final chemical products             Misc. manufacturing products\n6   Petroleum refinery products                        Business services\n7                   Electricity                     Production machinery\n8      Transport & post service                    Building construction\n9                 Printing etc. Misc. transportation equipment  & repair\n10       Repair of construction                 Lumber and wood products\n                            bonpow                                rc\n1     Petrochemical basic products       Petroleum refinery products\n2             Medical service etc.                    Steel products\n3                 Textile products Motor vehicle parts & accessories\n4       Non-ferrous metal products            Pig iron & crude steel\n5           Glass & glass products              Passenger motor cars\n6        General-purpose machinery              Medical service etc.\n7         Cement & cement products                             Foods\n8                 Synthetic fibers        Non-ferrous metal products\n9     Pottery, china & earthenware              Real estate services\n10 Metal products for construction     Communications & broadcasting\n                            eigen.rc                           dc\n1             Pig iron & crude steel              Feed conversion\n2        Petroleum refinery products                 Gasification\n3  Motor vehicle parts & accessories                   Composting\n4                     Steel products          Refuse derived fuel\n5               Passenger motor cars                   Filtration\n6               Medical service etc.                Metallic ores\n7                              Foods             Coal mining etc.\n8         Non-ferrous metal products                Concentration\n9           Transport & post service        Agricultural services\n10     Communications & broadcasting Pottery, china & earthenware\n                                   eigen.dc                           close\n1                     Public administration     Misc. electronic components\n2              Misc. manufacturing products Household electronics equipment\n3                  Lumber and wood products                        Forestry\n4                         Personal services            Medical service etc.\n5                       Public construction          Glass & glass products\n6  Misc. transportation equipment  & repair                  Steel products\n7                      Production machinery    Pottery, china & earthenware\n8                     Building construction             Chemical fertilizer\n9                  Transport & post service      Non-ferrous metal products\n10                  Ships & repair of ships                 Rubber products\n                        between                   constraint\n1        Glass & glass products   Feeds & organic fertilizer\n2  Pottery, china & earthenware                Metallic ores\n3                      Forestry                  Medicaments\n4           Chemical fertilizer                    Livestock\n5                 Metallic ores             Coal mining etc.\n6                 Coal products           Miscellaneous cars\n7    Feeds & organic fertilizer         Passenger motor cars\n8      Lumber and wood products Petrochemical basic products\n9              Textile products                      Fishery\n10       Pig iron & crude steel       Pig iron & crude steel\n```\n:::\n\n```{.r .cell-code}\ndf_degree_io <- df_degree\n```\n:::\n\n\nThese are the industries having the highest of centrality measures for the industries network. The nodes having higher indegrees have more inwards directed edges while outdegree gives an idea about how the outwards connections are for the node. Eigen vector, Bonacich value, Eigen Reflected Centrality, Eigen Derived Centrality are various measures of centrality of nodes. These measures suggests how influential the nodes are. Betweenness is a measure of the position of nodes in terms of closeness to other influential nodes. Constraint tells us about the level of redundancy of a node in the network to create connections with other neighbouring nodes.\n\n# Most and Least influential industries and their contribution to the waste output\n\nEventhough the different measures of centrality talks about the significance and influence of nodes, we are taking into consideration, Bonacich power and Constraint here to compare the waste output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_bonpow <- df_degree |>\n  arrange(desc(bonpow)) |>\n  slice(1:5)\n\ndf_constraint <- df_degree |> arrange(desc(constraint)) |> slice(1:5)\n\nindustry_waste <- data_2011 |> select(\n...1, 83:92)\nindustry_waste\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 294 × 11\n   ...1   Incineration Dehydration Concentration Shredding Filtration Composting\n   <chr>         <dbl>       <dbl>         <dbl>     <dbl>      <dbl>      <dbl>\n 1 Crop …          0           0            0          0        0         0     \n 2 Lives…          0           0            0          0        0         0     \n 3 Agric…          0           0            0          0        0         0     \n 4 Fores…          0           0            0          0        0         0     \n 5 Fishe…          0           0            0          0        0         0     \n 6 Metal…          0           0            0          0        0         0     \n 7 Coal …         16.7        39.7          3.98      12.2      0.253     0.0431\n 8 Non-m…          0           0            0          0        0         0     \n 9 Foods           0           0            0          0        0         0     \n10 Bever…          0           0            0          0        0         0     \n# ℹ 284 more rows\n# ℹ 4 more variables: `Feed conversion` <dbl>, Gasification <dbl>,\n#   `Refuse derived fuel` <dbl>, Landfill <dbl>\n```\n:::\n\n```{.r .cell-code}\nfiltered_data1 <- industry_waste[industry_waste$...1 %in% df_bonpow$name, ]\nfiltered_data2 <- industry_waste[industry_waste$...1 %in% df_constraint$name, ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_df_long <- melt(combined_df, id.vars = \"...1\", variable.name = \"to\", value.name = \"weight\", variable.factor = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'combined_df' not found\n```\n:::\n\n```{.r .cell-code}\n# Rename the \"Industries\" column to \"From\"\ncolnames(combined_df_long)[colnames(combined_df_long) == \"...1\"] <- \"from\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: object 'combined_df_long' not found\n```\n:::\n\n```{.r .cell-code}\ncombined_df_long\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'combined_df_long' not found\n```\n:::\n:::\n\n## Waste output from most significant industries\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter1_long <- melt(filtered_data1, id.vars = \"...1\", variable.name = \"to\", value.name = \"weight\", variable.factor = FALSE)\n\n# Rename the \"Industries\" column to \"From\"\ncolnames(filter1_long)[colnames(filter1_long) == \"...1\"] <- \"from\"\n#filter1_long\n\n\n# Create a heatmap plot\nggplot(filter1_long, aes(x = from, y = to, fill = log(weight))) +\n  geom_tile() +\n  scale_fill_gradient(low = \"yellow\", high = \"red\") +  # Change the color pattern\n  labs(x = NULL, y = \"To\", title = \"Heatmap of Weight\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))  # Rotate x-axis labels\n```\n\n::: {.cell-output-display}\n![](final_project_jerinjacob_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n## Waste output from industries with high redundancy\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter2_long <- melt(filtered_data2, id.vars = \"...1\", variable.name = \"to\", value.name = \"weight\", variable.factor = FALSE)\n\n# Rename the \"Industries\" column to \"From\"\ncolnames(filter2_long)[colnames(filter2_long) == \"...1\"] <- \"from\"\n#filter2_long\n\n\n# Create a heatmap plot\nggplot(filter2_long, aes(x = from, y = to, fill = log(weight))) +\n  geom_tile() +\n  scale_fill_gradient(low = \"yellow\", high = \"red\") +  # Change the color pattern\n  labs(x = NULL, y = \"To\", title = \"Heatmap of Weight\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))  # Rotate x-axis labels\n```\n\n::: {.cell-output-display}\n![](final_project_jerinjacob_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n# Conclusion\n\nThe results show how much wastes go to each of the waste processing methods from the industries having most centrality measures and the most redundancy measures.\n\n# Limitation\n\nThe dataset is an older data. It is from Japan. Taking these things into consideration, we cannot make a solid conclusion about the waste outputs from industries in other parts of the world today. Also, we can compare the weight outputs from industries having each of the centrality score high and low. This would make the analysis even harder. So this study has been concluded with the available results.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Reference:\n1) Nakamura, S. (2020). Tracking the Product Origins of Waste for Treatment Using the WIO Data Developed by the Japanese Ministry of the Environment. Env. Sci. Technol. https://doi.org/10.1021/acs.est.0c06015\n\n\n",
    "supporting": [
      "final_project_jerinjacob_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}