{
  "hash": "481147be5486edcf38d154d1d3e11f10",
  "result": {
    "markdown": "---\ntitle: \"Week3_Challenge\"\nauthor: \"Niharika Pola\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/10/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_1\n  - instructions\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#loading libraries\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(network)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'network' 1.18.1 (2023-01-24), part of the Statnet Project\n* 'news(package=\"network\")' for changes since last version\n* 'citation(\"network\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'network'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:igraph':\n\n    %c%, %s%, add.edges, add.vertices, delete.edges, delete.vertices,\n    get.edge.attribute, get.edges, get.vertex.attribute, is.bipartite,\n    is.directed, list.edge.attributes, list.vertex.attributes,\n    set.edge.attribute, set.vertex.attribute\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ lubridate::%--%()      masks igraph::%--%()\n✖ dplyr::as_data_frame() masks tibble::as_data_frame(), igraph::as_data_frame()\n✖ purrr::compose()       masks igraph::compose()\n✖ tidyr::crossing()      masks igraph::crossing()\n✖ dplyr::filter()        masks stats::filter()\n✖ dplyr::lag()           masks stats::lag()\n✖ purrr::simplify()      masks igraph::simplify()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_distances <- read_csv(\"posts/_data/got/got_distances.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: 'posts/_data/got/got_distances.csv' does not exist in current working directory ('C:/Users/91955/Desktop/Social_Networks_Spring_2023/posts').\n```\n:::\n\n```{.r .cell-code}\nhead(got_distances)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(got_distances): object 'got_distances' not found\n```\n:::\n\n```{.r .cell-code}\ngot_distances.ig <-graph_from_data_frame(got_distances, directed = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(d): object 'got_distances' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of edges\necount(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\n# number of vertices\nvcount(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\n# vertex and edge attributes\nvertex_attr_names(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\n# network features\nis_directed(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\n# dyad census\nigraph::dyad.census(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\n# triad census\ntriad_census(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n:::\n\n\nThe vertex attribute is 'name' and edge attributes are \"To\", \"Miles\", \"Mode\", \"Notes\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of components\nigraph::components(got_distances.ig)$no\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\n# size of components\nigraph::components(got_distances.ig)$csize \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n:::\n\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# network density\ngraph.density(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\n# density without loops\ngraph.density(got_distances.ig, loops=TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# average network degree\nigraph::degree(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nig_nodes<-data.frame(name=V(got_distances.ig)$name, degree=igraph::degree(got_distances.ig,loops=FALSE))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'got_distances.ig' not found\n```\n:::\n\n```{.r .cell-code}\nig_nodes<-nodes_ig %>%\n    mutate(indegree=igraph::degree(got_distances.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(got_distances.ig, mode=\"out\", loops=FALSE))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., indegree = igraph::degree(got_distances.ig, mode = \"in\", : object 'nodes_ig' not found\n```\n:::\n\n```{.r .cell-code}\nhead(ig_nodes)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(ig_nodes): object 'ig_nodes' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nerdos_renyi.ig <- sample_gnm(103, 200, directed = TRUE, loops = FALSE)\n# density of random network\ngraph.density(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01903674\n```\n:::\n\n```{.r .cell-code}\n# dyad census of random network\nigraph::dyad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 1\n\n$asym\n[1] 198\n\n$null\n[1] 5054\n```\n:::\n\n```{.r .cell-code}\n# triad census of random network\nigraph::triad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 157520  18489     95    163    188    370      3      2     16      4\n[11]      0      0      0      1      0      0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_nodes<-data.frame(degree=igraph::degree(erdos_renyi.ig))\nrand_nodes<-rand_nodes %>%\n    mutate(indegree=igraph::degree(erdos_renyi.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(erdos_renyi.ig, mode=\"out\", loops=FALSE))\nhead(rand_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree indegree outdegree\n1      2        1         1\n2      1        1         0\n3      1        1         0\n4      3        0         3\n5      1        0         1\n6      2        1         1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(rand_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     degree          indegree       outdegree    \n Min.   : 0.000   Min.   :0.000   Min.   :0.000  \n 1st Qu.: 2.000   1st Qu.:1.000   1st Qu.:1.000  \n Median : 4.000   Median :2.000   Median :2.000  \n Mean   : 3.883   Mean   :1.942   Mean   :1.942  \n 3rd Qu.: 5.000   3rd Qu.:3.000   3rd Qu.:3.000  \n Max.   :11.000   Max.   :8.000   Max.   :6.000  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}