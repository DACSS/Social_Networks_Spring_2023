{
  "hash": "4c6432f0c173acf7a8ff0a1b61ac983d",
  "result": {
    "markdown": "---\ntitle: \"Assignment Kpop Collaboration Network\"\nauthor: \"Erika Nagai\"\ndate: \"03/28/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\neditor: visual\n\n---\n\n\n# Overview\n\nThe phenomenon of K-pop has recently emerged as a prominent cultural force, gaining significant attention and popularity not only in South Korea and other Asian nations but globally as well, particularly among the younger generation. An interesting aspect of K-pop is that many K-pop artists collaborate with other artists, often those who are not based in South Korea. In this analysis, my objective is to delve into the dynamics of such collaborations within the K-pop industry and beyond, across various musical genres, and to investigate how these collaborative patterns have evolved over time. To achieve this goal, I aim to examine the social network of K-pop collaborations, with a view to gaining a better understanding of the underlying trends and structures shaping this phenomenon.\n\n# Literature review and hypothesis \nDuring the 1990s, Seo Taiji gained significant popularity in the K-pop industry by pioneering a fusion of hip-hop and euro-pop-inspired songs (Kyung, 2021). Subsequently, from the late 1990s to the mid-2020s, K-pop experienced a surge in popularity in other Asian regions, particularly China and Japan (Kyung, 2021; Shin, 2009). The notable global success of Psy's \"Gangnam Style\" in 2012 served as a pivotal moment, propelling K-pop into the U.S. market and instilling hope within the industry for accessing a broader international audience (Kyung, 2021). Based on these historical developments, I hypothesized: \nH1. K-pop started to collaborate on songs with international artists, particularly those from Western countries, following the impact of \"Gangnam Style\" in 2012.\"\n\n\n# Methods of studies\n\nTo analyze the K-pop music landscape, the following steps were taken:\nFirst, the name of K-pop artists were gathered by prompting ChatGPT on famous K-pop artists for the last 20 years (specifically, as of 2005, 2010, 2012, 2015, 2018, and 2020) and by extracting all the artists' name from Spotify official playlists \"Top-KPop Artists of 2022,\" \"Millenium K-Pop,\" \"Best of 2008: K-Pop\". \nThen, all the songs who are sung by these artists were gathered using Spotify API and only collaboration songs, which are sung by more than one artist were used for this analysis. This resulted in 1123 songs by 962 artists/groups. (Refer to \"Preparation_SpotifyID.ipynb\" and \"K-Pop Social Network ANalysis.ipynb\" for the process of data collection.)\n\n\n# Read in & Describe data\n\n**collab_songs.csv:**\n\nThis is a list of collaboration songs collected by\n\n1.  gathering the name of the top 50 Kpop artists in 2010, 2015, and 2020 by asking ChatGPT\n2.  manually collecting their Spotify artist id\n3.  collecting all the singles/albums data of the artists by using Spotify API and\n4.  removing the songs that are NOT collaborative by filtering out those who have only one artist registered\n\n**artist.csv:**\n\nThis is a list of artists performed the collaboration songs collected by\n\n1.  extracting the unique artists from the collab_songs.csv\n2.  collecting their information (genre and followers) using Spotify API\n\n**song_detail.csv:**\n\nThis is a list of songs with detail information prepared by\n\n1.  extracting the detailed song information (release year, available market etc) by using Spotify API based on the track id from kpop_collab.csv\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install libraries\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:igraph':\n\n    as_data_frame, groups, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tidyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:igraph':\n\n    crossing\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in data\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/Microsoft/Documents/DACSS/753_Social_Network/Social_Networks_Spring_2023/posts\"\n```\n:::\n\n```{.r .cell-code}\ncollab_songs <- read_csv(\"_data/Kpop_analysis_ErikaNagai/final_collab_songs.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1123 Columns: 30\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (30): song_name, kpop_artist_name, song_id, artist_id, artist_1, artist_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nartists <- read_csv(\"_data/Kpop_analysis_ErikaNagai/final_artists_df.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 962 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): name, id, genre\ndbl (2): top_kpop, followers\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nsong_detail <- read_csv(\"_data/Kpop_analysis_ErikaNagai/song_detail.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 1123 Columns: 20\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(11): album, artists, available_markets, external_ids, external_urls, h... dbl\n(6): ...1, disc_number, duration_ms, popularity, track_number, release... lgl\n(2): explicit, is_local date (1): release_date\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nsong_detail <- song_detail %>% select(-c(\"...1\"))\n```\n:::\n\n\n# Describe & Clean the data\n\n### `collab_songs` dataframe\n\n`collab_songs` is a dataframe where each observation is a collaboration songs by Kpop top artists and other artists.\n\nIt has 1123 rows (collaboration songs) and 30 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'skimr' was built under R version 4.2.3\n```\n:::\n\n```{.r .cell-code}\n# Skim the data\nskim(collab_songs)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |             |\n|:------------------------|:------------|\n|Name                     |collab_songs |\n|Number of rows           |1123         |\n|Number of columns        |30           |\n|_______________________  |             |\n|Column type frequency:   |             |\n|character                |30           |\n|________________________ |             |\n|Group variables          |None         |\n\n\n**Variable type: character**\n\n|skim_variable    | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:----------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|song_name        |         0|          1.00|   1| 140|     0|     1116|          0|\n|kpop_artist_name |         0|          1.00|   1|  19|     0|      140|          0|\n|song_id          |         0|          1.00|  22|  22|     0|     1123|          0|\n|artist_id        |         0|          1.00|  22|  22|     0|      140|          0|\n|artist_1         |         0|          1.00|   1|  36|     0|      669|          0|\n|artist_id_1      |         0|          1.00|  22|  22|     0|      667|          0|\n|artist_2         |       697|          0.38|   1|  19|     0|      228|          0|\n|artist_id_2      |       698|          0.38|  22|  22|     0|      227|          0|\n|artist_3         |       990|          0.12|   3|  21|     0|      106|          0|\n|artist_id_3      |       990|          0.12|  22|  22|     0|      106|          0|\n|artist_4         |      1086|          0.03|   4|  19|     0|       32|          0|\n|artist_id_4      |      1086|          0.03|  22|  22|     0|       32|          0|\n|artist_5         |      1103|          0.02|   4|  17|     0|       16|          0|\n|artist_id_5      |      1103|          0.02|  22|  22|     0|       16|          0|\n|artist_6         |      1113|          0.01|   5|  13|     0|       10|          0|\n|artist_id_6      |      1113|          0.01|  22|  22|     0|       10|          0|\n|artist_7         |      1116|          0.01|   5|  17|     0|        7|          0|\n|artist_id_7      |      1116|          0.01|  22|  22|     0|        7|          0|\n|artist_8         |      1120|          0.00|   5|  11|     0|        3|          0|\n|artist_id_8      |      1120|          0.00|  22|  22|     0|        3|          0|\n|artist_9         |      1121|          0.00|   4|   9|     0|        2|          0|\n|artist_id_9      |      1121|          0.00|  22|  22|     0|        2|          0|\n|artist_10        |      1121|          0.00|   2|   7|     0|        2|          0|\n|artist_id_10     |      1121|          0.00|  22|  22|     0|        2|          0|\n|artist_11        |      1122|          0.00|  12|  12|     0|        1|          0|\n|artist_id_11     |      1122|          0.00|  22|  22|     0|        1|          0|\n|artist_12        |      1122|          0.00|  13|  13|     0|        1|          0|\n|artist_id_12     |      1122|          0.00|  22|  22|     0|        1|          0|\n|artist_13        |      1122|          0.00|   8|   8|     0|        1|          0|\n|artist_id_13     |      1122|          0.00|  22|  22|     0|        1|          0|\n:::\n\n```{.r .cell-code}\nsummary(collab_songs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  song_name         kpop_artist_name     song_id           artist_id        \n Length:1123        Length:1123        Length:1123        Length:1123       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   artist_1         artist_id_1          artist_2         artist_id_2       \n Length:1123        Length:1123        Length:1123        Length:1123       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   artist_3         artist_id_3          artist_4         artist_id_4       \n Length:1123        Length:1123        Length:1123        Length:1123       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   artist_5         artist_id_5          artist_6         artist_id_6       \n Length:1123        Length:1123        Length:1123        Length:1123       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   artist_7         artist_id_7          artist_8         artist_id_8       \n Length:1123        Length:1123        Length:1123        Length:1123       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   artist_9         artist_id_9         artist_10         artist_id_10      \n Length:1123        Length:1123        Length:1123        Length:1123       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n  artist_11         artist_id_11        artist_12         artist_id_12      \n Length:1123        Length:1123        Length:1123        Length:1123       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n  artist_13         artist_id_13      \n Length:1123        Length:1123       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n```\n:::\n:::\n\n\n`collab_songs` has following columns.\n\n-   song_name\n\n-   song_id: this can be used as a key when joining with `song_detail` dataframe\n\n-   kpop_artist_name: This is a name of the Kpop top artists.(KPop top artists are from Spotify Top playlists or the answers from Chat GPT)\n\n-   artist_id: This is a Spotify Artist id of the Kpop top artists. This can be used as a key when joining with `artist` dataframe\n\n-   artist\\_\\[i\\]: This is a name of the artists that collaborated with Kpop top artists or the Kpop top artists themselves, which means that it might duplicate with `kpop_artist_name` (i is a number from 1 to 7)\n\n-   artist_id\\_\\[i\\]: This is a Spotify Artist ID of the artists that collaborated with Kpop top artists or the Kpop top artists themselves, which means that it might duplicate with `artist_id` (i is a number from 1 to 7). This can be used as a key when joining with `artists` dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab_songs <- collab_songs %>% \n  select(c(\"song_name\", \"song_id\", \"kpop_artist_name\", \"artist_id\", \"artist_1\", \"artist_id_1\", \"artist_2\", \"artist_id_2\", \"artist_3\", \"artist_id_3\", \"artist_4\", \"artist_id_4\", \"artist_5\", \"artist_id_5\", \"artist_6\", \"artist_id_6\", \"artist_7\", \"artist_id_7\", \"artist_8\", \"artist_id_8\", \"artist_9\", \"artist_id_9\", \"artist_10\", \"artist_id_10\", \"artist_11\", \"artist_id_11\", \"artist_12\", \"artist_id_12\", \"artist_13\", \"artist_id_13\"))\n\ncollab_songs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,123 × 30\n   song_name     song_id kpop_…¹ artis…² artis…³ artis…⁴ artis…⁵ artis…⁶ artis…⁷\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 Angel Pt. 1 … 5qyjy0… BTS     3Nrfpe… Jimin   1oSPZh… JVKE    164Uj4… Kodak …\n 2 Dreamers [Mu… 1RDvyO… BTS     3Nrfpe… Jung K… 6HaGTQ… BTS     3Nrfpe… FIFA S…\n 3 Bad Decision… 0xzI1K… BTS     3Nrfpe… benny … 5CiGnK… BTS     3Nrfpe… Snoop …\n 4 Left and Rig… 0mBP9X… BTS     3Nrfpe… Charli… 6VuMaD… Jung K… 6HaGTQ… BTS    \n 5 My Universe … 5FvxRv… BTS     3Nrfpe… Coldpl… 4gzpq5… BTS     3Nrfpe… David …\n 6 My Universe … 1Dlczm… BTS     3Nrfpe… Coldpl… 4gzpq5… BTS     3Nrfpe… Galant…\n 7 My Universe … 6Lgbf4… BTS     3Nrfpe… Coldpl… 4gzpq5… BTS     3Nrfpe… <NA>   \n 8 My Universe … 6BeOJP… BTS     3Nrfpe… Coldpl… 4gzpq5… BTS     3Nrfpe… SUGA   \n 9 Butter - Meg… 474Vqn… BTS     3Nrfpe… Megan … 181bsR… <NA>    <NA>    <NA>   \n10 Savage Love … 4TgxFM… BTS     3Nrfpe… Jawsh … 56mfhU… Jason … 07YZf4… BTS    \n# … with 1,113 more rows, 21 more variables: artist_id_3 <chr>, artist_4 <chr>,\n#   artist_id_4 <chr>, artist_5 <chr>, artist_id_5 <chr>, artist_6 <chr>,\n#   artist_id_6 <chr>, artist_7 <chr>, artist_id_7 <chr>, artist_8 <chr>,\n#   artist_id_8 <chr>, artist_9 <chr>, artist_id_9 <chr>, artist_10 <chr>,\n#   artist_id_10 <chr>, artist_11 <chr>, artist_id_11 <chr>, artist_12 <chr>,\n#   artist_id_12 <chr>, artist_13 <chr>, artist_id_13 <chr>, and abbreviated\n#   variable names ¹​kpop_artist_name, ²​artist_id, ³​artist_1, ⁴​artist_id_1, …\n```\n:::\n:::\n\n\n### Artists\n\n`artists` is a dataframe where each row represents an artist (individual/group) that have participated in Kpop collaboration songs by top Kpop artists.\n\n1.  name: the name of the artist\n\n2.  id: This is a Spotify Artist ID of the artist. It can be used as a key when joining with `collab_songs` dataframe\n\n3.  top_kpop: if the artist is one of the top 50 Kpop artists in 2010, 2015, or 2020, the value is 1. Otherwise, the value is 0.\n\n4.  genre: the genre of the artist (can be multiple)\n\n5.  followers: the number of the followers on Spotify. Spotify API doesn't provide the number of artists' monthly followers so the number of followers is the only index of popularity of artists.\n\n`artist` dataframe has 962 unique rows, meaning that there are 962 artists (including K-pop artists, and non-kpop artists) that have participated in K-pop musical collaboration\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(artists)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |        |\n|:------------------------|:-------|\n|Name                     |artists |\n|Number of rows           |962     |\n|Number of columns        |5       |\n|_______________________  |        |\n|Column type frequency:   |        |\n|character                |3       |\n|numeric                  |2       |\n|________________________ |        |\n|Group variables          |None    |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|name          |         0|             1|   1|  36|     0|      962|          0|\n|id            |         0|             1|  22|  22|     0|      962|          0|\n|genre         |         0|             1|   2| 154|     0|      237|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|       mean|         sd| p0|     p25|   p50|      p75|      p100|hist  |\n|:-------------|---------:|-------------:|----------:|----------:|--:|-------:|-----:|--------:|---------:|:-----|\n|top_kpop      |         0|             1|       0.15|       0.35|  0|    0.00|     0|      0.0|         1|▇▁▁▁▂ |\n|followers     |         0|             1| 1346115.00| 5889520.19|  0| 1167.25| 39480| 387868.5| 111956794|▇▁▁▁▁ |\n:::\n\n```{.r .cell-code}\nsummary(artists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name                id               top_kpop         genre          \n Length:962         Length:962         Min.   :0.0000   Length:962        \n Class :character   Class :character   1st Qu.:0.0000   Class :character  \n Mode  :character   Mode  :character   Median :0.0000   Mode  :character  \n                                       Mean   :0.1455                     \n                                       3rd Qu.:0.0000                     \n                                       Max.   :1.0000                     \n   followers        \n Min.   :        0  \n 1st Qu.:     1167  \n Median :    39480  \n Mean   :  1346115  \n 3rd Qu.:   387868  \n Max.   :111956794  \n```\n:::\n\n```{.r .cell-code}\nartists\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 962 × 5\n   name                                id                  top_k…¹ genre follo…²\n   <chr>                               <chr>                 <dbl> <chr>   <dbl>\n 1 Relax Beer                          04BxwccHO4U2wMwVLv…       0 []     2   e0\n 2 KAHI                                04C0MPapc1HXpTbspJ…       0 []     0     \n 3 LE                                  04JxNGSux7QdmrCvnQ…       0 []     4.2 e1\n 4 Sunwoojunga                         04L3elxyr0XFua2Ek3…       0 ['k-…  9.49e4\n 5 Miso                                04xEkodoWyFji8icX9…       0 ['ko…  7.97e4\n 6 Symba                               06S3fr7xEES7e3QPXh…       0 []     6.66e4\n 7 Tommy “TBHits” Brown                06moEoVtCKweJmGYid…       0 []     5   e0\n 8 m-flo loves Sik-K & eill & 向井太一 072YnMT5EniZhvDssX…       0 []     8.64e2\n 9 Sebastian Yatra                     07YUOmWljBTXwIseAU…       0 ['co…  2.15e7\n10 Jason Derulo                        07YZf4WDAMNwqr4jfg…       0 ['da…  1.18e7\n# … with 952 more rows, and abbreviated variable names ¹​top_kpop, ²​followers\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nartists %>% \n  group_by(id) %>%\n  summarize(n=n()) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 962 × 2\n   id                         n\n   <chr>                  <int>\n 1 04BxwccHO4U2wMwVLvYTLO     1\n 2 04C0MPapc1HXpTbspJhmWg     1\n 3 04JxNGSux7QdmrCvnQowyr     1\n 4 04L3elxyr0XFua2Ek3domW     1\n 5 04xEkodoWyFji8icX911jM     1\n 6 06moEoVtCKweJmGYid8vU7     1\n 7 06S3fr7xEES7e3QPXhu3ay     1\n 8 072YnMT5EniZhvDssXL2VB     1\n 9 07YUOmWljBTXwIseAUd9TW     1\n10 07YZf4WDAMNwqr4jfgOZ8y     1\n# … with 952 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean data by removing unnecessary columns\n\nartists <- artists %>% relocate(id, .before = name)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is the list of the genre names that appear in artist dataframe\nartists %>%\n  select(genre) %>%\n  separate_rows(genre, sep = \",\\\\s*\") %>%\n  mutate(genre = gsub(\"\\\\[|'|\\\\]\", \"\", genre)) %>%\n  arrange(genre) %>%\n  count(genre)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 230 × 2\n   genre                                 n\n   <chr>                             <int>\n 1 \"\"                                  353\n 2 \"a cappella\"                          1\n 3 \"afrobeats\"                           1\n 4 \"alt z\"                               5\n 5 \"alternative r&b\"                     2\n 6 \"american 21st century classical\"     1\n 7 \"anime\"                               1\n 8 \"art pop\"                             3\n 9 \"asian american hip hop\"              5\n10 \"atl hip hop\"                         4\n# … with 220 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nartists %>% filter(str_detect(genre, \"desi pop\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n  id                     name         top_kpop genre                     follo…¹\n  <chr>                  <chr>           <dbl> <chr>                       <dbl>\n1 4IKVDbCSBTxBeAsMKjAuTs Armaan Malik        0 ['desi pop', 'filmi', 'm…  1.79e7\n# … with abbreviated variable name ¹​followers\n```\n:::\n\n```{.r .cell-code}\nartists %>% filter(str_detect(genre, \"j-|japanese|josei\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n  id                     name         top_kpop genre                     follo…¹\n  <chr>                  <chr>           <dbl> <chr>                       <dbl>\n1 1qM11R4ylJyQiPJ0DffE9z Lilas Ikuta         0 ['j-pop', 'japanese teen…  4.30e5\n2 2mGYHril2LuZodRtTX06BC Kumi Koda           0 ['j-pop']                  5.69e5\n3 2oNStf3CKKLM5lnzELWMcH Taichi Mukai        0 ['japanese r&b']           1.31e5\n4 2vjeuQwzSP5ErC1S41gONX CHANMINA            0 ['j-rap', 'josei rap']     5.98e5\n5 3AiES4wyTOfJvNgqz9baDn eill                0 ['anime', 'japanese r&b']  1.17e5\n6 3JsHnjpbhX4SnySpvpa9DK V                   1 ['j-division', 'korean o…  1.31e7\n7 3yzQHdj9G34CVZ5rVUDrOM Crystal Kay         0 ['j-pop', 'japanese r&b']  3.00e5\n8 4UhiMIdxKqQxmzdE9nYe6O m-flo               0 ['j-pop']                  3.32e5\n# … with abbreviated variable name ¹​followers\n```\n:::\n:::\n\n\nI added two new columns to the `artist` dataFrame. The first column `region_genre`, which indicate the broader regional genre of each artist, such as K-pop, Latin-pop, or J-pop (Japanese pop), which would help us to better understand the overall geographical market. The second column would simply indicate whether each artist is K-pop or not.\n\nFirst, I decided to classify the overall genre by detecting the follwoing word in the `genre` column\n\n**K-pop:** \"korean\", \"k-\" (for example k-pop, k-rap). Also any artists whose column \"top-kpop\" is 1 are considered as K-pop genre.\n\n**Latin-pop:** \"latin\", \"latino\", \"chicano\", \"chileno\", \"bachata\", \"colombian\", \"mexican\", \"puerto rican\", \"reggaeton\", \"dominicano\"\n\n**East Asia:** \"japanese\", \"j-\" (for example j-pop, j-rap, j-core), \"visual-kei\", \"josei\", \"kawaii\", \"chinese\\\n,\"c-\",\"taiwan\"\n\n**South East Asia:** \"vietnamese\", \"viet\", \"v-pop\", \"singaporean\", \"desi pop\", \"bollywood\", \"indian\", \"indonesian\", \"malaysian\", \"thai\", \"burmese\"\n\n**Europe:** \"uk\" (uk-pop, uk-hiphop), \"norwegian\", \"swedish\", \"belgian\"\n\n**US or Others:** artists whose genre doesn't include the above words but has any word\n\n**Unknown:** artists whose genre is empty\n\n\n::: {.cell}\n\n```{.r .cell-code}\nartists %>% group_by_all()%>%\n  filter(n()>1) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 5\n# … with 5 variables: id <chr>, name <chr>, top_kpop <dbl>, genre <chr>,\n#   followers <dbl>\n```\n:::\n\n```{.r .cell-code}\nartists <- artists %>% \n  mutate(region_category=case_when(\n    grepl(\"k-|koreanp\", genre) | top_kpop == 1 ~ \"K-pop\",\n    grepl(\"latin|latino|chicano|chileno|bachata|colombian|mexican|puerto rican|reggaeton|dominicano\", genre) ~ \"Latino\",\n    grepl(\"j-|japanese|visual-kei|josei|visualkawaii|chinese|c-|taiwan\", genre) ~ \"East Asia\",\n    grepl(\"vietnamese|viet|v-|singaporean|desi pop|bollywood|indian |indonesian|malaysian|thai|burmese\", genre) ~ \"South East Asia\",\n    grepl(\"uk-|uk \", genre) ~ \"Europe\",\n    grepl(\"\\\\[\\\\]\", genre) ~ \"Unknown\",\n    TRUE ~ \"US or Other\"\n\n  ))\n\nartists %>% \n  group_by(region_category) %>%\n  summarize(n=n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  region_category     n\n  <chr>           <int>\n1 East Asia          13\n2 Europe             11\n3 K-pop             319\n4 Latino             11\n5 South East Asia    11\n6 Unknown           349\n7 US or Other       248\n```\n:::\n:::\n\n\nThere are 349 artists whose genre is unknown. I checked them and changed `region_category` of some of them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(artists %>% \n  filter(region_category == \"Unknown\") %>%\n  arrange(desc(name)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 349 × 6\n   id                     name               top_kpop genre followers region_c…¹\n   <chr>                  <chr>                 <dbl> <chr>     <dbl> <chr>     \n 1 23aPUZaR8bESXN4UD3T2Sx 香取慎吾                  0 []        20927 Unknown   \n 2 2VrDFxXbEHomf7A8Q87uRA 朴宰範                    0 []           18 Unknown   \n 3 7BrydByY8Q9MZjovkvRsCP 尹美萊                    0 []          150 Unknown   \n 4 76yPSQzTmeCY5fCsrMFoSw 혜미                      0 []            2 Unknown   \n 5 3lTYYNwaDmW0rrsAz5aG8o 헤리티지(Heritage)        0 []           37 Unknown   \n 6 1WLp3CeL7X1Ic7DTu67CCP 한겨울                    0 []            0 Unknown   \n 7 7fCSy7Had5Fs540ilzxV20 트리키                    0 []          103 Unknown   \n 8 76JVW7YYK3nRTVvRxUalpI 토끼                      0 []            2 Unknown   \n 9 6OK3Lf8Ws6A4UdRw3lMNZo 태완                      0 []           57 Unknown   \n10 0BeIulKOpcvsabwlt4u8qp 태양                      0 []         8010 Unknown   \n# … with 339 more rows, and abbreviated variable name ¹​region_category\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# I noticed there were a few Japanese artists so I manually changed his region_category \"East Asia\"\n\nartists$region_category[artists$name == \"香取慎吾\"] <- \"East Asia\"\nartists$region_category[artists$name == \"Yutaka Furukawa\"] <- \"East Asia\"\nartists$region_category[artists$name == \"Takanori Nishikawa T.M.Revolution\"] <- \"East Asia\"\nartists$region_category[artists$name == \"Naoko Tanaka\"] <- \"East Asia\"\nartists$region_category[artists$name == \"m-flo loves Sik-K & eill & 向井太一\"] <- \"East Asia\"\n\n\n# Artists whose name include Hangul, I manually changed their region_category to \"K-pop\"\nartists <- artists %>% arrange(desc(name)) %>% arrange(region_category) # row 371 - 404 are in Hangul\n\nartists$region_category[371:404] <- \"K-pop\"\nartists$region_category[artists$name == \"nafla (나플라)\"] <- \"K-pop\"\nartists$region_category[artists$name == \"MC 몽\"] <- \"K-pop\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(artists %>%\n  filter(region_category == \"Unknown\" & followers > 10000) %>%\n  arrange(desc(followers))) %>%\n  select(c(\"id\", \"name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 55 × 6\n   id                     name        top_kpop genre followers region_category\n   <chr>                  <chr>          <dbl> <chr>     <dbl> <chr>          \n 1 70DFixYAFPv4Pf9kgSfR9O MARK               0 []       509054 Unknown        \n 2 7wFDo161xYdeaiLz3KIHoM Gallant            0 []       302064 Unknown        \n 3 2FgZrgTMX6Sk0VNcOsEPmm Punch              0 []       301148 Unknown        \n 4 7cEaNXXTHx3LokbjUUyHal BIG Naughty        0 []       286344 Unknown        \n 5 31SBgHxc8eqZUk9MdveH42 PREP               0 []       254055 Unknown        \n 6 0JOxt5QOwq0czoJxvSc5hS GASHI              0 []       235666 Unknown        \n 7 2qDIR2WlcW3llkGqJWg9VJ Lolo Zouaï         0 []       210312 Unknown        \n 8 79R17q4kiPsimHDtdOlN2L SEHUN              0 []       184818 Unknown        \n 9 31IZdHrCZ5pRhLz4zBxN3o Riff Raff          0 []       179063 Unknown        \n10 5C01hDqpEmrmDfUhX9YWsH FIFA Sound         0 []       167771 Unknown        \n# … with 45 more rows\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 55 × 2\n   id                     name       \n   <chr>                  <chr>      \n 1 70DFixYAFPv4Pf9kgSfR9O MARK       \n 2 7wFDo161xYdeaiLz3KIHoM Gallant    \n 3 2FgZrgTMX6Sk0VNcOsEPmm Punch      \n 4 7cEaNXXTHx3LokbjUUyHal BIG Naughty\n 5 31SBgHxc8eqZUk9MdveH42 PREP       \n 6 0JOxt5QOwq0czoJxvSc5hS GASHI      \n 7 2qDIR2WlcW3llkGqJWg9VJ Lolo Zouaï \n 8 79R17q4kiPsimHDtdOlN2L SEHUN      \n 9 31IZdHrCZ5pRhLz4zBxN3o Riff Raff  \n10 5C01hDqpEmrmDfUhX9YWsH FIFA Sound \n# … with 45 more rows\n```\n:::\n\n```{.r .cell-code}\n# I manually changed the region_categoroy for artists whose followers are over 15000 by checking the online information\n\nartists$region_category[artists$id == \"70DFixYAFPv4Pf9kgSfR9O\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Gallant\"] <- \"US or Other\"\nartists$region_category[artists$name == \"Punch\"] <- \"K-pop\"\nartists$region_category[artists$name == \"BIG Naughty\"] <- \"K-pop\"\nartists$region_category[artists$name == \"PREP\"] <- \"Europe\"\nartists$region_category[artists$name == \"GASHI\"] <- \"US or Other\"\nartists$region_category[artists$name == \"Lolo Zouaï\"] <- \"US or Other\"\nartists$region_category[artists$name == \"SEHUN\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Riff Raff\"] <- \"US or Other\"\nartists$region_category[artists$name == \"FIFA Sound\"] <- \"US or Other\"\n\nartists$region_category[artists$name == \"vaultboy\"] <- \"US or Other\"\nartists$region_category[artists$name == \"D_LITE\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Seraphine\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Wonstein\"] <- \"K-pop\"\nartists$region_category[artists$name == \"YooA\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Wuki\"] <- \"US or Other\"\nartists$region_category[artists$name == \"MINNIE\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Symba\"] <- \"US or Other\"\nartists$region_category[artists$name == \"HWANG MIN HYUN\"] <- \"K-pop\"\n\n\nartists$region_category[artists$name == \"T.O.P\"] <- \"K-pop\"\nartists$region_category[artists$name == \"End of the World\"] <- \"East Asia\"\nartists$region_category[artists$name == \"MELOH\"] <- \"K-pop\"\nartists$region_category[artists$name == \"LUCAS\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Paul Blanco\"] <- \"US or Other\"\nartists$region_category[artists$name == \"JEON WOONG\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Sion\"] <- \"K-pop\"\nartists$region_category[artists$name == \"KEN THE 390\"] <- \"East Asia\"\nartists$region_category[artists$name == \"BM\"] <- \"K-pop\"\n\nartists$region_category[artists$name == \"Minhyun\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Yong Jun Hyung\"] <- \"K-pop\"\n\n\nartists$region_category[artists$name == \"Lucas\"] <- \"K-pop\" # I learned he is a Hong Kong rapper but is based in South Korea and is a member of Kpop group NCT.\nartists$region_category[artists$name == \"Paniel\"] <- \"K-pop\"\nartists$region_category[artists$name == \"PANIEL\"] <- \"K-pop\"\nartists$region_category[artists$name == \"PENIEL\"] <- \"K-pop\"\n\n\nartists$region_category[artists$name == \"LIM YOUNG MIN\"] <- \"K-pop\"\nartists$region_category[artists$name == \"KIM DONG HYUN\"] <- \"K-pop\"\n\nartists$region_category[artists$name == \"D-LITE\"] <- \"K-pop\"\n\nartists$region_category[artists$name == \"LUNA\"] <- \"K-pop\"\nartists$region_category[artists$name == \"LEE DAE HWI\"] <- \"K-pop\"\nartists$region_category[artists$name == \"LEEGIKWANG\"] <- \"K-pop\"\n\nartists$region_category[artists$name == \"T.O.P.\"] <- \"K-pop\"\n\nartists$region_category[artists$name == \"Zior Park\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Sandara Park\"] <- \"K-pop\"\nartists$region_category[artists$name == \"U-KWON\"] <- \"K-pop\"\nartists$region_category[artists$name == \"HOYA\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Slom\"] <- \"K-pop\"\n\nartists$region_category[artists$name == \"TAEHYUN\"] <- \"K-pop\"\nartists$region_category[artists$name == \"WOOSEOK\"] <- \"K-pop\"\nartists$region_category[artists$name == \"ABLE\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Imad Royal\"] <- \"US or Other\"\n\n\nartists$region_category[artists$name == \"J.UNA\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Yeeun\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Reiley\"] <- \"Europe\"\nartists$region_category[artists$name == \"NARSHA\"] <- \"K-pop\"\nartists$region_category[artists$name == \"Son Dong Woon\"] <- \"K-pop\"\nartists$region_category[artists$name == \"LEE CHANHYUK\"] <- \"K-pop\"\nartists$region_category[artists$name == \"The Chosen\"] <- \"Latino\"\nartists$region_category[artists$name == \"JeHwi\"] <- \"K-pop\"\nartists$region_category[artists$name == \"inverness\"] <- \"US or Other\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nprint(artists %>% \n  filter(region_category == \"Unknown\" & str_detect(name,\"\\\\(\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 6\n   id                     name                     top_k…¹ genre follo…² regio…³\n   <chr>                  <chr>                      <dbl> <chr>   <dbl> <chr>  \n 1 54JXhmpGDN8NdAIq44z4gt Young Jae (B.A.P)              0 []       4541 Unknown\n 2 5bRCVFekTRnptEuJ0ZxTtf Yoon Han (Pop Pianist)         0 []          4 Unknown\n 3 2KbOz7b91wiUpnv34Twd9f YOOK SUNGJAE (BTOB)            0 []        119 Unknown\n 4 2oG0hcbCfRofbtKnuS1fWF Yeo-Eun (MelodyDay)            0 []         27 Unknown\n 5 5KnPgqPc7aCvEfXrCs4QjV Yella Diamond) (Perform…       0 []          3 Unknown\n 6 76EfJwRQeOeQ5aMh3FF7z4 Sanchez (of Phantom)           0 []         15 Unknown\n 7 6KIjwPp994JQ2LJ8IBvZPc LEE MINHYUK (BTOB)             0 []        648 Unknown\n 8 3LcvhSx1kL5VwaOHhAN1B5 Kwon Soonil(Urban Zakap…       0 []          4 Unknown\n 9 0sSAFVekiDtX7PXDQvHnlK JONG UP (B.A.P)                0 []       5853 Unknown\n10 1htPJUlogkZBjbKp86uuLF DAE HYUN (B.A.P)               0 []       6874 Unknown\n11 3schR1HLbYu3RqqPDiDFrE ANYUJIN (IVE)                  0 []       1924 Unknown\n# … with abbreviated variable names ¹​top_kpop, ²​followers, ³​region_category\n```\n:::\n\n```{.r .cell-code}\n# Some artists are from a group where he/she belongs to\nartists$region_category[str_detect(artists$name, \"B.A.P\")] <- \"K-pop\"\nartists$region_category[str_detect(artists$name, \"BTOB\")] <- \"K-pop\"\nartists$region_category[str_detect(artists$name, \"MelodyDay\")] <- \"K-pop\"\nartists$region_category[str_detect(artists$name, \"Urban Zakapa\")] <- \"K-pop\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nartists %>% filter(region_category == \"Unknown\") %>%\n  filter(str_detect(name, \"of\")) %>%\n  select(c(\"id\", \"name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  id                     name                     \n  <chr>                  <chr>                    \n1 4TYswX6bKUjM9rbEL7CMBH YEJI & RYUJIN of ITZY    \n2 76EfJwRQeOeQ5aMh3FF7z4 Sanchez (of Phantom)     \n3 40zyx4iztMjRbIIoI802r4 Felix of Stray Kids      \n4 5Fa7oN67rqbrgxbRVux7F4 CHOI JUNG HOON of JANNABI\n5 4nzWj1u4IslWFr3B5f7HfY Ahin of MOMOLAND         \n```\n:::\n\n```{.r .cell-code}\n# Some artists are from a group where he/she belongs to\nartists$region_category[str_detect(artists$name, \"ITZY\")] <- \"K-pop\"\nartists$region_category[str_detect(artists$name, \"Stray Kids\")] <- \"K-pop\"\nartists$region_category[str_detect(artists$name, \"MOMOLAND\")] <- \"K-pop\"\nartists$region_category[str_detect(artists$name, \"JANNABI\")] <- \"K-pop\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nartists <- artists %>% \n  mutate(\n    kpop = case_when(\n    region_category == \"K-pop\" ~ \"yes\",\n    TRUE ~ \"no\"),\n    show_kpop_top = case_when(\n      top_kpop == 1 ~ name,\n      TRUE ~ \"\"\n    )\n  )\n```\n:::\n\n\n### song_detail (song_detail.csv)\n\n`song_detail` is a dataframe where each observation is a collaboration song by K-pop top artists and other artists. While `collab_songs` provides the general information of the artists that worked on the song, this dataframe provides more detailed information about the songs themselves such as duration, track number, release date etc...\n\nIt has 1123 rows (collaboration songs), which is the same as the number of the rows of `collab_songs`, and 19 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(song_detail)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    album             artists          available_markets   disc_number\n Length:1123        Length:1123        Length:1123        Min.   :1   \n Class :character   Class :character   Class :character   1st Qu.:1   \n Mode  :character   Mode  :character   Mode  :character   Median :1   \n                                                          Mean   :1   \n                                                          3rd Qu.:1   \n                                                          Max.   :1   \n  duration_ms      explicit       external_ids       external_urls     \n Min.   :  5889   Mode :logical   Length:1123        Length:1123       \n 1st Qu.:192577   FALSE:1036      Class :character   Class :character  \n Median :211300   TRUE :87        Mode  :character   Mode  :character  \n Mean   :212247                                                        \n 3rd Qu.:230346                                                        \n Max.   :459853                                                        \n     href                id             is_local           name          \n Length:1123        Length:1123        Mode :logical   Length:1123       \n Class :character   Class :character   FALSE:1123      Class :character  \n Mode  :character   Mode  :character                   Mode  :character  \n                                                                         \n                                                                         \n                                                                         \n   popularity    preview_url         track_number        type          \n Min.   : 0.00   Length:1123        Min.   : 1.000   Length:1123       \n 1st Qu.:17.00   Class :character   1st Qu.: 1.000   Class :character  \n Median :28.00   Mode  :character   Median : 1.000   Mode  :character  \n Mean   :29.02                      Mean   : 2.102                     \n 3rd Qu.:40.00                      3rd Qu.: 3.000                     \n Max.   :86.00                      Max.   :11.000                     \n     uri             release_date         release_year \n Length:1123        Min.   :2001-12-19   Min.   :2001  \n Class :character   1st Qu.:2015-05-26   1st Qu.:2015  \n Mode  :character   Median :2018-03-08   Median :2018  \n                    Mean   :2017-08-14   Mean   :2017  \n                    3rd Qu.:2020-08-24   3rd Qu.:2020  \n                    Max.   :2023-05-09   Max.   :2023  \n```\n:::\n:::\n\n\nThe necessary columns are as follows\n\n1.  id: This is a Spotify song id. Can be used as a key when joining with `collab_songs`\n2.  name: name of the songs\n3.  popularity: the popularity index from Spotify\n4.  release_year:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # I will remove unnecessary columns\n# song_detail <- song_detail %>% \n#   select(c(\"id\", \"name\", \"popularity\", \"release_year\"))\n# \n# song_detail$release_year <- as.integer(song_detail$release_year)\n# song_detail %>% arrange(release_year)\n# ```\n# \n# ## Extra data cleaning\n# \n# `collab_songs` include unofficial songs by unofficial accounts. For example, there are a few songs by After School and Blackpink. However, if you look at the Spotify album page, this \"Blackpink\" is different from \"BLACK PINK\". There seem to be several cases that the artist ID is not the correct one. So I removed the songs that are not by \"official\" (=with more monthly followers) accounts.\n# \n# \n# ```{r}\n# \n# # Remove the songs by artist_1 whose id doesn't exist\n# collab_songs <- collab_songs %>%\n#   left_join(artists, by = c(\"artist_id_1\" = \"id\")) %>%\n#   filter(!is.na(name)) %>%\n#   select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n# \n# # Remove the songs by artist_2 whose id doesn't exist \n# collab_songs <- collab_songs %>% \n#   left_join(artists, by = c(\"artist_id_2\" = \"id\")) %>%\n#   filter(is.na(artist_2)|!is.na(name)) %>%\n#   select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n# \n# # Remove the songs by artist_3 whose id doesn't exist \n# collab_songs <- collab_songs %>% \n#   left_join(artists, by = c(\"artist_id_3\" = \"id\")) %>%\n#   filter(is.na(artist_3)|!is.na(name)) %>%\n#   select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n# \n# # Remove the songs by artist_4 whose id doesn't exist \n# collab_songs <- collab_songs %>% \n#   left_join(artists, by = c(\"artist_id_4\" = \"id\")) %>%\n#   filter(is.na(artist_4)|!is.na(name)) %>%\n#   select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n# \n# # Remove the songs by artist_5 whose id doesn't exist \n# collab_songs <- collab_songs %>% \n#   left_join(artists, by = c(\"artist_id_5\" = \"id\")) %>%\n#   filter(is.na(artist_5)|!is.na(name)) %>%\n#   select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n# \n# # Remove the songs by artist_6 whose id doesn't exist \n# collab_songs <- collab_songs %>% \n#   left_join(artists, by = c(\"artist_id_6\" = \"id\")) %>%\n#   filter(is.na(artist_6)|!is.na(name)) %>%\n#   select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n# \n# # Remove the songs by artist_7 whose id doesn't exist \n# collab_songs <- collab_songs %>% \n#   left_join(artists, by = c(\"artist_id_7\" = \"id\")) %>%\n#   filter(is.na(artist_7)|!is.na(name)) %>%\n#   select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n# \n# collab_songs\n```\n:::\n\n\n\n# Exploratory Data Analysis\n\n### How many K-pop collaboration songs are released by year?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab_songs %>% \n  left_join(song_detail, by = c(\"song_id\"= \"id\")) %>%\n  ggplot(aes(x=release_year)) + \n  geom_bar() +\n  scale_x_continuous(breaks=seq(2010, 2022, 5)) + \n  xlim(2000, 2023) +\n  labs(title = \"The number of K-pop collaboration songs\", subtitle = \"The number of collaboration songs by K-pop top artists is increasing over the time\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for 'x' is already present. Adding another scale for 'x', which will\nreplace the existing scale.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_bar).\n```\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### Is the popularity of K-pop collaboration songs increasing?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsong_detail %>%\n  group_by(release_year) %>%\n  summarize(mean_popularity = mean(popularity)) %>%\n  ggplot(aes(x=release_year, y=mean_popularity)) + geom_line() +\n  labs(title = \"Popularity of K-pop collaboration songs\", subtitle = \"The popularity of K-pop collaboration songs is increasing constantly since around 2009\")\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## The popularity of K-pop artists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nartists %>% filter(region_category==\"K-pop\") %>% \n  ggplot(aes(x=followers)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nartists %>% \n  filter(region_category == \"K-pop\") %>%\n  arrange(desc(followers)) %>% \n  select(c(\"name\", \"followers\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 403 × 2\n   name       followers\n   <chr>          <dbl>\n 1 BTS         64752045\n 2 BLACKPINK   40782301\n 3 TWICE       17544057\n 4 j-hope      14644327\n 5 RM          13576102\n 6 V           13096788\n 7 Agust D     11679645\n 8 Stray Kids  11204838\n 9 SEVENTEEN    9155169\n10 Red Velvet   8364750\n# … with 393 more rows\n```\n:::\n:::\n\n\n# Data Processing\n\n## Convert the data in an edgelist format\nTo analyze this data in a perspective of social network, I need to convert this data into an edgelist where from_nodes are K-pop top artists, to_nodes are artists who collaborated with them, and edges are songs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert collab_songs to edgelist\nedgelist <- collab_songs %>%\n  pivot_longer(\n    cols = starts_with(\"artist_id_\"),\n    names_to = \"variable\",\n    values_to = \"to_artist_id\"\n  )%>% \n  filter(!is.na(to_artist_id)) %>% # Remove the rows where the to_artist_id is blank \n  filter(artist_id != to_artist_id) %>%  # Remove the rows where from_artist and to_artist are the same \n  select(c(\"artist_id\", \"to_artist_id\", \"song_id\", \"song_name\")) %>%\n  left_join(artists, by = c(\"artist_id\" = \"id\")) %>%\n  select(c(\"artist_id\", \"to_artist_id\", \"song_id\", \"song_name\", \"name\")) %>%\n  left_join(artists, by = c(\"to_artist_id\" = \"id\")) %>% \n  select(c(\"artist_id\", \"to_artist_id\", \"song_id\", \"song_name\", \"name.x\", \"name.y\", \"region_category\"))\n  \n              \n# Change the name of columns\ncolnames(edgelist) <- c(\"From\", \"To\", \"song_id\", \"song_name\", \"From_artists\", \"To_artists\", \"Collab_region1\")\n\n# Add new columns of collaboration types\nedgelist <- edgelist %>% mutate(\n  Collab_region2 = case_when(\n    Collab_region1 == \"K-pop\" ~ \"Domestic/Unknown\",\n    TRUE ~ \"International\"\n  )\n)\n\n# Add a new column of release year\nedgelist <- edgelist %>% \n  left_join(song_detail, by = c(\"song_id\" = \"id\")) %>%\n  select(c(\"From\", \"To\", \"song_id\", \"song_name\", \"From_artists\", \"To_artists\", \"Collab_region1\", \"Collab_region2\", \"release_year\", \"popularity\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert edgelist into a graph\ncollab.net <- igraph::graph_from_data_frame(edgelist, directed = FALSE, vertices = artists)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setting the attributes\n\n# # For visualization\n# ## color\nartists <- artists %>% mutate(\n  color_region_category = case_when(\n    region_category == \"K-pop\" ~ \"#FFFFE1\",\n    region_category == \"Latin\" ~ \"darkgreen\",\n    region_category == \"South East Asia\" ~ \"#FDCCCC\",\n    region_category == \"East Asia\" ~ \"#920002\",\n    region_category == \"Europe\" ~ \"#ABD7E6\",\n    region_category == \"US or Other\" ~ \"deepskyblue3\",\n    TRUE ~ \"darkgrey\" ),\n  color_kpop = case_when(\n    kpop == \"yes\" ~ \"#FFFFE1\",\n    TRUE ~ \"#010087\"\n  )\n)\n\n\n\nV(collab.net)$color <- artists$color_region_category\n# \n# \n# V(collab.net)$name_kpop_top <- artists$show_name_kpop_top\n# V(collab.net)$name_followers <- artists$show_name_followers\n\n#edgelist <- edgelist %>% left_join(song_detail, by = c(\"song_id\"=\"id\"))\n```\n:::\n\n\nThis graph contains 1519 edges (collaboration songs) by 962 artists in the last 20 years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check attributes\n\nsummary(collab.net) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH ea9ef2f UN-- 962 1519 -- \n+ attr: name (v/c), top_kpop (v/n), genre (v/c), followers (v/n),\n| region_category (v/c), kpop (v/c), show_kpop_top (v/c), color (v/c),\n| song_id (e/c), song_name (e/c), From_artists (e/c), To_artists (e/c),\n| Collab_region1 (e/c), Collab_region2 (e/c), release_year (e/n),\n| popularity (e/n)\n```\n:::\n\n```{.r .cell-code}\nigraph::vertex_attr_names(collab.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"            \"top_kpop\"        \"genre\"           \"followers\"      \n[5] \"region_category\" \"kpop\"            \"show_kpop_top\"   \"color\"          \n```\n:::\n\n```{.r .cell-code}\nigraph::edge_attr_names(collab.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"song_id\"        \"song_name\"      \"From_artists\"   \"To_artists\"    \n[5] \"Collab_region1\" \"Collab_region2\" \"release_year\"   \"popularity\"    \n```\n:::\n:::\n\n\n# (Total) Overview of K-pop collaboration network\nThis is the graph of the last 20 years' K-pop collaboration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(collab.net,\n     vertex.label = NA,\n     arrow.mode=\"-\",\n     vertex.size = log(V(collab.net)$followers) * 0.4,\n     vertex.label.cex = .4,\n     vertex.label.color = \"black\",\n     vertex.frame.color = 'lightgrey',\n     vertex.label.dist = 0,\n     frame.width = 0,\n     color = V(collab.net)$color_region_category,\n     main = \"K pop collaboration network for the last 20 years\",\n     ref = \"The size of the circles means the popularity\"\n     )\n\nlegend(\n  \"bottomright\",\n  legend = c(\"K-pop\", \"Latin\", \"East Asia\", \"South East Asia\", \"Europe\", \"US or Other\", \"Unknown\"),\n  pt.bg  = c(\"#FFFFE1\", \"darkgreen\", \"#920002\",\"#FDCCCC\", \"#ABD7E6\", \"deepskyblue3\", \"darkgrey\"),\n  pch    = 21,\n  cex    = 1,\n  bty    = \"n\",\n  title  = \"Genre\"\n  )\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n# Network overview\n\n## Nodes and Edges\nAs mentioned, this network consists of 962 nodes (artists) and 1519 edges. The number of edges and the number of songs are not the same because one song can have more than 2 artists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(vcount(collab.net))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 962\n```\n:::\n\n```{.r .cell-code}\nprint(ecount(collab.net))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1519\n```\n:::\n:::\n\n## Density and transitivity\nDensity and transitivity of K-pop collaboration network is not high. \n\n::: {.cell}\n\n```{.r .cell-code}\n# Density\nigraph::edge_density(collab.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.003286165\n```\n:::\n\n```{.r .cell-code}\n# Transitivity\ntransitivity(collab.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02449146\n```\n:::\n:::\n\n## Degree\nThis is analysis on nodes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes <- data.frame(\n  name = V(collab.net)$name,\n  total.degree = degree(collab.net, mode = 'total'),\n  eigen.centrality = evcent(collab.net)$vector)\n\n\nlibrary(reshape2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'reshape2'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    smiths\n```\n:::\n\n```{.r .cell-code}\nnodes %>% melt %>% \n  ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = .2, bw = 5) +\n  ggtitle('Degree Distribution')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing name as id variables\n```\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## Dyad Census\nIt is expected that there is no asymmetry dyad because collaboration network is NOT directed. There are quite many null dyads, meaning that there are many artists that don't work together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndyad.census(collab.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 1199\n\n$asym\n[1] 0\n\n$null\n[1] 461042\n```\n:::\n:::\n\n## Triad Census\nMost triads are empty because when artist A works with artist B, they don't work with the same artists. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntriad.labels <- c(\"A,B,C, the empty graph.\",\n                  \"A->B, C, the graph with a single directed edge.\",\n                  \"A<->B, C, the graph with a mutual connection between two vertices.\",\n                  \"A<-B->C, the out-star.\",\n                  \"A->B<-C, the in-star.\",\n                  \"A->B->C, directed line.\",\"A<->B<-C.\",\n                  \"A<->B->C.\",\n                  \"A->B<-C, A->C.\",\n                  \"A<-B<-C, A->C.\",\n                  \"A<->B<->C.\",\n                  \"A<-B->C, A<->C.\",\n                  \"A->B<-C, A<->C.\",\n                  \"A->B->C, A<->C.\",\n                  \"A->B<->C, A<->C.\",\n                  \"A<->B<->C, A<->C, the complete graph.\")\n\ntriad.census.data <- data.frame(label = triad.labels, collab.net = triad.census(collab.net)) %>% melt\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in triad.census(collab.net): At core/misc/motifs.c:1165 : Triad census\ncalled on an undirected graph.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing label as id variables\n```\n:::\n\n```{.r .cell-code}\ncolnames(triad.census.data) <- c('triad', 'network', 'value')\ntriad.census.data %>% ggplot(aes(x = value, y = triad, fill = network)) + geom_bar(stat = 'identity', position = 'dodge')\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Transitivity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes$transitivity <- transitivity(collab.net, type = 'local')\n\nmelt(nodes) %>% filter(variable == 'transitivity' | variable == 'weighted.transitivity') %>% \n  ggplot(aes(x = value, fill = variable, color = variable)) + geom_density(alpha = 0.2) +\n  ggtitle('Transitivity Distribution')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing name as id variables\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 688 rows containing non-finite values (stat_density).\n```\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n## Component Structure\nThere are more than 110 components in this network. Most of them have members less than 25.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc.collab.net <- cluster_walktrap(collab.net)\nmember <- membership(wc.collab.net)\n\nnodes$member <- member\ntable(member) %>% melt %>% ggplot + geom_bar(aes(x = reorder(member, - value), y = value, fill = factor(member)), stat = 'identity')\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n# Closer look \n\nSince the graph of 20 years doesn't give information about how K-pop collaboration has evolved so I analyzed the graph by year.\nThere are few collaboration songs before 2005, so from here I will limit my analysis to the time span from 2005 till present (as of May 17, 2023).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a graph for each year\n\ngraph_from_data_frame_with_all_vertices <- function(df, vertices) {\n  # Create a data frame with all possible edges between vertices\n  unique_vertices <- unique(c(df$From, df$To))\n  artists_period <- artists[artists$id %in% unique_vertices, ]\n  # Create the graph with all vertices and existing edges\n  graph <- graph_from_data_frame(df, directed = FALSE, vertices = artists_period)\n  return(graph)\n}\n\n\ngraphs_year <- lapply(2006:2023, function(x) graph_from_data_frame_with_all_vertices(df = edgelist[edgelist$release_year == x, ], vertices = artists))\n\nperiods <- c(2006:2023)\n\n# for (i in 1:length(graphs_year)) {\n#   V(graphs_year[[i]])$color <- V(graphs_year[[i]])$color_region_category\n#   plot(graphs_year[[i]], \n#      vertex.label = V(graphs_year[[i]])$show_kpop_top,\n#      arrow.mode=\"-\",\n#      vertex.size = log(V(graphs_year[[i]])$followers) * 0.7,\n#      vertex.label.cex = .8,\n#      vertex.label.color = \"black\",\n#      vertex.label.dist = 0,\n#      frame.width = 0,\n#      color = V(graphs_year[[i]])$color_region_category,\n#      main = paste0(\"Collaboration by K-pop top artists \", periods[[i]])\n#      )\n# \n#   legend(\n#     \"bottomright\",\n#     legend = c(\"K-pop\", \"Latin\", \"East Asia\", \"South East Asia\", \"Europe\", \"US or Other\", \"Unknown\"),\n#     pt.bg  = c(\"#FFFFE1\", \"darkgreen\", \"#920002\",\"#FDCCCC\", \"#ABD7E6\", \"#010087\", \"darkgrey\"),\n#     pch    = 21,\n#     cex    = 1,\n#     bty    = \"n\",\n#     title  = \"Genre\"\n#     )\n# }\n\ngraph_stats <- data.frame(year = 2006:2023, \n                          num_nodes = numeric(length(2006:2023)), \n                          num_edges = numeric(length(2006:2023)), \n                          num_songs = numeric(length(2006:2023)),\n                          artists_per_song = numeric(length(2006:2023)),\n                          centralization = numeric(length(2006:2023)), \n                          density = numeric(length(2006:2023)), \n                          transitivity = numeric(length(2006:2023))\n)\n\n# Loop through each year and calculate the desired graph statistics\nfor (i in 1:length(graphs_year)) {\n  graph <- graphs_year[[i]]\n  \n  # Fill in the corresponding row of the data frame with the calculated statistics\n  graph_stats[i, \"num_nodes\"] <- vcount(graph)\n  graph_stats[i, \"num_edges\"] <- ecount(graph)\n  \n  song_ids <- E(graph)$song_id\n  num_unique_songs <- length(unique(song_ids))\n  graph_stats[i, \"num_songs\"] <- num_unique_songs\n\n  \n  graph_stats[i, \"centralization\"] <- centr_degree(graph)$centralization\n  graph_stats[i, \"density\"] <- graph.density(graph)\n  graph_stats[i, \"transitivity\"] <- transitivity(graph, type = 'global')\n\n  \n}\n\ncollab_by_years <- edgelist %>%\n  group_by(release_year) %>%\n  summarize(\n    popularity = mean(popularity),\n    K_Pop = sum(Collab_region1 == \"K-pop\"),\n    US_Other = sum(Collab_region1 == \"US or Other\"),\n    E_Asia = sum(Collab_region1 == \"East Asia\"),\n    SE_Asia = sum(Collab_region1 == \"South East Asia\"),\n    Latino = sum(Collab_region1 == \"Latino\"),\n    Europe = sum(Collab_region1 == \"Europe\"),\n    Unknown = sum(Collab_region1 == \"Unknown\")\n    )\n\n\ngraph_stats <- graph_stats %>% left_join(collab_by_years, by = c(\"year\" = \"release_year\"))%>%\n  mutate(song_per_kpop_artists = num_songs/`K_Pop`)\n\ngraph_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   year num_nodes num_edges num_songs artists_per_song centralization\n1  2006         9         6         6                0     0.33333333\n2  2007         4         2         2                0     0.00000000\n3  2008        18        12         9                0     0.09803922\n4  2009        34        35        25                0     0.18003565\n5  2010        39        31        26                0     0.11605938\n6  2011        53        50        32                0     0.13679245\n7  2012        69        56        49                0     0.07907076\n8  2013        71        53        42                0     0.06438632\n9  2014        96        75        62                0     0.07828947\n10 2015       128       120        88                0     0.16633858\n11 2016       142       142       107                0     0.07801418\n12 2017       133       120        96                0     0.12269310\n13 2018       125       126        94                0     0.12083871\n14 2019       154       166       121                0     0.28002716\n15 2020       190       202       130                0     0.14747981\n16 2021       154       132       101                0     0.04108310\n17 2022       130       107        87                0     0.04925462\n18 2023        94        78        40                0     0.32624113\n      density transitivity popularity K_Pop US_Other E_Asia SE_Asia Latino\n1  0.16666667   0.00000000   16.83333     4        2      0       0      0\n2  0.33333333          NaN   10.00000     0        0      1       0      0\n3  0.07843137   0.00000000   12.58333     4        4      0       0      0\n4  0.06238859   0.00000000   17.74286    14        5      1       0      0\n5  0.04183536   0.00000000   18.58065    19        4      0       0      0\n6  0.03628447   0.00000000   17.38000    26        6      0       0      0\n7  0.02387042   0.00000000   21.44643    28       12      1       0      0\n8  0.02132797   0.00000000   19.01887    29        8      0       0      0\n9  0.01644737   0.02654867   23.40000    50        7      0       0      0\n10 0.01476378   0.01929260   23.28333    72       17      0       0      0\n11 0.01418440   0.03114187   26.70423    90       26      2       0      0\n12 0.01367054   0.02158273   30.47500    64       34      3       0      0\n13 0.01625806   0.03191489   28.69841    56       40      3       1      4\n14 0.01409048   0.01601423   31.20482    82       55      0       2      3\n15 0.01125035   0.00000000   32.79208    93       54     19       5      0\n16 0.01120448   0.00000000   37.82576    41       58      4       3      3\n17 0.01276088   0.02238806   39.60748    34       51      4       1      1\n18 0.01784489   0.00000000   46.20513    31       17      1       1      3\n   Europe Unknown song_per_kpop_artists\n1       0       0              1.500000\n2       0       1                   Inf\n3       0       4              2.250000\n4       0      15              1.785714\n5       0       8              1.368421\n6       0      18              1.230769\n7       0      15              1.750000\n8       0      16              1.448276\n9       0      18              1.240000\n10      0      31              1.222222\n11      0      24              1.188889\n12      1      18              1.500000\n13      2      20              1.678571\n14      5      19              1.475610\n15      2      29              1.397849\n16      2      21              2.463415\n17      2      14              2.558824\n18      1      24              1.290323\n```\n:::\n\n```{.r .cell-code}\n# (3 years moving average range) Closer look: How does the network change every year\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a plot with a bar chart and a line chart\ngraph_stats %>%\n  pivot_longer(cols = c(\"K_Pop\", \"US_Other\", \"E_Asia\", \"SE_Asia\", \"Latino\", \"Europe\", \"Unknown\"), names_to = \"collab_region\") %>%\n  mutate(collab_region = factor(collab_region, levels = c(\"K_Pop\", \"US_Other\", \"E_Asia\", \"SE_Asia\", \"Latino\", \"Europe\", \"Unknown\"))) %>%\n  ggplot(aes(x = year)) +\n  geom_bar(aes(y = value, fill = collab_region), stat = \"identity\") +\n  labs(y = \"Number\", x = \"year\", title = \"The number of K-pop collaboration songs\", sub = \"After around 2017 the number of international collaboration songs increased.\")  +\n  scale_color_manual(\" \", values = c(\"num_edges\" = \"black\")) +\n  scale_fill_manual(\"Collab Region\", values = c(\"K_Pop\" = \"#FFFFE1\", \"Latino\" = \"darkgreen\", \"E_Asia\" = \"#920002\",\n                                               \"SE_Asia\" = \"#FDCCCC\", \"Europe\" = \"#ABD7E6\", \"US_Other\" = \"#010087\",\n                                               \"Unknown\" = \"darkgrey\"))\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 93\n $ line                      :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                      :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                      :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                     : NULL\n $ aspect.ratio              : NULL\n $ axis.title                : NULL\n $ axis.title.x              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top          :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom       : NULL\n $ axis.title.y              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left         : NULL\n $ axis.title.y.right        :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top           :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom        : NULL\n $ axis.text.y               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left          : NULL\n $ axis.text.y.right         :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                :List of 6\n  ..$ colour       : chr \"grey20\"\n  ..$ size         : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.ticks.x              : NULL\n $ axis.ticks.x.top          : NULL\n $ axis.ticks.x.bottom       : NULL\n $ axis.ticks.y              : NULL\n $ axis.ticks.y.left         : NULL\n $ axis.ticks.y.right        : NULL\n $ axis.ticks.length         : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x       : NULL\n $ axis.ticks.length.x.top   : NULL\n $ axis.ticks.length.x.bottom: NULL\n $ axis.ticks.length.y       : NULL\n $ axis.ticks.length.y.left  : NULL\n $ axis.ticks.length.y.right : NULL\n $ axis.line                 :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ size         : 'rel' num 1\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.line.x               : NULL\n $ axis.line.x.top           : NULL\n $ axis.line.x.bottom        : NULL\n $ axis.line.y               : NULL\n $ axis.line.y.left          : NULL\n $ axis.line.y.right         : NULL\n $ legend.background         :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : logi NA\n  ..$ size         : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.margin             : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing            : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x          : NULL\n $ legend.spacing.y          : NULL\n $ legend.key                : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size           : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height         : NULL\n $ legend.key.width          : NULL\n $ legend.text               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.align         : NULL\n $ legend.title              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.align        : NULL\n $ legend.position           : chr \"right\"\n $ legend.direction          : NULL\n $ legend.justification      : chr \"center\"\n $ legend.box                : NULL\n $ legend.box.just           : NULL\n $ legend.box.margin         : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background     : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing        : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ panel.background          :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : logi NA\n  ..$ size         : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ panel.border              : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ panel.spacing             : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ panel.spacing.x           : NULL\n $ panel.spacing.y           : NULL\n $ panel.grid                :List of 6\n  ..$ colour       : chr \"grey92\"\n  ..$ size         : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ panel.grid.major          : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ panel.grid.minor          : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ panel.grid.major.x        : NULL\n $ panel.grid.major.y        : NULL\n $ panel.grid.minor.x        : NULL\n $ panel.grid.minor.y        : NULL\n $ panel.ontop               : logi FALSE\n $ plot.background           :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : chr \"white\"\n  ..$ size         : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ plot.title                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 1.2\n  ..$ hjust        : num 0\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.title.position       : chr \"panel\"\n $ plot.subtitle             :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 5.5points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.caption              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : num 1\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 5.5points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.caption.position     : chr \"panel\"\n $ plot.tag                  :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 1.2\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ plot.tag.position         : chr \"topleft\"\n $ plot.margin               : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ strip.background          :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : 'rel' num 2\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ strip.background.x        : NULL\n $ strip.background.y        : NULL\n $ strip.placement           : chr \"inside\"\n $ strip.text                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey10\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 4.4points 4.4points 4.4points 4.4points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ strip.text.x              : NULL\n $ strip.text.y              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ strip.switch.pad.grid     : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ strip.switch.pad.wrap     : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ strip.text.y.left         :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n:::\n:::\n\nThis graph shows that around 2012, the number of collaboration songs among K-pop artists was limited, with few international collaborations. The network is sparse In 2014, the number of K-pop collaborations started increasing with more Western collaborations. Between 2015 and 2020, K-pop experienced significant growth in terms of the number and types of\ncollaborations. The collaborations werenot limited to the US-based artists, but to small numbers of Latino, East-Asian, South East Asian, and Europe based artists. After 2021, the number of collaborations per year is decreased, and the\nproportion of collaborations involving K-pop artists with artists from the US or countries other than Korea has been\nincreasing.\n\n# (By regime) \nThe graph above illustrates that collaborations in K-pop have different characteristics depending on the era. Taking into account the aforementioned features and significant milestones in the history of K-pop, such as the 2012 breakout with \"Gangnam Style\" and the major advancement in the American market by BTS in 2017, I have decided to divide the period from 2005 to 2023 into four eras: 2005-2011, 2012-2016, 2017-2020, and 2021-2023.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedgelist <- edgelist %>% \n  mutate(\n    regime = case_when(\n      release_year < 2012 ~ \"2005-2011\",\n      release_year >= 2012 & release_year < 2017 ~ \"2012-2016\",\n      release_year >= 2017 & release_year < 2021 ~ \"2017-2020\",\n      TRUE ~ \"2021-\"\n    )) \n\nedgelist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,519 × 11\n   From    To    song_id song_…¹ From_…² To_ar…³ Colla…⁴ Colla…⁵ relea…⁶ popul…⁷\n   <chr>   <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>\n 1 3Nrfpe… 1oSP… 5qyjy0… Angel … BTS     Jimin   K-pop   Domest…    2023      79\n 2 3Nrfpe… 164U… 5qyjy0… Angel … BTS     JVKE    US or … Intern…    2023      79\n 3 3Nrfpe… 46SH… 5qyjy0… Angel … BTS     Kodak … Latino  Intern…    2023      79\n 4 3Nrfpe… 0Erz… 5qyjy0… Angel … BTS     NLE Ch… US or … Intern…    2023      79\n 5 3Nrfpe… 7tjV… 5qyjy0… Angel … BTS     Muni L… US or … Intern…    2023      79\n 6 3Nrfpe… 6HaG… 1RDvyO… Dreame… BTS     Jung K… K-pop   Domest…    2022      86\n 7 3Nrfpe… 5C01… 1RDvyO… Dreame… BTS     FIFA S… US or … Intern…    2022      86\n 8 3Nrfpe… 5CiG… 0xzI1K… Bad De… BTS     benny … US or … Intern…    2022      78\n 9 3Nrfpe… 7hJc… 0xzI1K… Bad De… BTS     Snoop … US or … Intern…    2022      78\n10 3Nrfpe… 6VuM… 0mBP9X… Left a… BTS     Charli… US or … Intern…    2022      82\n# … with 1,509 more rows, 1 more variable: regime <chr>, and abbreviated\n#   variable names ¹​song_name, ²​From_artists, ³​To_artists, ⁴​Collab_region1,\n#   ⁵​Collab_region2, ⁶​release_year, ⁷​popularity\n```\n:::\n\n```{.r .cell-code}\n#E(collab.net)$period <- edgelist$period\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split the edgelist dataframe into 4 groups based on \"period\"\n\nedgelist_list <- split(edgelist, edgelist$regime)\n\n# convert each element of the list into a separate dataframe\n\ngraphs <- list()\n\n\nfor (i in seq_along(edgelist_list)) {\n  assign(paste0(\"edgelist_\", names(edgelist_list)[i]), edgelist_list[[i]])\n  \n  unique_vertices <- unique(c(edgelist_list[[i]]$From, edgelist_list[[i]]$To))\n  artists_period <- artists[artists$id %in% unique_vertices, ]\n  \n  # Create the graph from the filtered edgelist and vertices\n  graph <- graph_from_data_frame(edgelist_list[[i]], directed = FALSE, vertices = artists_period)\n\n  # Append the graph to the list of graphs\n  graphs[[i]] <- graph\n} \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assigning visualization attributes\n\nregime <- c(\"2005-2011\", \"2012-2016\", \"2017-2020\", \"2021\")\n\nfor (i in 1:length(graphs)) {\n  V(graphs[[i]])$color <- V(graphs[[i]])$color_region_category\n  plot(graphs[[i]], \n     vertex.label = NA,\n     arrow.mode=\"-\",\n     vertex.size = log(V(graphs[[i]])$followers) * 0.7,\n     vertex.label.cex = .6,\n     vertex.label.color = \"black\",\n     vertex.label.dist = 0,\n     vertex.frame.color = 'lightgrey',\n     frame.width = 0,\n     color = V(graphs[[i]])$color_region_category,\n     main = paste0(\"Collaboration by K-pop top artists\\n\", regime[[i]])\n     )\n  \n  legend(\n    \"bottomright\",\n    legend = c(\"K-pop\", \"Latin\", \"East Asia\", \"South East Asia\", \"Europe\", \"US or Other\", \"Unknown\"),\n    pt.bg  = c(\"#FFFFE1\", \"darkgreen\", \"#920002\",\"#FDCCCC\", \"#ABD7E6\", \"deepskyblue3\", \"darkgrey\"),\n    pch    = 21,\n    cex    = 1,\n    bty    = \"n\",\n    title  = \"Genre\"\n    )\n}\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-39-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-39-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-39-4.png){width=672}\n:::\n:::\n\n\n## Overview: How the collaboration patterns have changed over time?\n\n1.  Between 2006 and 2010, the number of collaboration songs among K-pop artists was limited, with few international collaborations with artists outside of South Korea. Additionally, the network was sparse and disconnected.\n\n2.  From 2011 to 2015, the number of collaboration songs slightly increased, with more international collaborations and a more connected network.\n\n3.  Between 2016 and 2020, K-pop experienced significant growth in terms of the number and types of collaborations. Notably, BTS, G(I)DLE, and Blackpink have a large number of international collaboration songs.\n\n4.  In 2021, the number of collaboration songs is not as large as that of 2016-2020 due to the shorter time span, but the proportion of international collaborations appears to be higher.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab_by_regimes <- edgelist %>% \n  group_by(regime) %>%\n  summarize(\n    popularity = mean(popularity),\n    K_Pop = sum(Collab_region1 == \"K-pop\"),\n    US_Other = sum(Collab_region1 == \"US or Other\"),\n    E_Asia = sum(Collab_region1 == \"East Asia\"),\n    SE_Asia = sum(Collab_region1 == \"South East Asia\"),\n    Latino = sum(Collab_region1 == \"Latino\"),\n    Europe = sum(Collab_region1 == \"Europe\"),\n    Unknown = sum(Collab_region1 == \"Unknown\")\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedgelist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,519 × 11\n   From    To    song_id song_…¹ From_…² To_ar…³ Colla…⁴ Colla…⁵ relea…⁶ popul…⁷\n   <chr>   <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>\n 1 3Nrfpe… 1oSP… 5qyjy0… Angel … BTS     Jimin   K-pop   Domest…    2023      79\n 2 3Nrfpe… 164U… 5qyjy0… Angel … BTS     JVKE    US or … Intern…    2023      79\n 3 3Nrfpe… 46SH… 5qyjy0… Angel … BTS     Kodak … Latino  Intern…    2023      79\n 4 3Nrfpe… 0Erz… 5qyjy0… Angel … BTS     NLE Ch… US or … Intern…    2023      79\n 5 3Nrfpe… 7tjV… 5qyjy0… Angel … BTS     Muni L… US or … Intern…    2023      79\n 6 3Nrfpe… 6HaG… 1RDvyO… Dreame… BTS     Jung K… K-pop   Domest…    2022      86\n 7 3Nrfpe… 5C01… 1RDvyO… Dreame… BTS     FIFA S… US or … Intern…    2022      86\n 8 3Nrfpe… 5CiG… 0xzI1K… Bad De… BTS     benny … US or … Intern…    2022      78\n 9 3Nrfpe… 7hJc… 0xzI1K… Bad De… BTS     Snoop … US or … Intern…    2022      78\n10 3Nrfpe… 6VuM… 0mBP9X… Left a… BTS     Charli… US or … Intern…    2022      82\n# … with 1,509 more rows, 1 more variable: regime <chr>, and abbreviated\n#   variable names ¹​song_name, ²​From_artists, ³​To_artists, ⁴​Collab_region1,\n#   ⁵​Collab_region2, ⁶​release_year, ⁷​popularity\n```\n:::\n\n```{.r .cell-code}\ngraph_stats_regimes <- data.frame(\n                          regime = c(\"2005-2011\", \"2012-2016\", \"2017-2020\", \"2021-\"),\n                          start_year = c(2006, 2013, 2017, 2021),\n                          end_year = c(2011, 2016, 2020, 2023),\n                          num_nodes = numeric(length(regime)), \n                          num_edges = numeric(length(regime)), \n                          num_songs = numeric(length(regime)),\n                          num_kpop_artists = numeric(length(regime)),\n                          num_no_kpop_artists = numeric(length(regime)),\n                          percent_no_kpop_artitst = numeric(length(regime)),\n                          artists_per_song = numeric(length(regime)),\n                          centralization = numeric(length(regime)), \n                          density = numeric(length(regime)), \n                          transitivity = numeric(length(regime))\n)\ngraph_stats_regimes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     regime start_year end_year num_nodes num_edges num_songs num_kpop_artists\n1 2005-2011       2006     2011         0         0         0                0\n2 2012-2016       2013     2016         0         0         0                0\n3 2017-2020       2017     2020         0         0         0                0\n4     2021-       2021     2023         0         0         0                0\n  num_no_kpop_artists percent_no_kpop_artitst artists_per_song centralization\n1                   0                       0                0              0\n2                   0                       0                0              0\n3                   0                       0                0              0\n4                   0                       0                0              0\n  density transitivity\n1       0            0\n2       0            0\n3       0            0\n4       0            0\n```\n:::\n\n```{.r .cell-code}\nregime\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2005-2011\" \"2012-2016\" \"2017-2020\" \"2021\"     \n```\n:::\n\n```{.r .cell-code}\n# Loop through each year and calculate the desired graph statistics\n\nfor (i in 1:length(regime)) {\n  start_year <- graph_stats_regimes$start_year[i]\n  end_year <- graph_stats_regimes$end_year[i]\n\n  \n  # Subset the data for the current 3-year span\n  subset_data <- edgelist[edgelist$release_year %in% c(start_year:end_year), ]\n  print(start_year)\n  print(end_year)\n  \n  # Create the graph for the current 3-year span\n  graph <- graph_from_data_frame_with_all_vertices(df = subset_data, vertices = artists)\n  \n  # Fill in the corresponding row of the data frame with the calculated statistics\n  graph_stats_regimes[i, \"num_nodes\"] <- vcount(graph)\n  graph_stats_regimes[i, \"num_edges\"] <- ecount(graph)\n  \n  song_ids <- E(graph)$song_id\n  num_unique_songs <- length(unique(song_ids))\n  graph_stats_regimes[i, \"num_songs\"] <- num_unique_songs\n  \n  kpop_values <- V(graph)$kpop\n  num_kpop <- sum(kpop_values == \"yes\")\n  graph_stats_regimes[i, \"num_kpop_artists\"] <- num_kpop\n  \n  graph_stats_regimes[i, \"num_no_kpop_artists\"] <- vcount(graph) - num_kpop\n  graph_stats_regimes[i, \"percent_no_kpop_artitst\"] <- (vcount(graph)-num_kpop)/vcount(graph)\n  \n  graph_stats_regimes[i, \"artists_per_song\"] <- vcount(graph)/num_unique_songs\n  \n  graph_stats_regimes[i, \"centralization\"] <- centr_degree(graph)$centralization\n  graph_stats_regimes[i, \"density\"] <- graph.density(graph)\n  graph_stats_regimes[i, \"transitivity\"] <- transitivity(graph, type = 'global')\n  \n  kpop_values <- V(graph)$kpop\n  num_kpop <- sum(kpop_values == \"yes\")\n  graph_stats_regimes[i, \"num_kpop_artists\"] <- num_kpop\n\n  \n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2006\n[1] 2011\n[1] 2013\n[1] 2016\n[1] 2017\n[1] 2020\n[1] 2021\n[1] 2023\n```\n:::\n\n```{.r .cell-code}\ngraph_stats_regimes %>%\n  left_join(collab_by_regimes) %>% \n  mutate(song_per_kpop_artists = num_songs/`K_Pop`)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"regime\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     regime start_year end_year num_nodes num_edges num_songs num_kpop_artists\n1 2005-2011       2006     2011       126       136       100               71\n2 2012-2016       2013     2016       324       390       299              190\n3 2017-2020       2017     2020       432       614       441              207\n4     2021-       2021     2023       318       317       228              141\n  num_no_kpop_artists percent_no_kpop_artitst artists_per_song centralization\n1                  55               0.4365079        1.2600000     0.08673016\n2                 134               0.4135802        1.0836120     0.07923403\n3                 225               0.5208333        0.9795918     0.20686173\n4                 177               0.5566038        1.3947368     0.14513025\n      density transitivity popularity K_Pop US_Other E_Asia SE_Asia Latino\n1 0.017269841  0.000000000   17.40845    71       21      4       0      0\n2 0.007453274  0.021097046   23.65471   269       70      3       0      0\n3 0.006595342  0.025306122   31.07003   295      183     25       8      7\n4 0.006289308  0.004087193   40.48896   106      126      9       5      7\n  Europe Unknown song_per_kpop_artists\n1      0      46              1.408451\n2      0     104              1.111524\n3     10      86              1.494915\n4      5      59              2.150943\n```\n:::\n\n```{.r .cell-code}\n# #graph_stats_regimes <- graph_stats_regimes %>% \n#   left_join(collab_by_regimes)%>%\n#   mutate(song_per_kpop_artists = num_songs/`K_Pop`)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the 3-year spans\n\n\n\n# for (i in 1:length(end_years)) {\n#   end_year <- end_years[i]\n#   start_year <- end_year - 2\n#   year <- end_year -1\n#   \n#   # Subset the data for the current 3-year span\n#   subset_data <- edgelist[edgelist$release_year %in% c(start_year:end_year), ]\n#   \n#   # Create the graph for the current 3-year span\n#   graph <- graph_from_data_frame_with_all_vertices(df = subset_data, vertices = artists)\n#   \n#   V(graph)$color <- V(graph)$color_region_category\n#   \n#   plot(graph,\n#        vertex.label = V(graph)$show_kpop_top,\n#        arrow.mode = \"-\",\n#        vertex.size = log(V(graph)$followers) * 0.7,\n#        vertex.label.cex = 0.6,\n#        vertex.label.color = \"black\",\n#        vertex.frame.color = 'lightgrey',\n#        vertex.label.dist = 0,\n#        frame.width = 0,\n#        color = V(graph)$color_region_category,\n#        main = paste0(\"Collaboration by K-pop top artists \", start_year, \"-\", end_year)\n#   )\n# \n# \n#   legend(\n#     \"bottomright\",\n#     legend = c(\"K-pop\", \"Latin\", \"East Asia\", \"South East Asia\", \"Europe\", \"US or Other\", \"Unknown\"),\n#     pt.bg  = c(\"#FFFFE1\", \"darkgreen\", \"#920002\",\"#FDCCCC\", \"#ABD7E6\", \"deepskyblue3\", \"darkgrey\"),\n#     pch    = 21,\n#     cex    = 1,\n#     bty    = \"n\",\n#     title  = \"Genre\"\n#     )\n# }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# end_years <- 2008:2023\n# graph_stats_3years <- data.frame(\n#                           start_year = 2006:2021,\n#                           end_year = 2008:2023, \n#                           year = 2007:2022,\n#                           num_nodes = numeric(length(2008:2023)), \n#                           num_edges = numeric(length(2008:2023)), \n#                           num_songs = numeric(length(2008:2023)),\n#                           num_kpop_artists = numeric(length(2008:2023)),\n#                           num_no_kpop_artists = numeric(length(2008:2023)),\n#                           percent_no_kpop_artitst = numeric(length(2008:2023)),\n#                           artists_per_song = numeric(length(2008:2023)),\n#                           centralization = numeric(length(2008:2023)), \n#                           density = numeric(length(2008:2023)), \n#                           transitivity = numeric(length(2008:2023))\n# )\n# \n# # Loop through each year and calculate the desired graph statistics\n# \n# for (i in 1:length(end_years)) {\n#   end_year <- end_years[i]\n#   start_year <- end_year - 2\n#   \n#   # Subset the data for the current 3-year span\n#   subset_data <- edgelist[edgelist$release_year %in% c(start_year:end_year), ]\n#   \n#   # Create the graph for the current 3-year span\n#   graph <- graph_from_data_frame_with_all_vertices(df = subset_data, vertices = artists)\n#   \n#   # Fill in the corresponding row of the data frame with the calculated statistics\n#   graph_stats_3years[i, \"num_nodes\"] <- vcount(graph)\n#   graph_stats_3years[i, \"num_edges\"] <- ecount(graph)\n#   \n#   song_ids <- E(graph)$song_id\n#   num_unique_songs <- length(unique(song_ids))\n#   graph_stats_3years[i, \"num_songs\"] <- num_unique_songs\n#   \n#   kpop_values <- V(graph)$kpop\n#   num_kpop <- sum(kpop_values == \"yes\")\n#   graph_stats_3years[i, \"num_kpop_artists\"] <- num_kpop\n#   \n#   graph_stats_3years[i, \"num_no_kpop_artists\"] <- vcount(graph) - num_kpop\n#   graph_stats_3years[i, \"percent_no_kpop_artitst\"] <- (vcount(graph)-num_kpop)/vcount(graph)\n#   \n#   graph_stats_3years[i, \"artists_per_song\"] <- vcount(graph)/num_unique_songs\n#   \n#   graph_stats_3years[i, \"centralization\"] <- centr_degree(graph)$centralization\n#   graph_stats_3years[i, \"density\"] <- graph.density(graph)\n#   graph_stats_3years[i, \"transitivity\"] <- transitivity(graph, type = 'global')\n#   \n#   kpop_values <- V(graph)$kpop\n#   num_kpop <- sum(kpop_values == \"yes\")\n#   graph_stats_3years[i, \"num_kpop_artists\"] <- num_kpop\n#   \n#   \n#   \n# }\n# \n# graph_stats_3years\n```\n:::\n\n\n# How does the nature of collaboration change between 2017-2020 and 2021-?\n\nAs the first graph showed, the number of collaborations has decreased since 2021 after it peaked in 2020 even though the they are quite diverse with many US-based artists and a few East Asian, South East Asian, and Latino artists.\n\nHere, I will try to find out what has changed since 2021 and what caused this change.\n\nOne of the hypotheses is that as K-pop had established its international popularity by 2021, there was no longer a need for as many collaborations with international artists. Instead, artists relatively less popular whose main base is not South Korea started collaborating with K-pop artists to benefit from its popularity.\n\nIn Regime 3 (2017-2020) and Regime 4 (2021-), the relationship between K-pop artists and international artists in collaborations has changed. In Regime 3, K-pop artists often collaborated with internationally renowned artists. However, in Regime 4, this trend has shifted, and compared to Regime 3, there seems to be an increasing tendency for more popular K-pop artists to collaborate with relatively less famous non-Korean-based artists. This can be observed in the right graph above, where the slope becomes gentler, with the y-axis representing the popularity of international artists and the x-axis representing the popularity of K-pop artists.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanalysis <- edgelist %>% \n  filter(regime == \"2017-2020\" | regime == \"2021-\" & Collab_region2 == \"International\") %>%\n  select(-c(\"Collab_region1\", \"Collab_region2\")) %>%\n  left_join(artists %>% select(c(\"id\", \"followers\")), by = c(\"From\" = \"id\")) %>%\n  left_join(artists %>% select(c(\"id\", \"followers\")), by = c(\"To\" = \"id\")) \n\nanalysis <- analysis %>% \n  rename(\"Followers_of_Kpop_artists\" = \"followers.x\",\n         \"Followers_of_Intl_artists\" = \"followers.y\")\n\nanalysis %>% \n  filter(Followers_of_Kpop_artists < 2000000 & Followers_of_Intl_artists > 1000 & Followers_of_Intl_artists < 4000000) %>%\n  ggplot(aes(x = `Followers_of_Kpop_artists`, y = `Followers_of_Intl_artists`)) +\n  geom_point(color = \"steelblue\") +\n  geom_smooth(method=lm , color=\"darkblue\", fill=\"#69b3a2\", se=TRUE) +\n  geom_rug(col = \"steelblue\", alpha=0.1) +\n  \n  labs(x = \"The number of followers of K-pop artists\", y = \"The number of followers of International artists\", title = \"The popularity of artists who collaborated in K-pop songs\") +\n  facet_wrap(~ regime)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\nIn order to confirm this hypothesis more quantitatively, a regression model was used to examine the popularity of collaboration songs involving K-pop artists, the popularity of the K-pop artists themselves (measured by the number of followers on Spotify), and the popularity of international artists. (popularity of songs ~ popularity of K-pop artists who participated in the collaboration + popularity of international artists who participated in the collaboration).\n\n\nThe results showed that the influence of the popularity of K-pop\nartists and international artists on the popularity of collaboration songs was 2.9 and 3.9 (significant with p = 0.05), respectively, from 2017 to 2020. However, from 2021 onwards, these values became 4.8 and 3.08 (significant with p = 0.05), respectively, indicating a reversal in the impact of the popularity of K-pop artists and international artists on the popularity of collaboration song.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm.pop_reg3 <- lm(popularity ~ Followers_of_Kpop_artists + Followers_of_Intl_artists, data = analysis %>% filter(regime == \"2017-2020\"))\nlm.pop_reg4 <- lm(popularity ~ Followers_of_Kpop_artists + Followers_of_Intl_artists, data = analysis %>% filter(regime == \"2021-\"))\n\n\nprint(summary(lm.pop_reg3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = popularity ~ Followers_of_Kpop_artists + Followers_of_Intl_artists, \n    data = analysis %>% filter(regime == \"2017-2020\"))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-43.935  -9.397  -0.991   8.596  40.528 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)               2.893e+01  6.409e-01  45.144  < 2e-16 ***\nFollowers_of_Kpop_artists 3.899e-07  6.279e-08   6.209 9.84e-10 ***\nFollowers_of_Intl_artists 7.319e-07  1.810e-07   4.044 5.93e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 14.97 on 611 degrees of freedom\nMultiple R-squared:  0.1409,\tAdjusted R-squared:  0.1381 \nF-statistic: 50.09 on 2 and 611 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nprint(summary(lm.pop_reg4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = popularity ~ Followers_of_Kpop_artists + Followers_of_Intl_artists, \n    data = analysis %>% filter(regime == \"2021-\"))\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-35.89 -13.39   0.54  12.79  38.23 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)               3.428e+01  1.381e+00  24.821  < 2e-16 ***\nFollowers_of_Kpop_artists 4.781e-07  8.183e-08   5.842 1.96e-08 ***\nFollowers_of_Intl_artists 3.083e-07  1.215e-07   2.538   0.0119 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 17.9 on 208 degrees of freedom\nMultiple R-squared:  0.2222,\tAdjusted R-squared:  0.2148 \nF-statistic: 29.72 on 2 and 208 DF,  p-value: 4.44e-12\n```\n:::\n:::\n\n# Summary of evoluation of K-pop collaborations for last 20 years.\n\nIn summary, K-pop artists gained international popularity and a\nglobal audience partially due to collaborations with international artists starting in the mid-2010s. Since 2021,the number of collaboration songs has decreased. Besides, there has been a shift where artists outside of Korea are now collaborating with K-pop artists, leveraging their global popularity, to reach a broader audience.\n\n\n# Additional analysis\n## (Artists-based analysis) Who are the key artists?\n\nThe below are the top 10 artists with the highest eigenvector centrality. \nIt is interesting that they are not necessarily the most popular artists. For example BTS, BLACKPINK, or other more popular K-pop artists are not listed here. \n8 of them are K-Pop artists and the rest of them are Yultron, DJ based in Los Angeles, and Gray, a New York base band.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes <- data.frame(\n  name = V(collab.net)$name,\n  followers = V(collab.net)$followers,\n  region_category = V(collab.net)$region_category,\n  kpop = V(collab.net)$kpop,\n  degree = degree(collab.net, mode = 'total'),\n  transitivity = transitivity(collab.net, type = 'local'),\n  betweenness = betweenness(collab.net),\n  eigen_cent = eigen_centrality(collab.net, directed = F, scale = F)$vector)\n\nnodes %>% arrange(desc(eigen_cent)) %>% head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       name followers region_category kpop degree transitivity\nJay Park           Jay Park   1941923           K-pop  yes    171  0.007947639\nSik-K                 Sik-K    431030           K-pop  yes     84  0.035437431\nLoco                   Loco    379142           K-pop  yes     57  0.033868093\npH-1                   pH-1    372581           K-pop  yes     15  0.238095238\nUgly Duck         Ugly Duck      9671           K-pop  yes      9  1.000000000\nDJ Wegun           DJ Wegun     13768           K-pop  yes      9  0.000000000\nGRAY                   GRAY    282549           K-pop  yes     15  0.200000000\nHit-Boy             Hit-Boy     68444     US or Other   no      7          NaN\nYULTRON             YULTRON     34860     US or Other   no      7          NaN\nSimon Dominic Simon Dominic    442764           K-pop  yes      9  0.666666667\n              betweenness eigen_cent\nJay Park      118616.1730  0.6221463\nSik-K          55250.6056  0.3817554\nLoco           39472.8834  0.2740903\npH-1           12630.9924  0.2043511\nUgly Duck          0.0000  0.1870638\nDJ Wegun         474.1053  0.1763272\nGRAY            3819.0552  0.1550732\nHit-Boy            0.0000  0.1520206\nYULTRON            0.0000  0.1520206\nSimon Dominic   1598.8051  0.1454675\n```\n:::\n\n```{.r .cell-code}\n#nodes_stat_regime_list <- list()  # Create an empty list to store the dataframes\n\n# for (i in 1:length(graphs)) {\n#   nodes_stat_regime <- data.frame(\n#     genre = V(graphs[[i]])$genre,\n#     followers = V(graphs[[i]])$followers,\n#     region_category = V(graphs[[i]])$region_category,\n#     kpop = V(graphs[[i]])$kpop,\n#     degree = degree(graphs[[i]]),\n#     transitivity = transitivity(graphs[[i]], type = 'local'),\n#     betweenness = betweenness(graphs[[i]]),\n#     eigen_cent = eigen_centrality(graphs[[i]], directed = F, scale = F)$vector\n#     \n#   )\n#   \n#   nodes_stat_regime_list[[i]] <- nodes_stat_regime  # Store the dataframe in the list\n# }\n```\n:::\n\nMost nodes have a small eigenvector centrality, whch is less than 0.1. The nodes with a relatively bigger eigenvector centrality are K-pop artists and do not have many followers.\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes %>% \n  filter(eigen_cent < 0.4 & followers < 4000000) %>% #excluding outliers\n  ggplot(aes(x=followers, y=eigen_cent, color=region_category)) +\n  geom_point()+\n  scale_color_manual(\"region_category\", \n                     values = c(\"K-pop\" = \"#FFFFE1\", \n                                \"Latino\" = \"darkgreen\", \n                                \"East Asia\" = \"#920002\",\n                                \"Southeast Asia\" = \"#FDCCCC\", \n                                \"Europe\" = \"#ABD7E6\", \n                                \"US or Other\" = \"#010087\",                                      \"Unknown\" = \"darkgrey\"))\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\nThere is not a clear correlation between the number of collaboration songs and the artist's popularity.\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes %>% \n  filter(followers < 4000000) %>% #excluding outliers\n  ggplot(aes(x=followers, y=degree, color=region_category)) +\n  geom_point()+\n  scale_color_manual(\"region_category\", \n                     values = c(\"K-pop\" = \"#FFFFE1\", \n                                \"Latino\" = \"darkgreen\", \n                                \"East Asia\" = \"#920002\",\n                                \"Southeast Asia\" = \"#FDCCCC\", \n                                \"Europe\" = \"#ABD7E6\", \n                                \"US or Other\" = \"#010087\",                                      \"Unknown\" = \"darkgrey\"))\n```\n\n::: {.cell-output-display}\n![](Assignment_Kpop_network_Erika_Nagai_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a graph for each year\n\n# graph_from_data_frame_with_all_vertices <- function(df, vertices) {\n#   # Create a data frame with all possible edges between vertices\n#   unique_vertices <- unique(c(df$From, df$To))\n#   artists_period <- artists[artists$id %in% unique_vertices, ]\n#   # Create the graph with all vertices and existing edges\n#   graph <- graph_from_data_frame(df, directed = FALSE, vertices = artists_period)\n#   return(graph)\n# }\n# \n# \n# graphs_year <- lapply(2006:2023, function(x) graph_from_data_frame_with_all_vertices(df = edgelist[edgelist$release_year == x, ], vertices = artists))\n# \n# periods <- c(2006:2023)\n# \n# for (i in 1:length(graphs_year)) {\n#   V(graphs_year[[i]])$color <- V(graphs_year[[i]])$color_region_category\n#   plot(graphs_year[[i]], \n#      vertex.label = V(graphs_year[[i]])$show_kpop_top,\n#      arrow.mode=\"-\",\n#      vertex.size = log(V(graphs_year[[i]])$followers) * 0.7,\n#      vertex.label.cex = .8,\n#      vertex.label.color = \"black\",\n#      vertex.label.dist = 0,\n#      frame.width = 0,\n#      color = V(graphs_year[[i]])$color_region_category,\n#      main = paste0(\"Collaboration by K-pop top artists \", periods[[i]])\n#      )\n# \n#   legend(\n#     \"bottomright\",\n#     legend = c(\"K-pop\", \"Latin\", \"East Asia\", \"South East Asia\", \"Europe\", \"US or Other\", \"Unknown\"),\n#     pt.bg  = c(\"#FFFFE1\", \"darkgreen\", \"#920002\",\"#FDCCCC\", \"#ABD7E6\", \"#010087\", \"darkgrey\"),\n#     pch    = 21,\n#     cex    = 1,\n#     bty    = \"n\",\n#     title  = \"Genre\"\n#     )\n# }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# collab_by_years <- edgelist %>% \n#   group_by(release_year) %>%\n#   summarize(\n#     popularity = mean(popularity),\n#     K_Pop = sum(Collab_region1 == \"K-pop\"),\n#     US_Other = sum(Collab_region1 == \"US or Other\"),\n#     E_Asia = sum(Collab_region1 == \"East Asia\"),\n#     SE_Asia = sum(Collab_region1 == \"South East Asia\"),\n#     Latino = sum(Collab_region1 == \"Latino\"),\n#     Europe = sum(Collab_region1 == \"Europe\"),\n#     Unknown = sum(Collab_region1 == \"Unknown\")\n#     )\n# \n# summary(collab_by_years)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# graph_stats <- data.frame(year = 2006:2023, \n#                           num_nodes = numeric(length(2006:2023)), \n#                           num_edges = numeric(length(2006:2023)), \n#                           num_songs = numeric(length(2006:2023)),\n#                           artists_per_song = numeric(length(2006:2023)),\n#                           centralization = numeric(length(2006:2023)), \n#                           density = numeric(length(2006:2023)), \n#                           transitivity = numeric(length(2006:2023))\n# )\n# \n# # Loop through each year and calculate the desired graph statistics\n# for (i in 1:length(graphs_year)) {\n#   graph <- graphs_year[[i]]\n#   \n#   # Fill in the corresponding row of the data frame with the calculated statistics\n#   graph_stats[i, \"num_nodes\"] <- vcount(graph)\n#   graph_stats[i, \"num_edges\"] <- ecount(graph)\n#   \n#   song_ids <- E(graph)$song_id\n#   num_unique_songs <- length(unique(song_ids))\n#   graph_stats[i, \"num_songs\"] <- num_unique_songs\n# \n#   \n#   graph_stats[i, \"centralization\"] <- centr_degree(graph)$centralization\n#   graph_stats[i, \"density\"] <- graph.density(graph)\n#   graph_stats[i, \"transitivity\"] <- transitivity(graph, type = 'global')\n# \n#   \n# }\n# \n# graph_stats <- graph_stats %>% left_join(collab_by_years, by = c(\"year\" = \"release_year\"))%>%\n#   mutate(song_per_kpop_artists = num_songs/`K_Pop`)\n# \n# graph_stats\n```\n:::\n\n\n\n# Discussion\nThis network analysis was conducted to illustrate the general characteristics and changes in K-pop over the past roughly 20 years. The analysis revealed that K-pop has increased the number of collaborations, particularly with Western artists, since the mid-2010s. In the late 2010s, K-pop expanded its collaborations to include a diverse range of artists from Asia, Europe, and Latin America, reaching its peak in the number of collaborations in 2020. This suggests that K-pop aimed to approach markets outside of Asia and increase its international popularity, especially after the massive success of \"Gangnam Style\" in 2012. There is no evidence to prove, however, the increase in the number of collaborations with Latino artists after 2018 may be due to the huge hit of \"Despacito\" by Luis Fonsi in 2017.\n\nFrom 2021, the number of collaborations decreased, but the proportion of international collaborations surpassed collaborations between K-pop artists themselves. This indicates the presence of relatively less popular artists who are not based in Korea, but collaborate with internationally renowned K-pop artists to reach a wider audience.\n\nAccording to the linear regression model, the popularity of collaborative songs between 2017 and 2020 was influenced by the popularity of the international artists involved in the collaborations. However, from 2021 onwards, it was found that the popularity of K-pop artists had a greater impact.\n\nWhile this analysis represents one factor that can explain the recent prominence of K-pop, it lacks detailed analysis in terms of network analysis and has certain limitations in the data. For instance, community identification is limited. Due to the reliance on limited data primarily obtained from the Spotify API, it was not possible to analyze based on meaningful information such as the artists' affiliations with agencies. Additionally, the data used in this analysis reflects the popularity of songs and artists as of May 2023, as current and retrospective information is unavailable from the Spotify API.\n\nThe findings proposed by this analysis are believed to be worth researching further based on detailed data and analysis in the future.\n\n# Source\n\nKIM, K. H. (2021). Short History of K-Pop, K-Cinema, and K-Television. In Hegemonic Mimicry: Korean Popular Culture of the Twenty-First Century (pp. 35–84). Duke University Press. https://doi.org/10.2307/j.ctv1xrb6s6.5\n\nShin, H. (2009). Have you ever seen the Rain? And who’ll stop the Rain?: The globalizing project of Korean pop (K-pop). Inter-Asia Cultural Studies, 10(4), 507–523.\n\n\n\n",
    "supporting": [
      "Assignment_Kpop_network_Erika_Nagai_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}