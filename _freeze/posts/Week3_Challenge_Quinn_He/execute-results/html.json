{
  "hash": "b5d90038d6d8be2ae5e0588628631691",
  "result": {
    "markdown": "---\ntitle: \"Week 3 Challenge\"\nauthor: \"Quinn He \"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/23/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_3\n  - instructions\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwire <- read_excel(\"~/Documents/the-wire-network.xlsx\")\n\nmadoff <- read_csv(\"~/Documents/MADOFF.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 61 Columns: 62\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(1): ...1 dbl (16): Thema_Fund, Herald_Lux_Fund, Bank_Medici,\nPioneer_Alt_Investments,... lgl (45): HSBC_Holdings, Genevalor_Benbassat,\nPhoenix_Holdings, Capital_Bank...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n:::\n\n\nI read in these two data sets in case I want to play around with two different types. The madoff.ig is read in as a matrix. \n\n::: {.cell}\n\n```{.r .cell-code}\nmadmat <- as.matrix(madoff)\n\nmadoff.ig <- graph.data.frame(madmat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in graph.data.frame(madmat): In `d' `NA' elements were replaced with\nstring \"NA\"\n```\n:::\n:::\n\nConvert the data set into an igraph object\n\n::: {.cell}\n\n```{.r .cell-code}\nwire.ig <- graph_from_data_frame(wire, directed = FALSE)\n#wire.net <- as.network.data.frame(wire)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvcount(wire.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\necount(wire.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1106\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndyad.census(wire.ig)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in FUN(X[[i]], ...): as.edgelist.sna input must be an adjacency matrix/array, edgelist matrix, network, or sparse matrix, or list thereof.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntriad_census(wire.ig)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in triad_census(wire.ig): At core/misc/motifs.c:1165 : Triad census\ncalled on an undirected graph.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  35   0   0   0   0   0   0   0   0   0 126   0   0   0   0 125\n```\n:::\n:::\n\n\nCreating the dataframe\n\n::: {.cell}\n\n```{.r .cell-code}\nwire.nodes <- data.frame(names = V(wire.ig)$name, \n                         outdegree = degree(wire.ig, mode = \"out\"), \n                         indegree = degree(wire.ig, mode = \"in\"),\n                         totdegree = degree(wire.ig),\n                         eigen = eigen_centrality(wire.ig))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in degree(wire.ig, mode = \"out\"): unused argument (mode = \"out\")\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmadoff.nodes <- data.frame(names = V(madoff.ig)$name,\n    totdegree=igraph::degree(madoff.ig, loops=FALSE),\n    indegree=igraph::degree(madoff.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(madoff.ig, mode=\"out\", loops=FALSE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntriad.census(madmat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in triad.census(madmat): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n       003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U 120C 210\n[1,] 73810   0   0    0    0    0    0    0    0    0 396    0    0    0   0\n     300\n[1,]   0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvcount(madoff.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 62\n```\n:::\n\n```{.r .cell-code}\necount(madoff.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 61\n```\n:::\n:::\n\n\n\n## Degree\n\nIf you have not done it before, evaluate the structure of the network (number of edges and vertices, dyad and triad census, etc.).\n\nCompute the many measures of _degree_ of the network of your choice, most preferably directed. Create a data frame called `nodes` where each row corresponds to a node and each column to an attribute of the node, namely the id, name or label, and different measures of degree: total, out-degree, and in-degree. What is the average degree of the network?\n\nCompute the distributions of those measures (or histograms if your network is small). What does this tell us about the structure of the network?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(wire.nodes$outdegree)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in hist(wire.nodes$outdegree): object 'wire.nodes' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(wire.nodes$totdegree)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in hist(wire.nodes$totdegree): object 'wire.nodes' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(wire.nodes$indegree)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in hist(wire.nodes$indegree): object 'wire.nodes' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(madoff.nodes$totdegree)\n```\n\n::: {.cell-output-display}\n![](Week3_Challenge_Quinn_He_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(madoff.nodes$indegree)\n```\n\n::: {.cell-output-display}\n![](Week3_Challenge_Quinn_He_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(madoff.nodes$outdegree)\n```\n\n::: {.cell-output-display}\n![](Week3_Challenge_Quinn_He_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Density\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge_density(wire.ig, loops = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.15385\n```\n:::\n:::\n\nThe wire network is not too dense, but it is denser than the Madoff network below by a significant amount. The Madoff network is not dense meaning the nodes are not well connected at all. This may be good for Bernie Madoff because this would indicate he had a diverse array of clients who did not have much contact with one another. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge_density(madoff.ig, loops = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01586889\n```\n:::\n:::\n\n\n\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree? \n\n## Random Network\n\nCreate a random (Erdos-Renyi) network with the same number of nodes and edges than the network of your choice. On `igraph`, the necessary commands are `random.graph.game(n, p.or.m, type = c(\"gnp\", \"gnm\"), directed = FALSE, loops = FALSE)` (deprecated), `sample_gnp(n, p, directed = FALSE, loops = FALSE)` or `sample_gnm(n, m, directed = FALSE, loops = FALSE)`. The `p.or.m` argument is to specify the probability of an edge $p$ or the number of edges $m$.\n  \nCompare the densities, dyad and triad censuses, and degree distributions, with the measures of the network of your choice. Does the comparison us something about the network of your choice? \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nrandom.ig <- sample_gnm(62,61, loops =F, directed = F)\n\ndegree_distribution(random.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.09677419 0.33870968 0.27419355 0.16129032 0.06451613 0.04838710 0.01612903\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndyad_census(random.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 61\n\n$asym\n[1] 0\n\n$null\n[1] 1830\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvcount(random.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 62\n```\n:::\n:::\n\n\nThis random network is slightly more dense than the actual Madoff network, but only by 0.02. The new network also has the same number of vertices as the original network, but I am confused as to why there is 1830 null types in the dyad census. \n\n::: {.cell}\n\n```{.r .cell-code}\ngraph.density(random.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.03225806\n```\n:::\n:::\n",
    "supporting": [
      "Week3_Challenge_Quinn_He_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}