{
  "hash": "b26d63bf0616b875b73182dd18805f53",
  "result": {
    "markdown": "---\ntitle: \"Week 3 Challenge\"\nauthor: \"Ananya Pujary\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/06/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_3\n  - Ananya Pujary\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n\n## Degree\n\nI've chosen to work with the `got_distances.csv` dataset that provides information about the distances between regions in the GOT universe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_distances <-read_csv(\"../posts/_data/got/got_distances.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 200 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Region From, From, To, Mode, Notes\ndbl (1): Miles\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ngot_distances\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 × 6\n   `Region From` From          To               Miles Mode  Notes   \n   <chr>         <chr>         <chr>            <dbl> <chr> <chr>   \n 1 Westerlands   Casterly Rock the Golden Tooth   240 land  <NA>    \n 2 Westerlands   Casterly Rock Lannisport          40 land  <NA>    \n 3 Westerlands   Casterly Rock Kayce              100 land  <NA>    \n 4 Westerlands   Casterly Rock Kayce               12 water <NA>    \n 5 Westerlands   Casterly Rock Deep Den           240 land  Goldroad\n 6 Westerlands   Deep Den      King’s Landing     590 land  Goldroad\n 7 Westerlands   Kayce         Faircastle         480 raven <NA>    \n 8 Westerlands   Faircastle    the Crag           115 Boat  Island  \n 9 Westerlands   the Crag      Ashemark            85 land  <NA>    \n10 Westerlands   Ashemark      Casterly Rock      170 land  <NA>    \n# … with 190 more rows\n```\n:::\n\n```{.r .cell-code}\ngot_distances.ig <-graph_from_data_frame(got_distances, directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of edges\necount(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200\n```\n:::\n\n```{.r .cell-code}\n# number of vertices\nvcount(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 103\n```\n:::\n\n```{.r .cell-code}\n# vertex and edge attributes\nvertex_attr_names(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"To\"    \"Miles\" \"Mode\"  \"Notes\"\n```\n:::\n\n```{.r .cell-code}\n# network features\nis_directed(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# dyad census\nigraph::dyad.census(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 0\n\n$asym\n[1] 93\n\n$null\n[1] 5160\n```\n:::\n\n```{.r .cell-code}\n# triad census\ntriad_census(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 167960   3917   4472    502      0      0      0      0      0      0\n[11]      0      0      0      0      0      0\n```\n:::\n:::\n\nThis network has 200 edges and 103 vertices. The vertex attribute is 'name' and edge attributes are \"To\", \"Miles\", \"Mode\", and \"Notes\". It is directed, not bipartite, and not weighted. Dyad census reveals that there are 0 mutual, 93 asymmetric, and 5160 null relationships in this network of distances between regions in the GOT universe\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of components\nigraph::components(got_distances.ig)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# size of components\nigraph::components(got_distances.ig)$csize \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  9 12  7 13  6 10 12 13  1 20\n```\n:::\n:::\n\n\nThere are 10 components, the smallest of which is 1 node and largest is 20.\n\n\n## Density\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# network density\ngraph.density(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01903674\n```\n:::\n\n```{.r .cell-code}\n# density without loops\ngraph.density(got_distances.ig, loops=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01885192\n```\n:::\n:::\n\n\nThe density of this network, a global measure, is 0.01903674 which suggests that it isn't very dense. Without accounting for loops, the density value decreases to 0.01885192.\n\nAnalyzing the average network degree, a vast majority of the nodes have an average degree of 1 or 2, which supports the previous finding of the network not being very dense.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# average network degree\nigraph::degree(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Westerlands                          Reach \n                            14                             19 \n                    Riverlands                           Vale \n                            18                             19 \n                    Crownlands                     Stormlands \n                            13                             13 \n                         Dorne                          North \n                            16                             26 \n                  Iron Islands                          Essos \n                            10                             57 \n                 Casterly Rock                       Deep Den \n                             5                              1 \n                         Kayce                     Faircastle \n                             1                              1 \n                      the Crag                       Ashemark \n                             1                              2 \n                    Lannisport                      Crakehall \n                             2                              1 \n                       Old Oak                     Highgarden \n                             1                              5 \n                       Oldtown                     Blackcrown \n                             2                              2 \n                  Three Towers      Mouth of the Mander River \n                             1                              1 \n                  Golden Grove                     Cider Hall \n                             1                              2 \n                     Longtable                       Harroway \n                             2                              7 \n                       Seagard                       Riverrun \n                             3                              3 \n                     Harrenhal                       Saltpans \n                             2                              1 \n                    Maidenpool                         Border \n                             2                              1 \n               the Bloody Gate                      Wickenden \n                             1                              2 \n                      Gulltown                      Runestone \n                             1                              2 \n                    Old Anchor                   Longbow Hall \n                             2                              2 \n                    Snakewoods                   Heart’s Home \n                             3                              1 \n                   the Sisters                  Pebble Island \n                             2                              1 \n                      the Paps                 King’s Landing \n                             1                              7 \n                    Duskendale                    Rook’s Rest \n                             2                              1 \n                   Sharp Point                    Dragonstone \n                             1                              2 \n                     Wendwater                    Bronze Gate \n                             1                              1 \n                   Storm’s End                     Summerhall \n                             4                              1 \n                    Blackhaven                     Rain House \n                             1                              1 \n                      Mistwood                  Weeping Tower \n                             2                              1 \n                     Stonehelm                            Wyl \n                             1                              1 \n                      Yronwood                        the Tor \n                             1                              1 \n                     Godsgrace                      Saltshore \n                             3                              1 \n                         Vaith                       Hellholt \n                             1                              3 \n                      Skyreach                    Moat Cailin \n                             1                              2 \n                        Cerwyn                Greywater Watch \n                             1                              1 \n                Flint’s Finger                   White Harbor \n                             1                              2 \n                      Ramsgate                  Widow’s Watch \n                             2                              1 \n                       Karhold                      Dreadfort \n                             2                              2 \n                    Winterfell                 Deepwood Motte \n                             5                              2 \n                     Barrowton             the Shield Islands \n                             5                              1 \n                     the Arbor the Southern Dornish Coastline \n                             1                              1 \n                     Lemonwood                       Sunspear \n                             2                              1 \n                        Tyrosh                         Pentos \n                             7                              2 \n                       Braavos                         Lorath \n                             6                              1 \n                           Lys                       Volantis \n                             2                              5 \n                      New Ghis                        Astapor \n                             9                              2 \n                        Yunkai                    Dagger Lake \n                             2                              2 \n                the Stepstones                            Myr \n                             1                              3 \n                      Selhorys                          Qohor \n                             2                              1 \n                        Norvos                   Vaes Dothrak \n                             2                              4 \n                      Mantarys                        Bhorash \n                             2                              1 \n                       Meereen \n                             3 \n```\n:::\n:::\n\n\nCreating a data frame of the nodes in the network and finding out the in-degree and out-degree values of each:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_ig<-data.frame(name=V(got_distances.ig)$name, degree=igraph::degree(got_distances.ig,loops=FALSE))\nnodes_ig<-nodes_ig %>%\n    mutate(indegree=igraph::degree(got_distances.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(got_distances.ig, mode=\"out\", loops=FALSE))\nhead(nodes_ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   name degree indegree outdegree\nWesterlands Westerlands     14        0        14\nReach             Reach     19        0        19\nRiverlands   Riverlands     18        0        18\nVale               Vale     19        0        19\nCrownlands   Crownlands     13        0        13\nStormlands   Stormlands     13        0        13\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(nodes_ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name               degree          indegree       outdegree     \n Length:103         Min.   : 0.000   Min.   :0.000   Min.   : 0.000  \n Class :character   1st Qu.: 1.000   1st Qu.:1.000   1st Qu.: 0.000  \n Mode  :character   Median : 2.000   Median :1.000   Median : 0.000  \n                    Mean   : 3.786   Mean   :1.893   Mean   : 1.893  \n                    3rd Qu.: 3.000   3rd Qu.:2.000   3rd Qu.: 0.000  \n                    Max.   :57.000   Max.   :9.000   Max.   :57.000  \n```\n:::\n:::\n\n\n## Random Network\n\nCreating a random (Erdos-Renyi) network with the same number of nodes and edges as the GOT distances network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerdos_renyi.ig <- sample_gnm(103, 200, directed = TRUE, loops = FALSE)\n\n# density of random network\ngraph.density(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01903674\n```\n:::\n\n```{.r .cell-code}\n# dyad census of random network\nigraph::dyad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 2\n\n$asym\n[1] 196\n\n$null\n[1] 5055\n```\n:::\n\n```{.r .cell-code}\n# triad census of random network\nigraph::triad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 157567  18402    183    173    180    313     12      6     11      3\n[11]      0      0      0      1      0      0\n```\n:::\n:::\n\n\nThe density of the random graph is 0.01903674. It has 1 mutual, 198 asymmetric, and 5054 null relationships.\n\nNow, looking at the degree distributions in this random network:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_rand<-data.frame(degree=igraph::degree(erdos_renyi.ig))\nnodes_rand<-nodes_rand %>%\n    mutate(indegree=igraph::degree(erdos_renyi.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(erdos_renyi.ig, mode=\"out\", loops=FALSE))\nhead(nodes_rand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree indegree outdegree\n1      3        2         1\n2      4        3         1\n3      5        2         3\n4      3        1         2\n5      5        2         3\n6      3        1         2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(nodes_rand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     degree          indegree       outdegree    \n Min.   : 0.000   Min.   :0.000   Min.   :0.000  \n 1st Qu.: 3.000   1st Qu.:1.000   1st Qu.:1.000  \n Median : 4.000   Median :2.000   Median :2.000  \n Mean   : 3.883   Mean   :1.942   Mean   :1.942  \n 3rd Qu.: 5.000   3rd Qu.:3.000   3rd Qu.:3.000  \n Max.   :10.000   Max.   :7.000   Max.   :6.000  \n```\n:::\n:::\n\n\nComparing the random network statistics with those of the `got_distances.ig`, the density values are comparable, and so are the values from the dyad census. The triad census values for the random network are higher. The in-degree values for the distances network are all 0. At the same time, its values for out-degree and degree are much higher than those in the random network.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}