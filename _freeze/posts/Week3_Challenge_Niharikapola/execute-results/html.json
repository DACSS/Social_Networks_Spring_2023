{
  "hash": "4167b1462da9ca780dc68dbf10b7460b",
  "result": {
    "markdown": "---\ntitle: \"Week3_Challenge_Niharika Pola\"\nauthor: \"Niharika Pola\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/10/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_1\n  - instructions\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#loading libraries\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(network)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'network' 1.18.1 (2023-01-24), part of the Statnet Project\n* 'news(package=\"network\")' for changes since last version\n* 'citation(\"network\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'network'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:igraph':\n\n    %c%, %s%, add.edges, add.vertices, delete.edges, delete.vertices,\n    get.edge.attribute, get.edges, get.vertex.attribute, is.bipartite,\n    is.directed, list.edge.attributes, list.vertex.attributes,\n    set.edge.attribute, set.vertex.attribute\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ lubridate::%--%()      masks igraph::%--%()\n✖ dplyr::as_data_frame() masks tibble::as_data_frame(), igraph::as_data_frame()\n✖ purrr::compose()       masks igraph::compose()\n✖ tidyr::crossing()      masks igraph::crossing()\n✖ dplyr::filter()        masks stats::filter()\n✖ dplyr::lag()           masks stats::lag()\n✖ purrr::simplify()      masks igraph::simplify()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_distances <- read_csv(\"_data/got/got_distances.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 200 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Region From, From, To, Mode, Notes\ndbl (1): Miles\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(got_distances)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  `Region From` From          To               Miles Mode  Notes   \n  <chr>         <chr>         <chr>            <dbl> <chr> <chr>   \n1 Westerlands   Casterly Rock the Golden Tooth   240 land  <NA>    \n2 Westerlands   Casterly Rock Lannisport          40 land  <NA>    \n3 Westerlands   Casterly Rock Kayce              100 land  <NA>    \n4 Westerlands   Casterly Rock Kayce               12 water <NA>    \n5 Westerlands   Casterly Rock Deep Den           240 land  Goldroad\n6 Westerlands   Deep Den      King’s Landing     590 land  Goldroad\n```\n:::\n\n```{.r .cell-code}\ngot_distances.ig <-graph_from_data_frame(got_distances, directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of edges\necount(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200\n```\n:::\n\n```{.r .cell-code}\n# number of vertices\nvcount(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 103\n```\n:::\n\n```{.r .cell-code}\n# vertex and edge attributes\nvertex_attr_names(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"To\"    \"Miles\" \"Mode\"  \"Notes\"\n```\n:::\n\n```{.r .cell-code}\n# network features\nis_directed(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# dyad census\nigraph::dyad.census(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 0\n\n$asym\n[1] 93\n\n$null\n[1] 5160\n```\n:::\n\n```{.r .cell-code}\n# triad census\ntriad_census(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 167960   3917   4472    502      0      0      0      0      0      0\n[11]      0      0      0      0      0      0\n```\n:::\n:::\n\n\nThe vertex attribute is 'name' and edge attributes are \"To\", \"Miles\", \"Mode\", \"Notes\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of components\nigraph::components(got_distances.ig)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# size of components\nigraph::components(got_distances.ig)$csize \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  9 12  7 13  6 10 12 13  1 20\n```\n:::\n:::\n\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# network density\ngraph.density(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01903674\n```\n:::\n\n```{.r .cell-code}\n# density without loops\ngraph.density(got_distances.ig, loops=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01885192\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# average network degree\nigraph::degree(got_distances.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Westerlands                          Reach \n                            14                             19 \n                    Riverlands                           Vale \n                            18                             19 \n                    Crownlands                     Stormlands \n                            13                             13 \n                         Dorne                          North \n                            16                             26 \n                  Iron Islands                          Essos \n                            10                             57 \n                 Casterly Rock                       Deep Den \n                             5                              1 \n                         Kayce                     Faircastle \n                             1                              1 \n                      the Crag                       Ashemark \n                             1                              2 \n                    Lannisport                      Crakehall \n                             2                              1 \n                       Old Oak                     Highgarden \n                             1                              5 \n                       Oldtown                     Blackcrown \n                             2                              2 \n                  Three Towers      Mouth of the Mander River \n                             1                              1 \n                  Golden Grove                     Cider Hall \n                             1                              2 \n                     Longtable                       Harroway \n                             2                              7 \n                       Seagard                       Riverrun \n                             3                              3 \n                     Harrenhal                       Saltpans \n                             2                              1 \n                    Maidenpool                         Border \n                             2                              1 \n               the Bloody Gate                      Wickenden \n                             1                              2 \n                      Gulltown                      Runestone \n                             1                              2 \n                    Old Anchor                   Longbow Hall \n                             2                              2 \n                    Snakewoods                   Heart’s Home \n                             3                              1 \n                   the Sisters                  Pebble Island \n                             2                              1 \n                      the Paps                 King’s Landing \n                             1                              7 \n                    Duskendale                    Rook’s Rest \n                             2                              1 \n                   Sharp Point                    Dragonstone \n                             1                              2 \n                     Wendwater                    Bronze Gate \n                             1                              1 \n                   Storm’s End                     Summerhall \n                             4                              1 \n                    Blackhaven                     Rain House \n                             1                              1 \n                      Mistwood                  Weeping Tower \n                             2                              1 \n                     Stonehelm                            Wyl \n                             1                              1 \n                      Yronwood                        the Tor \n                             1                              1 \n                     Godsgrace                      Saltshore \n                             3                              1 \n                         Vaith                       Hellholt \n                             1                              3 \n                      Skyreach                    Moat Cailin \n                             1                              2 \n                        Cerwyn                Greywater Watch \n                             1                              1 \n                Flint’s Finger                   White Harbor \n                             1                              2 \n                      Ramsgate                  Widow’s Watch \n                             2                              1 \n                       Karhold                      Dreadfort \n                             2                              2 \n                    Winterfell                 Deepwood Motte \n                             5                              2 \n                     Barrowton             the Shield Islands \n                             5                              1 \n                     the Arbor the Southern Dornish Coastline \n                             1                              1 \n                     Lemonwood                       Sunspear \n                             2                              1 \n                        Tyrosh                         Pentos \n                             7                              2 \n                       Braavos                         Lorath \n                             6                              1 \n                           Lys                       Volantis \n                             2                              5 \n                      New Ghis                        Astapor \n                             9                              2 \n                        Yunkai                    Dagger Lake \n                             2                              2 \n                the Stepstones                            Myr \n                             1                              3 \n                      Selhorys                          Qohor \n                             2                              1 \n                        Norvos                   Vaes Dothrak \n                             2                              4 \n                      Mantarys                        Bhorash \n                             2                              1 \n                       Meereen \n                             3 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nig_nodes<-data.frame(name=V(got_distances.ig)$name, degree=igraph::degree(got_distances.ig,loops=FALSE))\nig_nodes<-nodes_ig %>%\n    mutate(indegree=igraph::degree(got_distances.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(got_distances.ig, mode=\"out\", loops=FALSE))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., indegree = igraph::degree(got_distances.ig, mode = \"in\", : object 'nodes_ig' not found\n```\n:::\n\n```{.r .cell-code}\nhead(ig_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   name degree\nWesterlands Westerlands     14\nReach             Reach     19\nRiverlands   Riverlands     18\nVale               Vale     19\nCrownlands   Crownlands     13\nStormlands   Stormlands     13\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nerdos_renyi.ig <- sample_gnm(103, 200, directed = TRUE, loops = FALSE)\n# density of random network\ngraph.density(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01903674\n```\n:::\n\n```{.r .cell-code}\n# dyad census of random network\nigraph::dyad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 2\n\n$asym\n[1] 196\n\n$null\n[1] 5055\n```\n:::\n\n```{.r .cell-code}\n# triad census of random network\nigraph::triad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 157566  18392    188    163    164    357      7      6      4      3\n[11]      0      0      1      0      0      0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_nodes<-data.frame(degree=igraph::degree(erdos_renyi.ig))\nrand_nodes<-rand_nodes %>%\n    mutate(indegree=igraph::degree(erdos_renyi.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(erdos_renyi.ig, mode=\"out\", loops=FALSE))\nhead(rand_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree indegree outdegree\n1      2        0         2\n2      4        2         2\n3      3        2         1\n4      3        2         1\n5      2        0         2\n6      0        0         0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(rand_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     degree         indegree       outdegree    \n Min.   :0.000   Min.   :0.000   Min.   :0.000  \n 1st Qu.:3.000   1st Qu.:1.000   1st Qu.:1.000  \n Median :4.000   Median :2.000   Median :2.000  \n Mean   :3.883   Mean   :1.942   Mean   :1.942  \n 3rd Qu.:5.000   3rd Qu.:3.000   3rd Qu.:3.000  \n Max.   :8.000   Max.   :5.000   Max.   :5.000  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}