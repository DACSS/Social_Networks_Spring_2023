{
  "hash": "24765d0443fe59582b53937e5ed4d32b",
  "result": {
    "markdown": "---\ntitle: \"Assignment Kpop Collaboration Network\"\nauthor: \"Erika Nagai\"\ndate: \"03/28/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\n---\n\n\n# Overview\n\nThe phenomenon of K-pop has recently emerged as a prominent cultural force, gaining significant attention and popularity not only in South Korea and other Asian nations but globally as well, particularly among the younger generation. An interesting aspect of K-pop is that many K-pop artists collaborate with other artists, often those who are not based in South Korea. In this analysis, my objective is to delve into the dynamics of such collaborations within the K-pop industry and beyond, across various musical genres, and to investigate how these collaborative patterns have evolved over time. To achieve this goal, I aim to examine the social network of K-pop collaborations, with a view to gaining a better understanding of the underlying trends and structures shaping this phenomenon.\n\n# Collect the data\n\nI collected the data in a following way.\n\n**collab_songs.csv:**\n\nThis is a list of collaboration songs collected by\n\n1.  gathering the name of the top 50 Kpop artists in 2010, 2015, and 2020 by asking ChatGPT\n2.  manually collecting their Spotify artist id\n3.  collecting all the singles/albums data of the artists by using Spotify API and\n4.  removing the songs that are NOT collaborative by filtering out those who have only one artist registered\n\n**artist.csv:**\n\nThis is a list of artists performed the collaboration songs collected by\n\n1.  extracting the unique artists from the collab_songs.csv\n2.  collecting their information (genre and followers) using Spotify API\n\n**song_detail.csv:**\n\nThis is a list of songs with detail information prepared by\n\n1.  extracting the detailed song information (release year, available market etc) by using Spotify API based on the track id from kpop_collab.csv\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install libraries\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:igraph':\n\n    as_data_frame, groups, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tidyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:igraph':\n\n    crossing\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in data\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/Microsoft/Documents/DACSS/753_Social_Network/Social_Networks_Spring_2023/posts\"\n```\n:::\n\n```{.r .cell-code}\ncollab_songs <- read_csv(\"_data/Kpop_collaboration/collab_songs.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 452 Columns: 26\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(25): song_name, name_10, kpop_artist_name, all_artists, song_id, song_a... dbl\n(1): ...1\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nartists <- read_csv(\"_data/Kpop_collaboration/artists.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 509 Columns: 8\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): name, id, genre, name_lower dbl (4): ...1, Unnamed: 0, top_kpop, followers\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nsong_detail <- read_csv(\"_data/Kpop_collaboration/song_detail.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 452 Columns: 20\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(11): album, artists, available_markets, external_ids, external_urls, h... dbl\n(6): ...1, disc_number, duration_ms, popularity, track_number, release... lgl\n(2): explicit, is_local date (1): release_date\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n:::\n:::\n\n\n# Describe & Clean the data\n\n### `collab_songs` dataframe\n\n`collab_songs` is a dataframe where each observation is a collaboration songs by Kpop top artists and other artists.\n\nIt has 452 rows (collaboration songs) and 26 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'skimr' was built under R version 4.2.3\n```\n:::\n\n```{.r .cell-code}\n# Skim the data\nskim(collab_songs)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |             |\n|:------------------------|:------------|\n|Name                     |collab_songs |\n|Number of rows           |452          |\n|Number of columns        |26           |\n|_______________________  |             |\n|Column type frequency:   |             |\n|character                |25           |\n|numeric                  |1            |\n|________________________ |             |\n|Group variables          |None         |\n\n\n**Variable type: character**\n\n|skim_variable       | n_missing| complete_rate| min|  max| empty| n_unique| whitespace|\n|:-------------------|---------:|-------------:|---:|----:|-----:|--------:|----------:|\n|song_name           |         0|          1.00|   1|   79|     0|      447|          0|\n|name_10             |         0|          1.00|   1|   10|     0|      426|          0|\n|kpop_artist_name    |         0|          1.00|   2|   19|     0|       79|          0|\n|all_artists         |         0|          1.00|   7|   91|     0|      418|          0|\n|song_id             |         0|          1.00|  22|   22|     0|      452|          0|\n|song_api_info       |         0|          1.00| 543| 2229|     0|      419|          0|\n|artist_id           |         0|          1.00|  22|   22|     0|       79|          0|\n|all_artists_id      |         0|          1.00|  46|  190|     0|      419|          0|\n|all_artists_list    |         0|          1.00|   7|  105|     0|      389|          0|\n|all_artists_id_list |         0|          1.00|  27|  189|     0|      391|          0|\n|artist_1            |         0|          1.00|   2|   36|     0|      339|          0|\n|artist_id_1         |         0|          1.00|  22|   22|     0|      342|          0|\n|artist_2            |       271|          0.40|   2|   19|     0|      110|          0|\n|artist_id_2         |       271|          0.40|  22|   22|     0|      110|          0|\n|artist_3            |       389|          0.14|   3|   21|     0|       50|          0|\n|artist_id_3         |       389|          0.14|  22|   22|     0|       50|          0|\n|artist_4            |       442|          0.02|   4|   19|     0|       10|          0|\n|artist_id_4         |       442|          0.02|  22|   22|     0|       10|          0|\n|artist_5            |       445|          0.02|   5|   17|     0|        6|          0|\n|artist_id_5         |       445|          0.02|  22|   22|     0|        6|          0|\n|artist_6            |       449|          0.01|   9|   12|     0|        3|          0|\n|artist_id_6         |       449|          0.01|  22|   22|     0|        3|          0|\n|artist_7            |       449|          0.01|   7|   17|     0|        3|          0|\n|artist_id_7         |       449|          0.01|  22|   22|     0|        3|          0|\n|name_5              |         0|          1.00|   1|    5|     0|      386|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|      sd| p0|    p25|  p50|    p75| p100|hist  |\n|:-------------|---------:|-------------:|-------:|-------:|--:|------:|----:|------:|----:|:-----|\n|...1          |         0|             1| 4342.56| 2374.34|  0| 2227.5| 4300| 6122.5| 8390|▃▇▇▅▆ |\n:::\n\n```{.r .cell-code}\nsummary(collab_songs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ...1       song_name           name_10          kpop_artist_name  \n Min.   :   0   Length:452         Length:452         Length:452        \n 1st Qu.:2228   Class :character   Class :character   Class :character  \n Median :4300   Mode  :character   Mode  :character   Mode  :character  \n Mean   :4343                                                           \n 3rd Qu.:6122                                                           \n Max.   :8390                                                           \n all_artists          song_id          song_api_info       artist_id        \n Length:452         Length:452         Length:452         Length:452        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n all_artists_id     all_artists_list   all_artists_id_list   artist_1        \n Length:452         Length:452         Length:452          Length:452        \n Class :character   Class :character   Class :character    Class :character  \n Mode  :character   Mode  :character   Mode  :character    Mode  :character  \n                                                                             \n                                                                             \n                                                                             \n artist_id_1          artist_2         artist_id_2          artist_3        \n Length:452         Length:452         Length:452         Length:452        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n artist_id_3          artist_4         artist_id_4          artist_5        \n Length:452         Length:452         Length:452         Length:452        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n artist_id_5          artist_6         artist_id_6          artist_7        \n Length:452         Length:452         Length:452         Length:452        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n artist_id_7           name_5         \n Length:452         Length:452        \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n```\n:::\n:::\n\n\nI removed unnecessary columns. Now `collab_songs` has following columns.\n\n-   song_name\n\n-   song_id: this can be used as a key when joining with `song_detail` dataframe\n\n-   kpop_artist_name: This is a name of the Kpop top artists.\n\n-   artist_id: This is a Spotify Artist ID of the Kpop top artists. This can be used as a key when joining with `artist` dataframe\n\n-   artist\\_\\[i\\]: This is a name of the artists that collaborated with Kpop top artists or the Kpop top artists themselves, which means that it might duplicate with `kpop_artist_name` (i is a number from 1 to 7)\n\n-   artist_id\\_\\[i\\]: This is a Spotify Artist ID of the artists that collaborated with Kpop top artists or the Kpop top artists themselves, which means that it might duplicate with `artist_id` (i is a number from 1 to 7). This can be used as a key when joining with `artists` dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab_songs <- collab_songs %>% \n  select(c(\"song_name\", \"song_id\", \"kpop_artist_name\", \"artist_id\", \"artist_1\", \"artist_id_1\", \"artist_2\", \"artist_id_2\", \"artist_3\", \"artist_id_3\", \"artist_4\", \"artist_id_4\", \"artist_5\", \"artist_id_5\", \"artist_6\", \"artist_id_6\", \"artist_7\", \"artist_id_7\"))\n\ncollab_songs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 452 × 18\n   song_name     song_id kpop_…¹ artis…² artis…³ artis…⁴ artis…⁵ artis…⁶ artis…⁷\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 Expectations  3szFx3… (G)I-D… 2AfmfG… Anne-M… 1zNqDE… MINNIE  2pHkxV… (G)I-D…\n 2 Nxde (Steve … 6HXVUm… (G)I-D… 2AfmfG… Steve … 77AiFE… <NA>    <NA>    <NA>   \n 3 TOMBOY (R3HA… 4y2Ssh… (G)I-D… 2AfmfG… R3HAB   6cEuCE… <NA>    <NA>    <NA>   \n 4 HWAA - Dimit… 6sUnwJ… (G)I-D… 2AfmfG… Dimitr… 73jByn… <NA>    <NA>    <NA>   \n 5 MORE          6juLad… (G)I-D… 2AfmfG… K/DA    4gOc8T… Madiso… 2kRfqP… (G)I-D…\n 6 THE BADDEST   2V4Fx7… (G)I-D… 2AfmfG… K/DA    4gOc8T… (G)I-D… 2AfmfG… Wolfty…\n 7 POP/STARS     5sbooP… (G)I-D… 2AfmfG… K/DA    4gOc8T… Madiso… 2kRfqP… (G)I-D…\n 8 Automotivo E… 3hGyEi… 2am     5SnaL8… The Ch… 4zaS9m… Siilva  1Ju0ls… 2am    \n 9 SCREAM - m-f… 31XceD… 2NE1    1l0mKo… m-flo   4UhiMI… <NA>    <NA>    <NA>   \n10 Lollipop      2eDGx6… 2NE1    1l0mKo… BIGBANG 4Kxlr1… <NA>    <NA>    <NA>   \n# … with 442 more rows, 9 more variables: artist_id_3 <chr>, artist_4 <chr>,\n#   artist_id_4 <chr>, artist_5 <chr>, artist_id_5 <chr>, artist_6 <chr>,\n#   artist_id_6 <chr>, artist_7 <chr>, artist_id_7 <chr>, and abbreviated\n#   variable names ¹​kpop_artist_name, ²​artist_id, ³​artist_1, ⁴​artist_id_1,\n#   ⁵​artist_2, ⁶​artist_id_2, ⁷​artist_3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab_songs %>% \n  arrange(song_name, kpop_artist_name, artist_1, artist_2) %>%\n  select(c(\"song_name\", \"kpop_artist_name\", \"artist_1\", \"artist_2\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 452 × 4\n   song_name                                             kpop_…¹ artis…² artis…³\n   <chr>                                                 <chr>   <chr>   <chr>  \n 1 #GirlsSpkOut                                          TAEYEON CHANMI… <NA>   \n 2 0X1=LOVESONG (I Know I Love You) - Japanese Ver.      TOMORR… Lilas … <NA>   \n 3 0X1=LOVESONG (I Know I Love You) feat. MOD SUN        TOMORR… MOD SUN <NA>   \n 4 1, 2                                                  LeeHi   최현석  <NA>   \n 5 1, 2, 3                                               BTOB    SEO EU… LEE CH…\n 6 2 Baddies - Biicla Remix                              NCT 127 Biicla  <NA>   \n 7 2 Baddies - No Identity Remix                         NCT 127 No Ide… <NA>   \n 8 2 Baddies - Viann Remix                               NCT 127 Viann   <NA>   \n 9 4 Times                                               CHANGMO YUMDDA  CHANGMO\n10 A Brand New Day (BTS World Original Soundtrack) [Pt.… BTS     Zara L… <NA>   \n# … with 442 more rows, and abbreviated variable names ¹​kpop_artist_name,\n#   ²​artist_1, ³​artist_2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab_songs %>% filter(artist_1 == \"Blackpink\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 18\n  song_name      song_id kpop_…¹ artis…² artis…³ artis…⁴ artis…⁵ artis…⁶ artis…⁷\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 Notemoni (Bec… 0m94mI… After … 1loWI8… Blackp… 1Gf3Sz… Tara    24JAAn… <NA>   \n2 Stay BP        4DWr1E… After … 1loWI8… Blackp… 1Gf3Sz… Tara    24JAAn… <NA>   \n3 Prism (Hurt U… 2MqPG8… After … 1loWI8… Blackp… 1Gf3Sz… Tara    24JAAn… <NA>   \n# … with 9 more variables: artist_id_3 <chr>, artist_4 <chr>,\n#   artist_id_4 <chr>, artist_5 <chr>, artist_id_5 <chr>, artist_6 <chr>,\n#   artist_id_6 <chr>, artist_7 <chr>, artist_id_7 <chr>, and abbreviated\n#   variable names ¹​kpop_artist_name, ²​artist_id, ³​artist_1, ⁴​artist_id_1,\n#   ⁵​artist_2, ⁶​artist_id_2, ⁷​artist_3\n```\n:::\n:::\n\n\n### Artists (artist.csv)\n\n`artists` is a dataframe where each row represents an artist (individual/group) that have participated in Kpop collaboration songs by top Kpop artists.\n\n1.  id: This is a Spotify Artist ID of the artist. It can be used as a key when joining with `collab_songs` dataframe\n\n2.  name: the name of the artist\n\n3.  top_kpop: if the artist is one of the top 50 Kpop artists in 2010, 2015, or 2020, the value is 1. Otherwise, the value is 0.\n\n4.  genre: the genre of the artist (can be multiple)\n\n5.  followers: the number of the followers on Spotify\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(artists)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |        |\n|:------------------------|:-------|\n|Name                     |artists |\n|Number of rows           |509     |\n|Number of columns        |8       |\n|_______________________  |        |\n|Column type frequency:   |        |\n|character                |4       |\n|numeric                  |4       |\n|________________________ |        |\n|Group variables          |None    |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|name          |         0|             1|   2|  36|     0|      509|          0|\n|id            |         0|             1|  22|  22|     0|      509|          0|\n|genre         |         0|             1|   2| 152|     0|      140|          0|\n|name_lower    |         0|             1|   2|  36|     0|      509|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|       mean|         sd| p0| p25|   p50|    p75|      p100|hist  |\n|:-------------|---------:|-------------:|----------:|----------:|--:|---:|-----:|------:|---------:|:-----|\n|...1          |         0|             1|     257.86|     148.77|  0| 130|   258|    386|       516|▇▇▇▇▇ |\n|Unnamed: 0    |         0|             1|     556.40|     335.10|  0| 257|   559|    839|      1168|▇▆▆▇▆ |\n|top_kpop      |         0|             1|       0.16|       0.36|  0|   0|     0|      0|         1|▇▁▁▁▂ |\n|followers     |         0|             1| 1751729.65| 7466285.35|  0| 815| 39237| 565467| 110756302|▇▁▁▁▁ |\n:::\n\n```{.r .cell-code}\nsummary(artists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ...1         Unnamed: 0         name                id           \n Min.   :  0.0   Min.   :   0.0   Length:509         Length:509        \n 1st Qu.:130.0   1st Qu.: 257.0   Class :character   Class :character  \n Median :258.0   Median : 559.0   Mode  :character   Mode  :character  \n Mean   :257.9   Mean   : 556.4                                        \n 3rd Qu.:386.0   3rd Qu.: 839.0                                        \n Max.   :516.0   Max.   :1168.0                                        \n    top_kpop         genre             followers          name_lower       \n Min.   :0.0000   Length:509         Min.   :        0   Length:509        \n 1st Qu.:0.0000   Class :character   1st Qu.:      815   Class :character  \n Median :0.0000   Mode  :character   Median :    39237   Mode  :character  \n Mean   :0.1552                      Mean   :  1751730                     \n 3rd Qu.:0.0000                      3rd Qu.:   565467                     \n Max.   :1.0000                      Max.   :110756302                     \n```\n:::\n\n```{.r .cell-code}\nartists\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 509 × 8\n    ...1 `Unnamed: 0` name         id              top_k…¹ genre follo…² name_…³\n   <dbl>        <dbl> <chr>        <chr>             <dbl> <chr>   <dbl> <chr>  \n 1     0            0 (G)I-DLE     2AfmfGFbe0A0Ws…       1 ['k-… 5361467 (g)i-d…\n 2   279          601 220 KID      4Euia7UzdRshy1…       0 ['da…   20493 220 kid\n 3    14           30 2am          5SnaL8SsjGMHQN…       1 ['k-…  213314 2am    \n 4    17           34 2NE1         1l0mKo96Jh9HVY…       1 ['da… 2362793 2ne1   \n 5   144          289 365LIT       65LSFEqRhq074a…       0 ['ko…    5106 365lit \n 6    20           38 4Minute      6cdC1cwqh3eJAX…       1 ['k-… 1085425 4minute\n 7    25           45 AB6IX        4y0wFJ5jmCUNRL…       1 ['k-…  535314 ab6ix  \n 8    81          149 ABLE         0Y669kGV5Gru5R…       0 []      17326 able   \n 9   402          870 aespa        6YVMFz59CuY7ng…       0 ['k-… 2934608 aespa  \n10    32           62 After School 1loWI8jVk9btgJ…       1 ['k-…  335087 after …\n# … with 499 more rows, and abbreviated variable names ¹​top_kpop, ²​followers,\n#   ³​name_lower\n```\n:::\n:::\n\n\n`name` has 513 unique values and `id` has 517 unique values, which may mean that there are `name` values that are duplicated or missing id information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nartists %>% \n  arrange(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 509 × 8\n    ...1 `Unnamed: 0` name         id              top_k…¹ genre follo…² name_…³\n   <dbl>        <dbl> <chr>        <chr>             <dbl> <chr>   <dbl> <chr>  \n 1     0            0 (G)I-DLE     2AfmfGFbe0A0Ws…       1 ['k-… 5361467 (g)i-d…\n 2   279          601 220 KID      4Euia7UzdRshy1…       0 ['da…   20493 220 kid\n 3    14           30 2am          5SnaL8SsjGMHQN…       1 ['k-…  213314 2am    \n 4    17           34 2NE1         1l0mKo96Jh9HVY…       1 ['da… 2362793 2ne1   \n 5   144          289 365LIT       65LSFEqRhq074a…       0 ['ko…    5106 365lit \n 6    20           38 4Minute      6cdC1cwqh3eJAX…       1 ['k-… 1085425 4minute\n 7    25           45 AB6IX        4y0wFJ5jmCUNRL…       1 ['k-…  535314 ab6ix  \n 8    81          149 ABLE         0Y669kGV5Gru5R…       0 []      17326 able   \n 9   402          870 aespa        6YVMFz59CuY7ng…       0 ['k-… 2934608 aespa  \n10    32           62 After School 1loWI8jVk9btgJ…       1 ['k-…  335087 after …\n# … with 499 more rows, and abbreviated variable names ¹​top_kpop, ²​followers,\n#   ³​name_lower\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean data by removing unnecessary columns\n\nartists <- artists %>% \n  select(-c('...1'))\n\nartists <- artists %>%\n  select(-c('Unnamed: 0'))\n\nartists <- artists %>% relocate(id, .before = name)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is the list of the genre names that appear in artist dataframe\nartists %>%\n  select(genre) %>%\n  separate_rows(genre, sep = \",\\\\s*\") %>%\n  mutate(genre = gsub(\"\\\\[|'|\\\\]\", \"\", genre)) %>%\n  count(genre, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 × 2\n   genre                  n\n   <chr>              <int>\n 1 \"\"                   189\n 2 \"k-pop\"              127\n 3 \"k-rap\"               61\n 4 \"korean pop\"          52\n 5 \"korean r&b\"          35\n 6 \"k-pop girl group\"    34\n 7 \"pop\"                 32\n 8 \"dance pop\"           30\n 9 \"k-pop boy group\"     29\n10 \"edm\"                 19\n# … with 134 more rows\n```\n:::\n:::\n\n\nI want to add two new columns to the `artist` dataFrame. The first column would indicate the broader genre of each artist, such as K-pop, Latin-pop, or J-pop (Japanese pop), which would help us to better understand the overall geographical market. The second column would simply indicate whether each artist is K-pop or not.\n\nFirst, I decided to classify the overall genre by detecting the follwoing word in the `genre` column\n\n**K-pop:** \"korean\", \"k-\" (for example k-pop, k-rap). Also any artists whose column \"to-=p-kpop\" is 1 are considered as K-pop genre.\n\n**Latin-pop:** \"latin\", \"latino\", \"chicano\"\n\n**J-pop (Japanese pop):** \"japanese\", \"j-\" (for example j-pop, j-rap, j-core), \"visual-kei\"\n\n**C-pop (Chinese pop):** \"chinese\"\n\n**UK-pop:** \"uk\" (uk-pop, uk-hiphop)\n\n**US or Others:** artists whose genre doesn't include the above words but has any word\n\n**Unknown:** artists whose genre is empty\n\n\n::: {.cell}\n\n```{.r .cell-code}\nartists <- artists %>% \n  mutate(region_category=case_when(\n    grepl(\"k-pop|korean|k-rap\", genre) | top_kpop == 1 ~ \"K-pop\",\n    grepl(\"latin|latino|chicano|bachata\", genre) ~ \"Latin-pop\",\n    grepl(\"j-pop|j-rap|japanese|j-core|josei|visual-kei\", genre) ~ \"J-pop\",\n    grepl(\"chinese\", genre) ~ \"C-pop\",\n    grepl(\"uk-|uk \", genre) ~ \"UK-pop\",\n    grepl(\"\\\\[\\\\]\", genre) ~ \"Unknown\",\n    TRUE ~ \"Other\"\n  )) %>%\n  mutate(kpop = case_when(\n    region_category == \"K-pop\" ~ \"yes\",\n    TRUE ~ \"no\"\n  ))\n\nartists\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 509 × 8\n   id                     name       top_k…¹ genre follo…² name_…³ regio…⁴ kpop \n   <chr>                  <chr>        <dbl> <chr>   <dbl> <chr>   <chr>   <chr>\n 1 2AfmfGFbe0A0WsTYm0SDTx (G)I-DLE         1 ['k-… 5361467 (g)i-d… K-pop   yes  \n 2 4Euia7UzdRshy1DJOSMTcs 220 KID          0 ['da…   20493 220 kid UK-pop  no   \n 3 5SnaL8SsjGMHQNyqpa8Zos 2am              1 ['k-…  213314 2am     K-pop   yes  \n 4 1l0mKo96Jh9HVYONcRl3Yp 2NE1             1 ['da… 2362793 2ne1    K-pop   yes  \n 5 65LSFEqRhq074aUBF1zF2e 365LIT           0 ['ko…    5106 365lit  K-pop   yes  \n 6 6cdC1cwqh3eJAXaxXJt2jv 4Minute          1 ['k-… 1085425 4minute K-pop   yes  \n 7 4y0wFJ5jmCUNRLZfsw1I7g AB6IX            1 ['k-…  535314 ab6ix   K-pop   yes  \n 8 0Y669kGV5Gru5RaumXTxtV ABLE             0 []      17326 able    Unknown no   \n 9 6YVMFz59CuY7ngCxTxjpxE aespa            0 ['k-… 2934608 aespa   K-pop   yes  \n10 1loWI8jVk9btgJXHgqHXPD After Sch…       1 ['k-…  335087 after … K-pop   yes  \n# … with 499 more rows, and abbreviated variable names ¹​top_kpop, ²​followers,\n#   ³​name_lower, ⁴​region_category\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nartists <- artists %>% \n  mutate(\n    show_kpop_top = case_when(\n      top_kpop == 1 ~ name,\n      TRUE ~ \"\"\n    )\n  )\n```\n:::\n\n\n### song_detail (song_detail.csv)\n\n`song_detail` is a dataframe where each observation is a collaboration song by K-pop top artists and other artists. While `collab_songs` provides the information of the artists that worked on the song, this dataframe provides more detailed information about the songs themselves such as duration, track number, release date etc...\n\nIt has 452 rows (collaboration songs), which is the same as the number of the rows of `collab_songs`, and 20 columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(song_detail)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |            |\n|:------------------------|:-----------|\n|Name                     |song_detail |\n|Number of rows           |452         |\n|Number of columns        |20          |\n|_______________________  |            |\n|Column type frequency:   |            |\n|character                |11          |\n|Date                     |1           |\n|logical                  |2           |\n|numeric                  |6           |\n|________________________ |            |\n|Group variables          |None        |\n\n\n**Variable type: character**\n\n|skim_variable     | n_missing| complete_rate|  min|  max| empty| n_unique| whitespace|\n|:-----------------|---------:|-------------:|----:|----:|-----:|--------:|----------:|\n|album             |         0|          1.00| 1041| 2754|     0|      337|          0|\n|artists           |         0|          1.00|  543| 2229|     0|      419|          0|\n|available_markets |         0|          1.00|    6| 1104|     0|       34|          0|\n|external_ids      |         0|          1.00|   24|   24|     0|      447|          0|\n|external_urls     |         0|          1.00|   68|   68|     0|      452|          0|\n|href              |         0|          1.00|   56|   56|     0|      452|          0|\n|id                |         0|          1.00|   22|   22|     0|      452|          0|\n|name              |         0|          1.00|    1|   79|     0|      447|          0|\n|preview_url       |        29|          0.94|  107|  107|     0|      415|          0|\n|type              |         0|          1.00|    5|    5|     0|        1|          0|\n|uri               |         0|          1.00|   36|   36|     0|      452|          0|\n\n\n**Variable type: Date**\n\n|skim_variable | n_missing| complete_rate|min        |max        |median     | n_unique|\n|:-------------|---------:|-------------:|:----------|:----------|:----------|--------:|\n|release_date  |         0|             1|2005-12-05 |2023-03-17 |2017-08-26 |      317|\n\n\n**Variable type: logical**\n\n|skim_variable | n_missing| complete_rate| mean|count             |\n|:-------------|---------:|-------------:|----:|:-----------------|\n|explicit      |         0|             1| 0.06|FAL: 424, TRU: 28 |\n|is_local      |         0|             1| 0.00|FAL: 452          |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|   p0|       p25|      p50|       p75|   p100|hist  |\n|:-------------|---------:|-------------:|---------:|--------:|----:|---------:|--------:|---------:|------:|:-----|\n|...1          |         0|             1|    225.50|   130.63|    0|    112.75|    225.5|    338.25|    451|▇▇▇▇▇ |\n|disc_number   |         0|             1|      1.00|     0.00|    1|      1.00|      1.0|      1.00|      1|▁▁▇▁▁ |\n|duration_ms   |         0|             1| 215094.02| 39306.63| 5889| 195108.00| 213231.0| 234115.00| 441184|▁▁▇▁▁ |\n|popularity    |         0|             1|     25.09|    18.64|    0|      9.00|     24.0|     37.00|     86|▇▇▃▂▁ |\n|track_number  |         0|             1|      2.23|     1.70|    1|      1.00|      1.0|      3.00|      9|▇▂▁▁▁ |\n|release_year  |         0|             1|   2016.56|     4.19| 2005|   2014.00|   2017.0|   2020.00|   2023|▁▃▅▇▇ |\n:::\n\n```{.r .cell-code}\nsummary(song_detail)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ...1          album             artists          available_markets \n Min.   :  0.0   Length:452         Length:452         Length:452        \n 1st Qu.:112.8   Class :character   Class :character   Class :character  \n Median :225.5   Mode  :character   Mode  :character   Mode  :character  \n Mean   :225.5                                                           \n 3rd Qu.:338.2                                                           \n Max.   :451.0                                                           \n  disc_number  duration_ms      explicit       external_ids      \n Min.   :1    Min.   :  5889   Mode :logical   Length:452        \n 1st Qu.:1    1st Qu.:195108   FALSE:424       Class :character  \n Median :1    Median :213231   TRUE :28        Mode  :character  \n Mean   :1    Mean   :215094                                     \n 3rd Qu.:1    3rd Qu.:234115                                     \n Max.   :1    Max.   :441184                                     \n external_urls          href                id             is_local      \n Length:452         Length:452         Length:452         Mode :logical  \n Class :character   Class :character   Class :character   FALSE:452      \n Mode  :character   Mode  :character   Mode  :character                  \n                                                                         \n                                                                         \n                                                                         \n     name             popularity    preview_url         track_number  \n Length:452         Min.   : 0.00   Length:452         Min.   :1.000  \n Class :character   1st Qu.: 9.00   Class :character   1st Qu.:1.000  \n Mode  :character   Median :24.00   Mode  :character   Median :1.000  \n                    Mean   :25.09                      Mean   :2.235  \n                    3rd Qu.:37.00                      3rd Qu.:3.000  \n                    Max.   :86.00                      Max.   :9.000  \n     type               uri             release_date         release_year \n Length:452         Length:452         Min.   :2005-12-05   Min.   :2005  \n Class :character   Class :character   1st Qu.:2014-06-20   1st Qu.:2014  \n Mode  :character   Mode  :character   Median :2017-08-26   Median :2017  \n                                       Mean   :2017-02-11   Mean   :2017  \n                                       3rd Qu.:2020-07-13   3rd Qu.:2020  \n                                       Max.   :2023-03-17   Max.   :2023  \n```\n:::\n:::\n\n\nThe columns are as follows\n\n1.  name: name of the songs\n2.  popularity: the popularity index from Spotify\n3.  release_year\n4.  album: this is information about the album the song is from in Json format.\n5.  artists: this is information about the artists in Json format\n6.  available_markets\n7.  explicit\n8.  id: This is a Spotify song id. Can be used as a key when joining with `collab_songs`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I will remove unnecessary columns\nsong_detail <- song_detail %>% \n  relocate(name,popularity, release_date, release_year, .before=\"album\") %>%\n  select(-c(\"...1\", \"disc_number\", \"duration_ms\", \"external_ids\", \"external_urls\",\"href\", \"is_local\", \"preview_url\", \"track_number\", \"type\", \"uri\", \"release_date\"))\n\nsong_detail$release_year <- as.integer(song_detail$release_year)\n\nsong_detail %>% arrange(release_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 452 × 8\n   name                      popul…¹ relea…² album artists avail…³ expli…⁴ id   \n   <chr>                       <dbl>   <int> <chr> <chr>   <chr>   <lgl>   <chr>\n 1 Show Me Your Love              28    2005 {'al… [{'ext… ['AR',… FALSE   2z3h…\n 2 I Wanna Hold You               14    2005 {'al… [{'ext… ['AR',… FALSE   2A7W…\n 3 I'm Your Man                   17    2005 {'al… [{'ext… ['AR',… FALSE   2MYG…\n 4 Forever With U (Feat. Pa…      37    2006 {'al… [{'ext… ['AR',… FALSE   7czV…\n 5 HOLD THE LINE (Feat. 조P…      12    2006 {'al… [{'ext… ['AR',… FALSE   5KgZ…\n 6 오늘은 그대와 하늘위로 (…       1    2006 {'al… [{'ext… ['AR',… FALSE   4Yyt…\n 7 FAR AWAY (Feat. MC몽)           3    2006 {'al… [{'ext… ['AR',… FALSE   6HvV…\n 8 Anystar                        18    2006 {'al… [{'ext… ['AR',… FALSE   3gJz…\n 9 오아시스 (feat. 이재훈)         6    2007 {'al… [{'ext… ['AR',… FALSE   56iR…\n10 Love Action (feat.Jo-PD)        8    2008 {'al… [{'ext… ['AR',… FALSE   2IgM…\n# … with 442 more rows, and abbreviated variable names ¹​popularity,\n#   ²​release_year, ³​available_markets, ⁴​explicit\n```\n:::\n:::\n\n\n## Extra data cleaning\n\n`collab_songs` include unofficial songs by unofficial accounts. For example, there are a few songs by After School and Blackpink. However, if you look at the Spotify album page, this \"Blackpink\" is different from \"BLACK PINK\". There seem to be several cases that the artist ID is not the correct one. So I removed the songs that are not by \"official\" (=with more monthly followers) accounts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#For example, there are a few songs by After School and Blackpink. However, if you look at the Spotify album page, this \"Blackpink\" is different from \"BLACK PINK\". \n\ncollab_songs %>% filter(artist_1 == \"Blackpink\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 18\n  song_name      song_id kpop_…¹ artis…² artis…³ artis…⁴ artis…⁵ artis…⁶ artis…⁷\n  <chr>          <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 Notemoni (Bec… 0m94mI… After … 1loWI8… Blackp… 1Gf3Sz… Tara    24JAAn… <NA>   \n2 Stay BP        4DWr1E… After … 1loWI8… Blackp… 1Gf3Sz… Tara    24JAAn… <NA>   \n3 Prism (Hurt U… 2MqPG8… After … 1loWI8… Blackp… 1Gf3Sz… Tara    24JAAn… <NA>   \n# … with 9 more variables: artist_id_3 <chr>, artist_4 <chr>,\n#   artist_id_4 <chr>, artist_5 <chr>, artist_id_5 <chr>, artist_6 <chr>,\n#   artist_id_6 <chr>, artist_7 <chr>, artist_id_7 <chr>, and abbreviated\n#   variable names ¹​kpop_artist_name, ²​artist_id, ³​artist_1, ⁴​artist_id_1,\n#   ⁵​artist_2, ⁶​artist_id_2, ⁷​artist_3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove the songs by artist_1 whose id doesn't exist\ncollab_songs <- collab_songs %>%\n  left_join(artists, by = c(\"artist_id_1\" = \"id\")) %>%\n  filter(!is.na(name)) %>%\n  select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n\n# Remove the songs by artist_2 whose id doesn't exist \ncollab_songs <- collab_songs %>% \n  left_join(artists, by = c(\"artist_id_2\" = \"id\")) %>%\n  filter(is.na(artist_2)|!is.na(name)) %>%\n  select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n\n# Remove the songs by artist_3 whose id doesn't exist \ncollab_songs <- collab_songs %>% \n  left_join(artists, by = c(\"artist_id_3\" = \"id\")) %>%\n  filter(is.na(artist_3)|!is.na(name)) %>%\n  select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n\n# Remove the songs by artist_4 whose id doesn't exist \ncollab_songs <- collab_songs %>% \n  left_join(artists, by = c(\"artist_id_4\" = \"id\")) %>%\n  filter(is.na(artist_4)|!is.na(name)) %>%\n  select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n\n# Remove the songs by artist_5 whose id doesn't exist \ncollab_songs <- collab_songs %>% \n  left_join(artists, by = c(\"artist_id_5\" = \"id\")) %>%\n  filter(is.na(artist_5)|!is.na(name)) %>%\n  select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n\n# Remove the songs by artist_6 whose id doesn't exist \ncollab_songs <- collab_songs %>% \n  left_join(artists, by = c(\"artist_id_6\" = \"id\")) %>%\n  filter(is.na(artist_6)|!is.na(name)) %>%\n  select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n\n# Remove the songs by artist_7 whose id doesn't exist \ncollab_songs <- collab_songs %>% \n  left_join(artists, by = c(\"artist_id_7\" = \"id\")) %>%\n  filter(is.na(artist_7)|!is.na(name)) %>%\n  select(-c(\"name\", \"top_kpop\", \"genre\", \"followers\", \"name_lower\", \"region_category\", \"kpop\"))\n\ncollab_songs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 441 × 25\n   song_name     song_id kpop_…¹ artis…² artis…³ artis…⁴ artis…⁵ artis…⁶ artis…⁷\n   <chr>         <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 Expectations  3szFx3… (G)I-D… 2AfmfG… Anne-M… 1zNqDE… MINNIE  2pHkxV… (G)I-D…\n 2 Nxde (Steve … 6HXVUm… (G)I-D… 2AfmfG… Steve … 77AiFE… <NA>    <NA>    <NA>   \n 3 TOMBOY (R3HA… 4y2Ssh… (G)I-D… 2AfmfG… R3HAB   6cEuCE… <NA>    <NA>    <NA>   \n 4 HWAA - Dimit… 6sUnwJ… (G)I-D… 2AfmfG… Dimitr… 73jByn… <NA>    <NA>    <NA>   \n 5 MORE          6juLad… (G)I-D… 2AfmfG… K/DA    4gOc8T… Madiso… 2kRfqP… (G)I-D…\n 6 THE BADDEST   2V4Fx7… (G)I-D… 2AfmfG… K/DA    4gOc8T… (G)I-D… 2AfmfG… Wolfty…\n 7 POP/STARS     5sbooP… (G)I-D… 2AfmfG… K/DA    4gOc8T… Madiso… 2kRfqP… (G)I-D…\n 8 Automotivo E… 3hGyEi… 2am     5SnaL8… The Ch… 4zaS9m… Siilva  1Ju0ls… 2am    \n 9 SCREAM - m-f… 31XceD… 2NE1    1l0mKo… m-flo   4UhiMI… <NA>    <NA>    <NA>   \n10 Lollipop      2eDGx6… 2NE1    1l0mKo… BIGBANG 4Kxlr1… <NA>    <NA>    <NA>   \n# … with 431 more rows, 16 more variables: artist_id_3 <chr>, artist_4 <chr>,\n#   artist_id_4 <chr>, artist_5 <chr>, artist_id_5 <chr>, artist_6 <chr>,\n#   artist_id_6 <chr>, artist_7 <chr>, artist_id_7 <chr>,\n#   show_kpop_top.x <chr>, show_kpop_top.y <chr>, show_kpop_top.x.x <chr>,\n#   show_kpop_top.y.y <chr>, show_kpop_top.x.x.x <chr>,\n#   show_kpop_top.y.y.y <chr>, show_kpop_top <chr>, and abbreviated variable\n#   names ¹​kpop_artist_name, ²​artist_id, ³​artist_1, ⁴​artist_id_1, ⁵​artist_2, …\n```\n:::\n:::\n\n\nNow `collab_songs` has 441 songs (reduced from 452)\n\n# Exploring the data\n\n### How many K-pop collaboration songs are released by year?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab_songs %>% \n  left_join(song_detail, by = c(\"song_id\"= \"id\")) %>%\n  ggplot(aes(x=release_year)) + \n  geom_bar() +\n  scale_x_continuous(breaks=seq(2010, 2022, 5)) + \n  xlim(2009, 2023) +\n  labs(title = \"The number of K-pop collaboration songs\", subtitle = \"The number of collaboration songs by K-pop top artists is increasing over the time\", caption = \"Note that this data is based on the information of only top 50 k-pop artists during 2010-2020\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for 'x' is already present. Adding another scale for 'x', which will\nreplace the existing scale.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 15 rows containing non-finite values (stat_count).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (geom_bar).\n```\n:::\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### Is the popularity of K-pop collaboration songs increasing?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsong_detail %>%\n  group_by(release_year) %>%\n  summarize(mean_popularity = mean(popularity)) %>%\n  ggplot(aes(x=release_year, y=mean_popularity)) + geom_line() +\n  labs(title = \"Popularity of K-pop collaboration songs\", subtitle = \"The popularity of K-pop collaboration songs is increasing dramatically.\")\n```\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# Convert this data to network data\n\nTo analyze this data in a perspective of social network, I need to convert this data into an edgelist where from_nodes are K-pop top artists, to_nodes are artists who collaborated with them, and edges are songs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pivot_longer\nedgelist <- collab_songs %>%\n  pivot_longer(\n    cols = starts_with(\"artist_id_\"),\n    names_to = \"variable\",\n    values_to = \"to_artist_id\"\n  )%>% \n  filter(!is.na(to_artist_id)) %>% # Remove the rows where the to_artist_id is blank \n  filter(artist_id != to_artist_id) %>%  # Remove the rows where from_artist and to_artist are the same \n  select(c(\"artist_id\", \"to_artist_id\", \"song_id\", \"song_name\"))\n\ncolnames(edgelist) <- c(\"From\", \"To\", \"song_id\", \"song_name\")\n\nedgelist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 591 × 4\n   From                   To                     song_id                song_n…¹\n   <chr>                  <chr>                  <chr>                  <chr>   \n 1 2AfmfGFbe0A0WsTYm0SDTx 1zNqDE7qDGCsyzJwohVaoX 3szFx3SyWFpRbehaPxpyqq Expecta…\n 2 2AfmfGFbe0A0WsTYm0SDTx 2pHkxVNynHBwQHhGaoBIXX 3szFx3SyWFpRbehaPxpyqq Expecta…\n 3 2AfmfGFbe0A0WsTYm0SDTx 77AiFEVeAVj2ORpC85QVJs 6HXVUmiqWSg3OW6yr5mJCJ Nxde (S…\n 4 2AfmfGFbe0A0WsTYm0SDTx 6cEuCEZu7PAE9ZSzLLc2oQ 4y2SshixeFlqPprLmoZtJe TOMBOY …\n 5 2AfmfGFbe0A0WsTYm0SDTx 73jBynjsVtofjRpdpRAJGk 6sUnwJgPUTHKBKnsKZr9PC HWAA - …\n 6 2AfmfGFbe0A0WsTYm0SDTx 4gOc8TsQed9eqnqJct2c5v 6juLaduD4STCUDWT0AYun4 MORE    \n 7 2AfmfGFbe0A0WsTYm0SDTx 2kRfqPViCqYdSGhYSM9R0Q 6juLaduD4STCUDWT0AYun4 MORE    \n 8 2AfmfGFbe0A0WsTYm0SDTx 6fs2or0cKLEM2xohWq8SoX 6juLaduD4STCUDWT0AYun4 MORE    \n 9 2AfmfGFbe0A0WsTYm0SDTx 0tRFWXqKBBQcu5oFVOgVzX 6juLaduD4STCUDWT0AYun4 MORE    \n10 2AfmfGFbe0A0WsTYm0SDTx 4TqlcgMFDryY96KWcvrhTv 6juLaduD4STCUDWT0AYun4 MORE    \n# … with 581 more rows, and abbreviated variable name ¹​song_name\n```\n:::\n:::\n\n\n## Edgelist (without spliting)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollab.net <- igraph::graph_from_data_frame(edgelist, directed = FALSE, vertices = artists)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setting the attributes\n\n# # For visualization\n# ## color\nartists <- artists %>% mutate(\n  color_region_category = case_when(\n    region_category == \"K-pop\" ~ \"#FFFFE1\",\n    region_category == \"Latin-pop\" ~ \"#99860C\",\n    region_category == \"J-pop\" ~ \"#FDCCCC\",\n    region_category == \"C-pop\" ~ \"#920002\",\n    region_category == \"UK-pop\" ~ \"#ABD7E6\",\n    region_category == \"Other\" ~ \"#010087\",\n    TRUE ~ \"darkgrey\" ),\n  color_kpop = case_when(\n    kpop == \"yes\" ~ \"#FFFFE1\",\n    TRUE ~ \"#010087\"\n  )\n)\n\n\n\nV(collab.net)$color <- artists$color_region_category\n# \n# \n# V(collab.net)$name_kpop_top <- artists$show_name_kpop_top\n# V(collab.net)$name_followers <- artists$show_name_followers\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check attributes\n\nsummary(collab.net) #509 nodes and 591 edges\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 442ea4c UN-- 509 591 -- \n+ attr: name (v/c), top_kpop (v/n), genre (v/c), followers (v/n),\n| name_lower (v/c), region_category (v/c), kpop (v/c), show_kpop_top\n| (v/c), color (v/c), song_id (e/c), song_name (e/c)\n```\n:::\n\n```{.r .cell-code}\nigraph::vertex_attr_names(collab.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"            \"top_kpop\"        \"genre\"           \"followers\"      \n[5] \"name_lower\"      \"region_category\" \"kpop\"            \"show_kpop_top\"  \n[9] \"color\"          \n```\n:::\n\n```{.r .cell-code}\nigraph::edge_attr_names(collab.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"song_id\"   \"song_name\"\n```\n:::\n:::\n\n\n# Overview of K-pop collaboration network\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(collab.net, \n     vertex.label = V(collab.net)$show_kpop_top,\n     arrow.mode=\"-\",\n     vertex.size = log(V(collab.net)$followers) * 0.5,\n     vertex.label.cex = .8,\n     vertex.label.color = \"black\",\n     vertex.label.dist = 0,\n     frame.width = 0,\n     color = V(collab.net)$color_region_category,\n     main = \"K pop collaboration network for the last 18 years\",\n     ref = \"The size of the circles means the popularity\"\n     )\n\nlegend(\n  \"bottomright\",\n  legend = c(\"K-pop\", \"Latin-pop\", \"J-pop\", \"C-pop\", \"UK-pop\", \"US or Other\", \"Unknown\"),\n  pt.bg  = c(\"#FFFFE1\", \"#99860C\", \"#FDCCCC\", \"#920002\", \"#ABD7E6\", \"#010087\", \"darkgrey\"),\n  pch    = 21,\n  cex    = 1,\n  bty    = \"n\",\n  title  = \"Genre\"\n  )\n```\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n# Overview: How the collaboration patterns have changed over time?\n\n1.  Between 2006 and 2010, the number of collaboration songs among K-pop artists was limited, with few international collaborations with artists outside of South Korea. Additionally, the network was sparse and disconnected.\n\n2.  From 2011 to 2015, the number of collaboration songs slightly increased, with more international collaborations and a more connected network.\n\n3.  Between 2016 and 2020, K-pop experienced significant growth in terms of the number and types of collaborations. Notably, BTS, G(I)DLE, and Blackpink have a large number of international collaboration songs.\n\n4.  In 2021, the number of collaboration songs is not as large as that of 2016-2020 due to the shorter time span, but the proportion of international collaborations appears to be higher.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedgelist <- edgelist %>% \n  left_join(song_detail, by = c(\"song_id\"=\"id\")) %>%\n  mutate(\n    period = case_when(\n      release_year <= 2010 ~ \"2005-2010\",\n      release_year > 2010 & release_year <= 2015 ~ \"2011-2015\",\n      release_year > 2015 & release_year <= 2020 ~ \"2016-2020\",\n      TRUE ~ \"2021-\"\n    )\n  ) %>% \n  select(c(\"From\", \"To\", \"song_id\", \"release_year\", \"period\", \"name\", \"popularity\"))\n  \n#E(collab.net)$period <- edgelist$period\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split the edgelist dataframe into 4 groups based on \"period\"\n\nedgelist_list <- split(edgelist, edgelist$period)\n\n# convert each element of the list into a separate dataframe\n\ngraphs <- list()\n\n\nfor (i in seq_along(edgelist_list)) {\n  assign(paste0(\"edgelist_\", names(edgelist_list)[i]), edgelist_list[[i]])\n  \n  unique_vertices <- unique(c(edgelist_list[[i]]$From, edgelist_list[[i]]$To))\n  artists_period <- artists[artists$id %in% unique_vertices, ]\n  \n  # Create the graph from the filtered edgelist and vertices\n  graph <- graph_from_data_frame(edgelist_list[[i]], directed = FALSE, vertices = artists_period)\n\n  # Append the graph to the list of graphs\n  graphs[[i]] <- graph\n} \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assigining visualization attributes\n\nperiods <- c(\"2006-2010\", \"2011-2015\", \"2016-2020\", \"2021-\")\n\nfor (i in 1:length(graphs)) {\n  V(graphs[[i]])$color <- V(graphs[[i]])$color_region_category\n  plot(graphs[[i]], \n     vertex.label = V(graphs[[i]])$show_kpop_top,\n     arrow.mode=\"-\",\n     vertex.size = log(V(graphs[[i]])$followers) * 0.7,\n     vertex.label.cex = .8,\n     vertex.label.color = \"black\",\n     vertex.label.dist = 0,\n     frame.width = 0,\n     color = V(graphs[[i]])$color_region_category,\n     main = paste0(\"Collaboration by K-pop top artists\", periods[[i]])\n     )\n  \n  legend(\n  \"bottomright\",\n  legend = c(\"K-pop\", \"Latin-pop\", \"J-pop\", \"C-pop\", \"UK-pop\", \"US or Other\", \"Unknown\"),\n  pt.bg  = c(\"#FFFFE1\", \"#99860C\", \"#FDCCCC\", \"#920002\", \"#ABD7E6\", \"#010087\", \"darkgrey\"),\n  pch    = 21,\n  cex    = 1,\n  bty    = \"n\",\n  title  = \"Genre\"\n  )\n}\n```\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-26-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-26-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-26-4.png){width=672}\n:::\n:::\n\n\n# Closer look: How does the network change every year?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a graph for each year\n\ngraph_from_data_frame_with_all_vertices <- function(df, vertices) {\n  # Create a data frame with all possible edges between vertices\n  unique_vertices <- unique(c(df$From, df$To))\n  artists_period <- artists[artists$id %in% unique_vertices, ]\n  # Create the graph with all vertices and existing edges\n  graph <- graph_from_data_frame(df, directed = FALSE, vertices = artists_period)\n  return(graph)\n}\n\ngraphs_year <- lapply(2006:2023, function(x) graph_from_data_frame_with_all_vertices(df = edgelist[edgelist$release_year == x, ], vertices = artists))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a dataframe of graph statistics\n\n# Initialize the data frame\ngraph_stats <- data.frame(release_year = 2006:2023, \n                           num_nodes = numeric(length(2006:2023)), \n                           num_edges = numeric(length(2006:2023)), \n                           centralization = numeric(length(2006:2023)), \n                           density = numeric(length(2006:2023)), \n                           transitivity = numeric(length(2006:2023))\n                           \n                           )\n\n# Loop through each year and calculate the desired graph statistics\nfor (i in 1:length(graphs_year)) {\n  graph <- graphs_year[[i]]\n  \n  # Fill in the corresponding row of the data frame with the calculated statistics\n  graph_stats[i, \"num_nodes\"] <- vcount(graph)\n  graph_stats[i, \"num_edges\"] <- ecount(graph)\n  graph_stats[i, \"centralization\"] <- centr_degree(graph)$centralization\n  graph_stats[i, \"density\"] <- graph.density(graph)\n  graph_stats[i, \"transitivity\"] <- transitivity(graph)\n}\n\n\n# Print the resulting data frame\nprint(graph_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   release_year num_nodes num_edges centralization    density transitivity\n1          2006         7         4     0.14285714 0.19047619            0\n2          2007         2         1     0.00000000 1.00000000          NaN\n3          2008        15        10     0.11904762 0.09523810            0\n4          2009        24        22     0.09420290 0.07971014            0\n5          2010        31        23     0.15053763 0.04946237            0\n6          2011        36        28     0.21269841 0.04444444            0\n7          2012        26        19     0.10153846 0.05846154            0\n8          2013        33        23     0.08143939 0.04356061            0\n9          2014        45        29     0.06161616 0.02929293            0\n10         2015        67        61     0.29059249 0.02758933            0\n11         2016        49        38     0.15518707 0.03231293            0\n12         2017        46        32     0.12463768 0.03091787            0\n13         2018        53        47     0.10050798 0.03410740            0\n14         2019        71        60     0.11871227 0.02414487            0\n15         2020        93        80     0.16608228 0.01870033            0\n16         2021        71        55     0.07786720 0.02213280            0\n17         2022        56        41     0.08246753 0.02662338            0\n18         2023        19        15     0.13450292 0.08771930            0\n```\n:::\n:::\n\n\n## Number of nodes and edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a plot with a bar chart and a line chart\nggplot(graph_stats, aes(x = release_year)) +\n  geom_bar(aes(y = num_nodes), stat = \"identity\", fill=\"lightgrey\") +\n  geom_line(aes(y = num_edges, group = 1, fill = \"black\")) +\n  labs(y = \"Number\", x = \"year\", title = \"The number of nodes (grey) and edges (black line)\") +\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Ignoring unknown aesthetics: fill\n```\n:::\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a plot with a bar chart and a line chart\nggplot(graph_stats, aes(x = release_year)) +\n  #geom_bar(aes(y = density, stat = \"identity\", fill=\"lightgrey\")) +\n  geom_line(aes(y = centralization, group = 1, fill = \"black\")) +\n  labs(y = \"Centralization\", x = \"year\", title = \"Centralization\") +\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Ignoring unknown aesthetics: fill\n```\n:::\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a plot with a bar chart and a line chart\nggplot(graph_stats, aes(x = release_year)) +\n  #geom_bar(aes(y = density, stat = \"identity\", fill=\"lightgrey\")) +\n  geom_line(aes(y = density, group = 1, fill = \"black\")) +\n  labs(y = \"Density\", x = \"year\", title = \"Density\") +\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Ignoring unknown aesthetics: fill\n```\n:::\n\n::: {.cell-output-display}\n![](KPop_network_assignment_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n# Discussion\n\nHow do I interpret the density and centrality?\n\nTransitivity doesn't work\n\nArtist based analysis (# of degree)\n",
    "supporting": [
      "KPop_network_assignment_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}