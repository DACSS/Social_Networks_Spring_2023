{
  "hash": "147d522e87c338991cc10e4ff6b80ac8",
  "result": {
    "markdown": "---\ntitle: \"Week 2 Challenge Submission\"\nauthor: \"Akhilesh Kumar\"\ndescription: \"Describing the Basic Structure of a Network\"\ndate: \"03/27/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories: \n  - challenge Overview\n  - Describe the Network Data\n    - Introduction\n    - Objective\n    - Data Read and Negative Edge Normalization\n    - Network Size, Features and Attributes\n  - Dyad and Triad Census\n  - Global and Local Transitivity or Clustering\n  - Path Length and Component Structure \n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tidyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:igraph':\n\n    crossing\n```\n:::\n:::\n\n\n## Challenge Overview\n\nDescribe the basic structure of a network following the steps in tutorial of week 2, this time using a dataset of your choice: for instance, you could use Marriages in Game of Thrones or Like/Dislike from week 1.\n\nAnother more complex option is the newly added dataset of the US input-output table of direct requirements by industry, availabe in the Bureau of Economic Analysis. Input-output tables show the economic transactions between industries of an economy and thus can be understood as a directed adjacency matrix. Data is provided in the form of an `XLSX` file, so using `read_xlsx` from package `readxl` is recommended, including the `sheet` as an argument (`2012` for instance).\n\nIdentify and describe content of nodes and links, and identify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and whether attribute data are present. Be sure to provide information about network size (e.g., information obtained from network description using week 1 network basic tutorial commands.)\n\nExplore the dataset using commands from week 2 tutorial. Comment on the highlighted aspects of network structure such as:\n\n-   Geodesic and Path Distances; Path Length\n-   Dyads and Dyad Census\n-   Triads and Triad Census\n-   Network Transitivity and Clustering\n-   Component Structure and Membership\n\nBe sure to both provide the relevant statistics calculated in `R`, as well as your own interpretation of these statistics.\n\n## Introduction\n\nThis Network Analysis project delves into the relationships between characters in the widely popular TV show \"Game of Thrones\" through the lens of graph theory and network analysis techniques. The data set utilized in this project provides information on character likes and dislikes, which is then transformed into a network of relationships between characters, providing a unique perspective on the web of character relationships in the show.\n\nThe main objective of this data analysis project is to gain a better understanding of the character relationships in the show. \n\n# Data Read and Negative Edge Normalization\n\nThe first section of the project involves reading in the data from a CSV file and selecting relevant columns for analysis. The resulting data frame is converted into a matrix and normalized to address the negative weights of dislikes. The normalized matrix is then used to create an undirected, weighted graph using the igraph package.\n\nThe resulting network graph contains nodes representing characters and edges representing the weighted connections between them based on their likes and dislikes. The graph can be further analyzed to identify dyads, triads, clustering, geodesic distance, and component structure within the network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = read.csv('_data\\\\got\\\\got_like_dislike.csv', header=TRUE)\ndata = data[,4:ncol(data)]\n\n# Convert the data frame to matrix\n\nadj_matrix <- as.matrix(data)\n\n# Normalize the matrix to manage negative weights of dislikes:\n\nnormalized_adj_matrix <- (adj_matrix + 10) / 10\n\nnormalized_adj_matrix[normalized_adj_matrix == 1] <- 0\n\n# Create a graph object from the normalized adjacency matrix\n\ngraph.ig <- graph_from_adjacency_matrix(normalized_adj_matrix, mode = \"undirected\", diag = FALSE, weighted = TRUE)\n\n# List the objects to verify that datafiles are working properly\n\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"adj_matrix\"            \"data\"                  \"graph.ig\"             \n[4] \"normalized_adj_matrix\"\n```\n:::\n:::\n\n\n## Network Size, Features and Attributes\n\nThe \"got_like_dislike\"  network consists of 46 nodes, which represent characters, and 589 edges, which represent the likes and dislikes between the characters. The edges are weighted, meaning that each edge has a value that indicates the strength of the like or dislike relationship between the characters. The network is not bipartite, meaning that all nodes are of the same type, in this case, characters. Additionally, the network is undirected, indicating that the likes and dislikes are mutual between the characters.\n\nBased on the range of edge weights, it seems like the likes and dislikes between characters are relatively consistent in strength, with edge weights ranging from 0.5 to 1.5. The mean and median edge weights of 0.939219 and 0.9, respectively. The highest weighted edge is 1.5, suggesting an strong like relationship between characters, whereas 0.5 is the lowest weighted edge, suggesting an strong dislike relationship between characters\n\nThe analysis also shows that each node has a \"name\" attribute, which corresponds to the name of the character it represents. The names of all the characters are listed in the output. Additionally, each edge has a \"weight\" attribute, which corresponds to the strength of the relationship between the characters connected by the edge. The weights of all the edges are listed in the output.\n\nThis analysis provides useful insights into the relationships between the characters in the GoT TV series. By studying the weights of the edges, it is possible to identify the characters who have the strongest relationships and those who have the weakest relationships. \n\nThe output shows that:\n\n-   The network got_like_dislike has 46 nodes and 589 edges.\n-   The network is not bipartite.\n-   The network is not directed.\n-   The network has weighted edges.\n-   The only vertex attribute in the network is name, which gives the names of all the nodes.\n-   The names of all the nodes in the network are shown in the output.\n-   The only edge attribute in the network is weight, which gives the weights of all the edges.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of vertices in got_like_dislike network:\n\nvcount(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n\n```{.r .cell-code}\n# Number of edges in got_like_dislike network:\n\necount(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 589\n```\n:::\n\n```{.r .cell-code}\n# Bipartite or single mode network verification in got_like_dislike network:\n\nis_bipartite(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Directed or undirected edges verification in got_like_dislike network\n\nis_directed(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Weighted or unweighted edges verification in got_like_dislike network\n\nis_weighted(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Is Connected verification in got_like_dislike network\n\nis_connected(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Vertex attributes for got_like_dislike network\n\nvertex_attr_names(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\n# Vertex attribute, Nodes in got_like_dislike network:\n\nV(graph.ig)$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Lysa.Arryn\"            \"Petyr.Baelish\"         \"Joffrey.Baratheon\"    \n [4] \"Margaery.Tyrell\"       \"Renly.Baratheon\"       \"Robert.Baratheon\"     \n [7] \"Stannis.Baratheon\"     \"Brienne.of.Tarth\"      \"Bronn\"                \n[10] \"Gregor.Clegane\"        \"Sandor.Clegane\"        \"Xaro.Xhoan.Daxos\"     \n[13] \"Gendry\"                \"Balon.Greyjoy\"         \"Theon.Greyjoy\"        \n[16] \"Jaqen.H.ghar\"          \"Hodor\"                 \"Khal.Drogo\"           \n[19] \"Cersei.Lannister\"      \"Jaime.Lannister\"       \"Lancel.Lannister\"     \n[22] \"Tyrion.Lannister\"      \"Tywin.Lannister\"       \"Maester.Luwin\"        \n[25] \"Melisandre\"            \"Jeor.Mormont\"          \"Jorah.Mormont\"        \n[28] \"Osha\"                  \"Podrick.Payne\"         \"Pyat.Pree\"            \n[31] \"Grand.Maester.Pycelle\" \"Ros\"                   \"Davos.Seaworth\"       \n[34] \"Shae\"                  \"Jon.Snow\"              \"Arya.Stark\"           \n[37] \"Bran.Stark\"            \"Catelyn.Stark\"         \"Robb.Stark\"           \n[40] \"Sansa.Stark\"           \"Daenerys.Targaryen\"    \"Viserys.Targaryen\"    \n[43] \"Samwell.Tarly\"         \"Loras.Tyrell\"          \"Varys\"                \n[46] \"Eddard.Stark\"         \n```\n:::\n\n```{.r .cell-code}\n# Edge attributes for got_like_dislike network:\n\nedge_attr_names(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"weight\"\n```\n:::\n\n```{.r .cell-code}\n# Edge attribute, Edges with weights in got_like_dislike network:\n\nE(graph.ig)$weight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 1.3 1.2 1.1 0.9 0.9 1.2 0.9 0.9 0.9 0.9 0.9 1.1 1.1 1.2 1.2 1.3 1.2 1.2\n [19] 1.3 0.9 1.1 0.8 1.1 0.9 0.9 0.9 0.9 0.9 0.8 0.8 0.9 0.8 0.9 0.9 0.8 0.9\n [37] 1.1 1.1 1.5 1.3 0.9 1.1 0.9 0.9 1.4 0.7 1.4 0.5 0.7 0.9 1.3 1.4 0.5 0.8\n [55] 0.7 0.9 0.9 1.5 1.4 1.1 0.8 1.3 0.9 0.6 0.7 0.8 0.9 0.9 0.5 0.8 0.9 0.9\n [73] 0.9 0.9 0.7 0.5 0.9 0.5 0.7 1.2 0.9 0.5 1.5 0.6 0.7 0.9 0.9 1.1 0.5 0.9\n [91] 0.8 1.2 1.1 0.9 0.9 1.3 0.6 0.8 0.9 0.9 0.8 0.9 0.9 0.9 0.9 0.8 0.9 0.5\n[109] 0.7 1.5 1.3 0.5 1.5 0.9 0.8 0.8 0.6 0.9 0.7 0.5 0.6 0.7 0.9 0.8 0.5 1.1\n[127] 0.5 0.8 0.9 0.9 0.7 0.9 1.2 1.2 1.3 1.2 1.2 0.5 0.7 1.5 0.9 1.1 1.2 0.9\n[145] 1.5 0.9 1.4 1.3 0.6 1.3 0.9 1.1 1.1 1.2 0.7 0.8 1.1 1.2 0.9 1.2 1.4 1.4\n[163] 1.5 1.5 1.4 0.5 0.7 0.8 1.5 0.8 0.8 0.7 0.6 0.5 0.8 0.5 0.9 0.5 0.6 0.8\n[181] 0.7 0.5 1.5 0.6 0.8 0.8 0.7 1.5 0.8 0.8 0.8 0.6 0.5 0.8 0.5 0.7 0.5 0.8\n[199] 0.9 0.8 0.7 0.6 0.5 1.3 0.5 0.5 0.8 0.6 0.5 1.3 0.6 0.7 1.2 0.9 0.9 0.7\n[217] 0.7 1.1 1.4 1.4 1.5 1.3 1.4 0.5 1.3 0.9 0.8 0.5 0.9 0.9 0.9 0.7 0.7 0.9\n[235] 1.5 0.6 0.9 0.9 1.5 0.7 0.8 1.5 0.8 0.8 1.1 0.8 0.8 0.9 0.8 0.9 0.5 0.7\n[253] 0.5 0.6 1.2 1.2 0.8 1.5 0.8 0.8 0.9 0.9 0.9 0.9 0.7 0.7 0.6 0.6 0.6 0.7\n[271] 0.9 0.8 0.9 0.8 0.7 1.2 1.1 0.8 1.3 0.8 0.9 0.8 0.9 0.9 0.8 0.7 1.5 0.5\n[289] 0.9 1.2 1.4 0.7 1.3 1.2 0.5 0.6 0.8 0.5 1.2 0.7 1.5 1.2 0.8 0.9 1.3 1.3\n[307] 0.7 0.8 0.9 0.8 0.7 0.8 0.9 0.5 0.9 0.9 0.9 0.8 0.9 0.9 0.6 0.5 0.8 0.7\n[325] 0.9 0.5 0.5 0.6 0.7 0.9 0.7 0.6 0.5 0.8 0.9 1.1 0.8 0.9 1.3 0.9 0.8 0.6\n[343] 0.5 0.6 0.6 0.8 0.7 0.9 0.9 0.9 1.3 1.3 0.9 0.9 0.9 0.7 1.1 1.5 1.1 1.5\n[361] 1.1 1.1 1.1 1.1 0.7 0.8 0.9 0.7 1.5 1.5 1.4 1.5 1.5 1.5 1.5 1.4 1.4 0.7\n[379] 0.8 0.9 0.7 1.4 0.8 1.5 0.6 1.5 1.5 0.6 1.4 0.7 0.7 0.8 1.2 1.1 0.8 0.7\n[397] 0.8 0.9 0.9 0.6 0.5 1.1 0.5 0.7 0.8 1.2 0.6 1.2 1.2 1.4 0.9 0.9 1.2 0.9\n[415] 0.9 0.8 0.5 0.5 0.6 0.8 0.9 0.5 0.9 1.2 0.9 0.8 0.9 0.5 0.7 0.9 1.5 1.2\n[433] 1.5 1.5 0.9 0.9 1.3 0.9 0.9 0.9 1.2 0.9 0.6 0.7 1.2 0.8 0.8 0.9 0.9 0.9\n[451] 0.5 0.5 0.5 0.7 1.1 1.3 1.5 1.5 1.5 1.5 1.5 1.5 1.5 0.7 0.9 0.8 0.9 0.9\n[469] 0.5 0.5 0.8 0.6 0.7 0.7 0.5 1.3 1.5 1.2 1.3 1.1 0.5 0.8 0.9 0.9 0.7 0.7\n[487] 0.9 1.5 0.9 0.9 0.8 0.9 0.9 1.2 1.2 1.5 1.3 1.2 1.1 0.8 0.9 0.7 0.8 1.2\n[505] 0.8 1.1 0.7 1.4 0.8 0.8 1.3 0.7 0.9 0.8 0.5 1.1 0.9 0.9 0.8 0.7 0.7 0.9\n[523] 0.9 0.7 0.9 1.3 0.9 0.9 0.8 0.8 0.7 0.7 0.9 0.7 0.9 0.8 1.5 1.5 0.9 1.5\n[541] 1.5 1.5 1.5 1.5 1.5 1.5 1.5 0.9 0.9 1.1 0.9 0.5 1.5 1.5 1.5 1.5 0.9 0.9\n[559] 1.1 0.9 0.5 1.5 1.4 1.5 0.6 0.9 0.9 0.5 1.5 1.5 0.5 0.7 1.1 0.6 0.5 1.5\n[577] 0.7 0.9 1.1 0.9 0.9 1.5 1.2 0.7 0.8 0.9 1.1 0.9 0.5\n```\n:::\n\n```{.r .cell-code}\n# maximum weight of the edges in got_like_dislike network:\n\nmax(E(graph.ig)$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5\n```\n:::\n\n```{.r .cell-code}\n# minimum weight of the edges in got_like_dislike network:\n\nmin(E(graph.ig)$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n\n```{.r .cell-code}\n# mean & median weight of the edges in got_like_dislike network:\n\nmean(E(graph.ig)$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.939219\n```\n:::\n\n```{.r .cell-code}\nmedian(E(graph.ig)$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9\n```\n:::\n:::\n\n\n## Dyad and Triad Census\n\nThe first analysis calculates the dyad census, which classifies all possible pairs of nodes in the network into three categories: mutual ties (where both nodes like each other), asymmetric ties (where one node likes the other but not vice versa), and null ties (where neither node likes the other). In this case, there were 589 mutual ties and 446 null ties, and no asymmetric ties.\n\nThe triad census counts the number of each possible combination of three nodes in a network, which are called triads. The function returns a vector with 16 values, each corresponding to the count of a particular triad type. In this case, there are 1780 triads of type 003, 4945 triads of type 012, 4394 triads of type 102, and 4061 triads of type 021D.\n\nFinally, the code sums up the total number of triads returned by the triad census, which is 15180. This provides an overall picture of the patterns of relationships between nodes in the network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Classify all Dyads in the got_like_dislike network: igraph\n\nigraph::dyad.census(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 589\n\n$asym\n[1] 0\n\n$null\n[1] 446\n```\n:::\n\n```{.r .cell-code}\n# Classify all Triads in the got_like_dislike Network: igraph\n\nigraph::triad_census(graph.ig)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in igraph::triad_census(graph.ig): At core/misc/motifs.c:1165 : Triad\ncensus called on an undirected graph.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1780    0 4945    0    0    0    0    0    0    0 4394    0    0    0    0\n[16] 4061\n```\n:::\n\n```{.r .cell-code}\n# Total number of Triads returned by triad census\n\nsum(igraph::triad_census(graph.ig))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in igraph::triad_census(graph.ig): At core/misc/motifs.c:1165 : Triad\ncensus called on an undirected graph.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15180\n```\n:::\n:::\n\n## Global and Local Transitivity or Clustering\n\nThe output shows the results of running three different measures of clustering on the got_like_dislike network.\n\nThe first measure is the global clustering coefficient, which is a measure of how tightly connected the network as a whole is. The output shows that this network has a relatively high global clustering coefficient of 0.735, indicating that there are many triads of nodes that are fully connected to each other. This could suggest that the network represents a tightly-knit community or group of nodes.\n\nThe second measure is the local clustering coefficient, which is a measure of how much each individual node is connected to its neighbors. The output shows a vector of local clustering coefficients for each node in the network. These range from 0.666 to 0.889, with a mean of 0.75. This suggests that most nodes in the network are fairly well-connected to their neighbors, but there is some variation in how tightly clustered different nodes are.\n\nThe third measure is the average local clustering coefficient, which is simply the mean of the local clustering coefficients across all nodes in the network. In this case, the output shows an average of 0.755, which is similar to the mean value for the individual nodes. This reinforces the idea that the network as a whole is fairly well-connected and densely clustered.\n\nOverall, the output suggests that this network represents a group of nodes that are tightly-knit and well-connected, with most nodes having strong connections to their fellow actors. \n\n- What is the distribution of node degree and how does it compare with the distribution of local transitivity?\n\nDegree distribution: The degree distribution lists the number of connections (i.e., degree) each node in the network has. For example, Lysa Arryn has 19 connections, Petyr Baelish has 24 connections, and so on.\n\nLocal transitivity: The local transitivity lists the transitivity coefficient for each node in the network. The transitivity coefficient measures the proportion of triangles (i.e., three nodes that are all connected to each other) that are actually present in the network, compared to the total number of possible triangles. A high transitivity coefficient means that a node's connections tend to be connected to each other as well, forming clusters or communities within the network. For example, Lysa Arryn has a transitivity coefficient of 0.812, which means that the connections of Lysa Arryn tend to be connected to each other as well, forming clusters.\n\nThe fact that the degree histogram is skewed towards the right indicates that there are more nodes with higher degrees than those with lower degrees in the network. This suggests that some nodes in the network are more connected than others, and that the network may contain a few highly connected nodes (also known as \"hubs\").\n\nOn the other hand, the fact that the local transitivity graph is skewed towards the left suggests that there are relatively few nodes in the network that form highly clustered groups. This means that the network may not have many nodes that are highly interconnected with one another. Instead, there may be more nodes that have connections to a few other nodes, but not necessarily to each other.\n\nOverall, these observations suggest that the network may have a hierarchical structure with a few highly connected nodes (hubs) that connect to other less connected nodes. This type of structure is common in many real-world networks, such as social networks, transportation networks, and biological networks.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Global Clustering / Network Transitivity\n\nglobal_transitivity = transitivity(graph.ig, type=\"global\")\n\nglobal_transitivity\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7349339\n```\n:::\n\n```{.r .cell-code}\n# Local clustering coefficient\n\nlocal_transitivity = transitivity(graph.ig, type=\"local\")\n\nlocal_transitivity\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.8245614 0.7538462 0.6747638 0.7816092 0.7310924 0.6989247 0.7611408\n [8] 0.7290553 0.7632184 0.7413793 0.8030769 0.6666667 0.7380952 0.7660099\n[15] 0.6924370 0.7619048 0.8190476 0.8571429 0.6693657 0.7291667 0.8366013\n[22] 0.7064394 0.7094474 0.8750000 0.8892308 0.7000000 0.7389163 0.6738462\n[29] 0.8181818 0.6666667 0.7566138 0.8888889 0.8005698 0.8382353 0.7065217\n[36] 0.7045455 0.7045455 0.6813656 0.6876877 0.6875000 0.6840336 0.8523810\n[43] 0.8095238 0.8262108 0.8338462 0.6699507\n```\n:::\n\n```{.r .cell-code}\n# Average local clustering coefficient\n\nlocalaverage_transitivity = transitivity(graph.ig, type=\"localaverage\")\n\n# Local Transitivity at nodes \"Lysa.Arryn\",\"Samwell.Tarly\" and \"Davos.Seaworth\"\n\ntransitivity(graph.ig, type=\"local\", vids=V(graph.ig)[c(\"Lysa.Arryn\",\"Samwell.Tarly\", \"Davos.Seaworth\")]) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8245614 0.8095238 0.8005698\n```\n:::\n\n```{.r .cell-code}\n# Degree Distribution\n\ndegree_distribution = igraph::degree(graph.ig)\n\ndegree_distribution\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Lysa.Arryn         Petyr.Baelish     Joffrey.Baratheon \n                   19                    26                    39 \n      Margaery.Tyrell       Renly.Baratheon      Robert.Baratheon \n                   30                    35                    31 \n    Stannis.Baratheon      Brienne.of.Tarth                 Bronn \n                   34                    34                    30 \n       Gregor.Clegane        Sandor.Clegane      Xaro.Xhoan.Daxos \n                   29                    26                     3 \n               Gendry         Balon.Greyjoy         Theon.Greyjoy \n                   21                    29                    35 \n         Jaqen.H.ghar                 Hodor            Khal.Drogo \n                   15                    21                    14 \n     Cersei.Lannister       Jaime.Lannister      Lancel.Lannister \n                   39                    33                    18 \n     Tyrion.Lannister       Tywin.Lannister         Maester.Luwin \n                   33                    34                    16 \n           Melisandre          Jeor.Mormont         Jorah.Mormont \n                   26                     5                    29 \n                 Osha         Podrick.Payne             Pyat.Pree \n                   26                    22                     3 \nGrand.Maester.Pycelle                   Ros        Davos.Seaworth \n                   28                     9                    27 \n                 Shae              Jon.Snow            Arya.Stark \n                   17                    24                    33 \n           Bran.Stark         Catelyn.Stark            Robb.Stark \n                   33                    38                    37 \n          Sansa.Stark    Daenerys.Targaryen     Viserys.Targaryen \n                   32                    35                    21 \n        Samwell.Tarly          Loras.Tyrell                 Varys \n                    7                    27                    26 \n         Eddard.Stark \n                   29 \n```\n:::\n\n```{.r .cell-code}\n# Plot degree distribution and local transitivity distribution\n\npar(mfrow=c(1,2))\n\nhist(unname(degree_distribution), main=\"Degree Distribution\", xlab=\"Degree\")\n\nhist(local_transitivity, main=\"Local Transitivity Distribution\", xlab=\"Local Transitivity\")\n```\n\n::: {.cell-output-display}\n![](akhilesh_challenge_2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Path Length and Component Structure \n\nThe average path length for the network is 1.131981. This means that on average, it takes only slightly over one connection to get from one character to another. This indicates that the characters in the network are well-connected and that there are no major barriers or isolated groups of characters.\n\nThe diameter of the network is 2.5, which indicates the maximum distance between any two characters in the network. In other words, there are pairs of characters in the network that are at most two and a half steps apart. This is another indication that the characters in the network are well-connected.\n\nThe component structure of the network reveals that there is only one component, meaning that all characters in the network are connected to each other. The size of this component is 46, indicating that all 46 characters in the dataset are connected in a single group.\n\nFinally, the cluster membership of each node shows that all characters belong to the same cluster, or component, same as the component structure output.\n\nOverall, these measures suggest that the Game of Thrones character co-occurrence network is a densely connected and cohesive network, where all characters are highly interconnected. This may be due to the fact that the characters in the network share a common setting and storyline, and thus are likely to interact with each other in various ways throughout the show.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Average path length for network\n\naverage.path.length(graph.ig,directed=F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.131981\n```\n:::\n\n```{.r .cell-code}\n# Diameter of the network\n\ndiameter(graph.ig, directed=FALSE, unconnected = FALSE, weights = E(graph.ig)$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n\n```{.r .cell-code}\n# Component structure of the network\n\nigraph::components(graph.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$membership\n           Lysa.Arryn         Petyr.Baelish     Joffrey.Baratheon \n                    1                     1                     1 \n      Margaery.Tyrell       Renly.Baratheon      Robert.Baratheon \n                    1                     1                     1 \n    Stannis.Baratheon      Brienne.of.Tarth                 Bronn \n                    1                     1                     1 \n       Gregor.Clegane        Sandor.Clegane      Xaro.Xhoan.Daxos \n                    1                     1                     1 \n               Gendry         Balon.Greyjoy         Theon.Greyjoy \n                    1                     1                     1 \n         Jaqen.H.ghar                 Hodor            Khal.Drogo \n                    1                     1                     1 \n     Cersei.Lannister       Jaime.Lannister      Lancel.Lannister \n                    1                     1                     1 \n     Tyrion.Lannister       Tywin.Lannister         Maester.Luwin \n                    1                     1                     1 \n           Melisandre          Jeor.Mormont         Jorah.Mormont \n                    1                     1                     1 \n                 Osha         Podrick.Payne             Pyat.Pree \n                    1                     1                     1 \nGrand.Maester.Pycelle                   Ros        Davos.Seaworth \n                    1                     1                     1 \n                 Shae              Jon.Snow            Arya.Stark \n                    1                     1                     1 \n           Bran.Stark         Catelyn.Stark            Robb.Stark \n                    1                     1                     1 \n          Sansa.Stark    Daenerys.Targaryen     Viserys.Targaryen \n                    1                     1                     1 \n        Samwell.Tarly          Loras.Tyrell                 Varys \n                    1                     1                     1 \n         Eddard.Stark \n                    1 \n\n$csize\n[1] 46\n\n$no\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# Element returned by components in the network\n\nnames(igraph::components(graph.ig))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"membership\" \"csize\"      \"no\"        \n```\n:::\n\n```{.r .cell-code}\n# Number of components in the network\n\nigraph::components(graph.ig)$no \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# Size of each component\n\nigraph::components(graph.ig)$csize \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n\n```{.r .cell-code}\n# Cluster Membership of each node\n\nigraph::components(graph.ig)$membership \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Lysa.Arryn         Petyr.Baelish     Joffrey.Baratheon \n                    1                     1                     1 \n      Margaery.Tyrell       Renly.Baratheon      Robert.Baratheon \n                    1                     1                     1 \n    Stannis.Baratheon      Brienne.of.Tarth                 Bronn \n                    1                     1                     1 \n       Gregor.Clegane        Sandor.Clegane      Xaro.Xhoan.Daxos \n                    1                     1                     1 \n               Gendry         Balon.Greyjoy         Theon.Greyjoy \n                    1                     1                     1 \n         Jaqen.H.ghar                 Hodor            Khal.Drogo \n                    1                     1                     1 \n     Cersei.Lannister       Jaime.Lannister      Lancel.Lannister \n                    1                     1                     1 \n     Tyrion.Lannister       Tywin.Lannister         Maester.Luwin \n                    1                     1                     1 \n           Melisandre          Jeor.Mormont         Jorah.Mormont \n                    1                     1                     1 \n                 Osha         Podrick.Payne             Pyat.Pree \n                    1                     1                     1 \nGrand.Maester.Pycelle                   Ros        Davos.Seaworth \n                    1                     1                     1 \n                 Shae              Jon.Snow            Arya.Stark \n                    1                     1                     1 \n           Bran.Stark         Catelyn.Stark            Robb.Stark \n                    1                     1                     1 \n          Sansa.Stark    Daenerys.Targaryen     Viserys.Targaryen \n                    1                     1                     1 \n        Samwell.Tarly          Loras.Tyrell                 Varys \n                    1                     1                     1 \n         Eddard.Stark \n                    1 \n```\n:::\n:::\n",
    "supporting": [
      "akhilesh_challenge_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}