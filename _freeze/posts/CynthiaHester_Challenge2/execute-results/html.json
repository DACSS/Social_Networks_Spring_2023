{
  "hash": "43b6213f48e3a4896149c98e0f868607",
  "result": {
    "markdown": "---\ntitle: \"Challenge 2\"\nauthor: \"Cynthia Hester\"\ndescription: \"Describing the Basic Structure of a Network\"\ndate: \"03/06/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n - Cynthia Hester\n - challenge_2\n \n---\n\n\n### Challenge 2\n\n\n\n\n\n********************************************************************************\nLoad necessary libraries\n\n\n\n\n\n\n********************************************************************************\n\nImport the GOT marriages data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages <- read_csv(\"/Users/Bud/Desktop/DACSS_697E_Social Network Analysis_SP2023/Social_Networks_SP_2023/posts/_data/got/got_marriages.csv\",show_col_types = FALSE)\n\nView(got_marriages)\n```\n:::\n\n\n\n__Looks at the first five rows and last five rows of data set__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#first five rows of marriages data\nhead(got_marriages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  From      To      Type    Notes  Generation\n  <chr>     <chr>   <chr>   <chr>  <chr>     \n1 Targaryen Stark   Married R+L=J  Current   \n2 Baratheon Martell Engaged died   Current   \n3 Baratheon Stark   Engaged broken Current   \n4 Martell   Essos   Married <NA>   Current   \n5 Martell   Reach   Affair  <NA>   Current   \n6 Martell   Essos   Affair  <NA>   Current   \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#last five rows of marriages data\ntail(got_marriages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  From       To         Type    Notes Generation\n  <chr>      <chr>      <chr>   <chr> <chr>     \n1 Targaryen  Crownlands Married <NA>  Past      \n2 Crownlands Stormlands Affair  <NA>  Past      \n3 Targaryen  Crownlands Married <NA>  Past      \n4 Targaryen  Crownlands Married <NA>  Past      \n5 Targaryen  Targaryen  Married <NA>  Past      \n6 Targaryen  Targaryen  Married <NA>  Past      \n```\n:::\n:::\n\n\n__Types of Game of Throne Marriages__\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(got_marriages$Type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Affair Engaged Married \n     36       2     217 \n```\n:::\n:::\n\n\n********************************************************************************\n\n### Create a network object\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# new network object\nmarriages.ig <- graph_from_data_frame(got_marriages, directed = FALSE)\n\n# Dataframe summary\nprint(marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 9363713 UN-- 20 255 -- \n+ attr: name (v/c), Type (e/c), Notes (e/c), Generation (e/c)\n+ edges from 9363713 (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n+ ... omitted several edges\n```\n:::\n:::\n\n********************************************************************************\n\n### Network Attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#network attributes\ngot_marriages.stat <- as.network(got_marriages, loops = TRUE, multiple = TRUE)\n\nprint(got_marriages.stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 20 \n  directed = TRUE \n  hyper = FALSE \n  loops = TRUE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 255 \n    missing edges= 0 \n    non-missing edges= 255 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names: \n    Generation Notes Type \n```\n:::\n:::\n\n\nWe have 255 vertices/nodes and 20 edges/ties\n\n__Name of the vertex or node attribute__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# node attribute name\nvertex_attr_names(marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n:::\n\n\n\n__Names__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#names extracted from the names column\nV(marriages.ig)$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Targaryen\"   \"Baratheon\"   \"Martell\"     \"Lannister\"   \"Tyrell\"     \n [6] \"Reach\"       \"North\"       \"Riverlands\"  \"Westerlands\" \"Stark\"      \n[11] \"Vale\"        \"Arryn\"       \"Tully\"       \"Frey\"        \"Crownlands\" \n[16] \"Stormlands\"  \"Essos\"       \"Septa\"       \"Dorne\"       \"Beyond Wall\"\n```\n:::\n:::\n\n\n\n__Name(s) of the edge attributes__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# edge attribute name(s)\nedge_attr_names(marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Type\"       \"Notes\"      \"Generation\"\n```\n:::\n:::\n\n\n\n__Is the network directed or undirected?__\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_directed<-is_directed(marriages.ig)\n\nif (is_directed) {\n  print(\"The network is directed.\")\n} else {\n  print(\"The network is undirected.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The network is undirected.\"\n```\n:::\n:::\n\n\n\n__Is the network weighted or unweighted?__\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_weighted<-is_weighted(marriages.ig)\n\nif (is_weighted) {\n  print(\"The network is weighted.\")\n} else {\n  print(\"The network is unweighted.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The network is unweighted.\"\n```\n:::\n:::\n\n\n\n__Is the network unimodal or bipartite?__\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_bipartite <- is_bipartite(marriages.ig)\n\nif (is_bipartite) {\n  print(\"The network is bipartite.\")\n} else {\n  print(\"The network is unimodal.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The network is unimodal.\"\n```\n:::\n:::\n\n\n\n__Let's visualise GOT Marriages network__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot  marriage network\nplot(marriages.ig,\n     vertex.size = 7,\n     vertex.color = \"blue\",\n     vertex.label.cex = 0.8,\n     main = \"Game of Thrones Marriages\")\n```\n\n::: {.cell-output-display}\n![](CynthiaHester_Challenge2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n********************************************************************************\n\n### Dyad and Triad Census\n\n\n**Dyad census**\n\nA dyad census is useful for studying the marriages within the context of Game of Thrones (GOT), specifically in the context of the **in_relation** to various noble houses and alliances. This provides insight into the power dynamics and political strategies within GOT. For instance, they could examine which Houses formed the most alliances via marriage and how these alliances changed, evolved,grew or disintegrated over time. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Dyad Census\ndyad.census(got_marriages.stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Mut Asym Null\n[1,] 125  -65  130\n```\n:::\n:::\n\n\n **Mut** - This shows we have 125 mutual relationships, i.e. there are 125 pairs of individuals in the network that have a mutual connection. This makes sense since these are marriages.\n\n **Asym** - indicates a negative **indegree-outdegree** difference shows that there is a relatively equalvalent number of incoming and outgoing ties.\n\n **Null** - indicates that the 130 possible dyads may have no observed relationship.\n \n********************************************************************************\n\n**Triad census**\n\nA triad is a group of three nodes that are connected by either two (a \"dyad\") or three edges (a \"triad\"). A triad census involves counting the number of each type of triad that occurs in a network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##triad census\ntriad.census(got_marriages.stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     003 012 102 021D 021U 021C 111D 111U 030T 030C 201 120D 120U 120C 210 300\n[1,] 408 426  18  110   44   47    9   18   50    1   0    3    5    1   0   0\n```\n:::\n:::\n\nIts observed that the high frequency of __type 012__ triads, which represent marriages where one partner is married to two others who are not married to each other, is consistent with the complexities of marriages and alliances in Game of Thrones. The significant number of __type 120U and 120D__ triads, which represent situations where two people are married to the same person, is also consistent with the practice of polygamy and multiple marriages. \n\n********************************************************************************\n\n### Global and Local Transitivity or Clustering\n\n\nCompute global transitivity using `transitivity` on `igraph` or `gtrans` on `statnet` and local transitivity of specific nodes of your choice, in addition to the average clustering coefficient. What is the distribution of node degree and how does it compare with the distribution of local transitivity?\n\n\n**Transitivity**\n\nTransitivity refers to the extent that nodes or vertices in a network have a tendency to be connected to other nodes that are also connected to each other.\n\n**Global Transitivity**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#global transitivity\n\ngot_global_transitivity = transitivity(marriages.ig, type = 'global')\ngot_global_transitivity\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4411765\n```\n:::\n:::\n\n\nThe Game of Thrones(GOT) Marriages *Global transitivity* captures the extent to which nodes or vertices in the network form tightly interconnected clusters. It yields a single value that represents the overall level of clustering in the network. In the context of GOT marriages we get a global transitivity of **0.4411765**.  This suggests that **44.1 ** percent of all possible triangles are closed, which indicates a moderately high level of clustering in the network. This makes sense in the context of GOT marriages.\n\n**Local Transitivity**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#local_transitivity\n\ngot_local_transitivity = transitivity(marriages.ig, type = 'local')\nprint(got_local_transitivity)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.3636364 0.4181818 0.4000000 0.7000000 1.0000000 0.3636364 0.1666667\n [8] 0.5714286 0.6666667 0.4166667 0.4666667 0.6666667 0.5000000 0.2888889\n[15] 0.5714286 0.7000000 0.6000000       NaN 1.0000000       NaN\n```\n:::\n:::\n\n\n**Local transitivity** measures the proportion of triangles centered at a particular node that are closed.For this GOT marriages output it suggests that most of the nodes have moderate to high local transitivity with values ranging from **0.36 to 1.0**. This indicates that the  many of the characters in the Game of Thrones are highly connected to each other through marriages and alliances. \n\nOf note,there are also a few nodes with **low local transitivity**, which may indicate these characters might be relatively isolated within the network,and have fewer connections to other characters. Furthermore, it is observed that there are a couple of nodes with missing values **(NaN)**, which means they may have no connections to other nodes in the network.\n\n********************************************************************************\n\n### Path Length and Component Structure \n\n\n__Shortest path between all pairs of nodes__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#shortest path between all pairs of nodes\nmarriages_sp<-shortest.paths(marriages.ig)\ntable(marriages_sp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmarriages_sp\n  0   1   2   3   4 \n 20 120 186  66   8 \n```\n:::\n:::\n\nIn order to get the average path length, I first calculate the shortest path between all pairs of nodes in the object **marriages_sp**. The numbers in the matrix for the shortest path represent the shortest path distances between different pairs of marriages, where each marriage is represented by a node in the network.\n\n__Average path length__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# average path length\n\nmarriages_avg_path_length<-mean(marriages_sp[is.finite(marriages_sp)])\nmarriages_avg_path_length\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.805\n```\n:::\n:::\n\n\nCalculates the average path of the  **GOT marriages** network by extracting all the finite elements from the matrix of the previously configured lengths of all pairs of marriage nodes, and then taking the mean of those finite elements. Thus, the average path length appears to be approximately **1.81**.\n\n\n\n**Diameter of GOT Marriage network **\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the diameter of network\nmarriage_diameter <- diameter(marriages.ig)\n\n# diameter of marriage network\nprint(marriage_diameter)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\nWith a diameter of **4**, this suggests that the **longest shortest path** between any pair of nodes in the GOT marriage network is 4 edges.\n\n********************************************************************************\n\n### Component Structure of network\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# component names extracted from got_marriages data\n\nnames(igraph::components(marriages.ig))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"membership\" \"csize\"      \"no\"        \n```\n:::\n:::\n\n\n**Calculates connected components of the GOT Marriage network**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#calculates connected components using the components function.\n\nigraph::components(marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$membership\n  Targaryen   Baratheon     Martell   Lannister      Tyrell       Reach \n          1           1           1           1           1           1 \n      North  Riverlands Westerlands       Stark        Vale       Arryn \n          1           1           1           1           1           1 \n      Tully        Frey  Crownlands  Stormlands       Essos       Septa \n          1           1           1           1           1           1 \n      Dorne Beyond Wall \n          1           1 \n\n$csize\n[1] 20\n\n$no\n[1] 1\n```\n:::\n:::\n\n\nIn the context of the __igraph::components()__ output a component refers to a subset of nodes in the GOT Marriages network that are connected to each other by edges/ties.\n\n**membership** - indicates which component each node belongs to. \n\n**csize**      - provides the size of each component,which is a size of **20**.\n\n**no**         - indicates the number of components.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "CynthiaHester_Challenge2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}