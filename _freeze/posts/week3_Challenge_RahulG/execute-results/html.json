{
  "hash": "6e5b6a64c65e6df405a14113a91a9a17",
  "result": {
    "markdown": "---\ntitle: \"Week3_Challenge_Rahul Gundeti\"\nauthor: \"Rahul Gundeti\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/10/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_3\n  - instructions\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#loading libraries\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(network)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'network' 1.18.1 (2023-01-24), part of the Statnet Project\n* 'news(package=\"network\")' for changes since last version\n* 'citation(\"network\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'network'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:igraph':\n\n    %c%, %s%, add.edges, add.vertices, delete.edges, delete.vertices,\n    get.edge.attribute, get.edges, get.vertex.attribute, is.bipartite,\n    is.directed, list.edge.attributes, list.vertex.attributes,\n    set.edge.attribute, set.vertex.attribute\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx lubridate::%--%()      masks igraph::%--%()\nx dplyr::as_data_frame() masks tibble::as_data_frame(), igraph::as_data_frame()\nx purrr::compose()       masks igraph::compose()\nx tidyr::crossing()      masks igraph::crossing()\nx dplyr::filter()        masks stats::filter()\nx dplyr::lag()           masks stats::lag()\nx purrr::simplify()      masks igraph::simplify()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Loading dataset\ngot_teams <- read_csv(\"_data/got/got_teams.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 33 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): team, alliance, joins\ndbl (2): id, gh\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(got_teams)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  team            id alliance     joins                    gh\n  <chr>        <dbl> <chr>        <chr>                 <dbl>\n1 Drogo            0 Opportunists follows Drogo             0\n2 Littlefinger     1 Opportunists follows Littlefinger      0\n3 Martell          2 Opportunists joins the Martells        0\n4 Red God          3 Opportunists worships the Red God      0\n5 Renly            4 Opportunists follows Renly             0\n6 Second Sons      5 Opportunists joins the Second Sons     0\n```\n:::\n\n```{.r .cell-code}\ngot_teams.igraph <-graph_from_data_frame(got_teams, directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of edges\necount(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n\n```{.r .cell-code}\n# number of vertices\nvcount(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 66\n```\n:::\n\n```{.r .cell-code}\n# vertex and edge attributes\nvertex_attr_names(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"alliance\" \"joins\"    \"gh\"      \n```\n:::\n\n```{.r .cell-code}\n# network features\nis_directed(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# dyad census\nigraph::dyad.census(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 0\n\n$asym\n[1] 33\n\n$null\n[1] 2112\n```\n:::\n\n```{.r .cell-code}\n# triad census\ntriad_census(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 43648  2112     0     0     0     0     0     0     0     0     0     0\n[13]     0     0     0     0\n```\n:::\n:::\n\n\nThe vertex attribute is 'name' and edge attributes are \"alliance\", \"joins\", \"gh\" and this network has 255 edges and 20 vertices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of components\nigraph::components(got_teams.igraph)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n\n```{.r .cell-code}\n# size of components\nigraph::components(got_teams.igraph)$csize \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n```\n:::\n:::\n\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# network density\ngraph.density(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.007692308\n```\n:::\n\n```{.r .cell-code}\n# density without loops\ngraph.density(got_teams.igraph, loops=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.007575758\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# average network degree\nigraph::degree(got_teams.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      Drogo                Littlefinger \n                          1                           1 \n                    Martell                     Red God \n                          1                           1 \n                      Renly                 Second Sons \n                          1                           1 \n                    Stannis                  Stormcrows \n                          1                           1 \n                  Targaryen                      Tyrell \n                          1                           1 \n                  Windblown          Bolton (Lannister) \n                          1                           1 \n           Frey (Lannister)                   Lannister \n                          1                           1 \n           Brave Companions                       Essos \n                          1                           1 \n                    Greyjoy              Mountain clans \n                          1                           1 \n                 the Others   Wildlings (north of wall) \n                          1                           1 \n             Bolton (North)                     Brienne \n                          1                           1 \nBrotherhood without Banners                Frey (North) \n                          1                           1 \n                      Stark                 Night Watch \n                          1                           1 \n                       none                      Robert \n                          1                           1 \n                     Tyrion           Wildling refugees \n                          1                           1 \n                    Citadel                Faceless Men \n                          1                           1 \n                      Faith                           0 \n                          1                           1 \n                          1                           2 \n                          1                           1 \n                          3                           4 \n                          1                           1 \n                          5                           6 \n                          1                           1 \n                          7                           8 \n                          1                           1 \n                          9                          10 \n                          1                           1 \n                         11                          12 \n                          1                           1 \n                         13                          14 \n                          1                           1 \n                         15                          16 \n                          1                           1 \n                         17                          18 \n                          1                           1 \n                         19                          20 \n                          1                           1 \n                         21                          22 \n                          1                           1 \n                         23                          24 \n                          1                           1 \n                         25                          26 \n                          1                           1 \n                         27                          28 \n                          1                           1 \n                         29                          30 \n                          1                           1 \n                         31                          32 \n                          1                           1 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_igraph<-data.frame(name=V(got_teams.igraph)$name, degree=igraph::degree(got_teams.igraph,loops=FALSE))\nnodes_igraph<-nodes_igraph %>%\n    mutate(indegree=igraph::degree(got_teams.igraph, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(got_teams.igraph, mode=\"out\", loops=FALSE))\nhead(nodes_igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     name degree indegree outdegree\nDrogo               Drogo      1        0         1\nLittlefinger Littlefinger      1        0         1\nMartell           Martell      1        0         1\nRed God           Red God      1        0         1\nRenly               Renly      1        0         1\nSecond Sons   Second Sons      1        0         1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nerdos_renyi.igraph <- sample_gnm(103, 200, directed = TRUE, loops = FALSE)\n# density of random network\ngraph.density(erdos_renyi.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01903674\n```\n:::\n\n```{.r .cell-code}\n# dyad census of random network\nigraph::dyad.census(erdos_renyi.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 3\n\n$asym\n[1] 194\n\n$null\n[1] 5056\n```\n:::\n\n```{.r .cell-code}\n# triad census of random network\nigraph::triad.census(erdos_renyi.igraph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 157700  18133    283    166    190    349     13      6      8      2\n[11]      0      0      1      0      0      0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_nodes<-data.frame(degree=igraph::degree(erdos_renyi.igraph))\nrandom_nodes<-rand_nodes %>%\n    mutate(indegree=igraph::degree(erdos_renyi.igraph, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(erdos_renyi.igraph, mode=\"out\", loops=FALSE))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mutate(., indegree = igraph::degree(erdos_renyi.igraph, mode = \"in\", : object 'rand_nodes' not found\n```\n:::\n\n```{.r .cell-code}\nhead(random_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree\n1      5\n2      2\n3      4\n4      7\n5      7\n6      4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(random_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     degree      \n Min.   : 0.000  \n 1st Qu.: 3.000  \n Median : 4.000  \n Mean   : 3.883  \n 3rd Qu.: 5.000  \n Max.   :10.000  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}