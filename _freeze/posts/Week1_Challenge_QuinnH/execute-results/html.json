{
  "hash": "3c4bec783b413c39d25c3595f636ccd7",
  "result": {
    "markdown": "---\ntitle: \"Week 1 Challenge\"\nauthor: \"Quinn He\"\ndescription: \"Loading Data and Creating a Network\"\ndate: \"02/13/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_1\n  - instruction\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n## Challenge Overview\n\nToday's challenge is to\n\n1) read in a dataset, and\n\n2) create a network object\n\n## Load the Data\n\nRead in one (or more) of the following data sets, using the correct R package and command.\n\n-   got_marriages.csv\n-   fish_encounters dataset (available in the `tidyr` package)\n-   got_like_dislike.csv\n\nFind the `_data` folder, located inside the `posts` folder. Then you can read in the data, using base `read.csv` or `read_csv` standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot <- read_csv(\"../posts/_data/got/got_marriages.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 255 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation.\n\n\n## Create a Network\n\nLoad the package `igraph` and create an `igraph` object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\nThe first graph I create is by attempting to add weights to the edges based on what we discussed in class. I am still looking for resources on statnet graphing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot2<- group_by(got, From, To) %>% \n  summarise(weight = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'From'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngot2_graph <- graph_from_data_frame(got2, directed = F)\nplot(got2_graph)\n```\n\n::: {.cell-output-display}\n![](Week1_Challenge_QuinnH_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThe next graph is using basic, unweighted functions.\n\n::: {.cell}\n\n```{.r .cell-code}\n#deg <- degree(got, mode=\"all\")\n#V(got)$size <-deg*3\n\ngot_graph <- graph_from_data_frame(got, directed = F)\nplot(got_graph)\n```\n\n::: {.cell-output-display}\n![](Week1_Challenge_QuinnH_files/figure-html/summary-1.png){width=672}\n:::\n:::\n\nThe graph is an undirected graph because when we look at marriage networks, when one is married to the other person, that other person is also married. It's a mutual relationship. Groups of certain families have a history of marrying one another according to this network. There are even internal marriages that take place within certain families. The Tyrells only marry to two houses. What families have the marriages with the most families? Which families tend to marry the most within themselves?\n\n\nThe Targaryens have the most marriages in other families. Since degree represents the total edges connected to the particular nodes, I can see that with 85 total degrees, the Targaryen family has the most marriages to other houses. \n\n::: {.cell}\n\n```{.r .cell-code}\nvcount(got_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\necount(got_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 255\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndegree(got_graph)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in FUN(X[[i]], ...): as.edgelist.sna input must be an adjacency matrix/array, edgelist matrix, network, or sparse matrix, or list thereof.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_weighted(got_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_bipartite(got_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\nThe network is both not weighted and not bipartite.",
    "supporting": [
      "Week1_Challenge_QuinnH_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}