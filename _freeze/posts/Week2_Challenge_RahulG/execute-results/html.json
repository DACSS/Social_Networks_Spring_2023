{
  "hash": "4fff46be140417c156b04d5c31bd8b34",
  "result": {
    "markdown": "---\ntitle: \"Week2_Challenge_RahulG\"\nauthor: \"Rahul Gundeti\"\ndescription: \"Describing the Basic Structure of a Network\"\ndate: \"02/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_2\n  - instructions\n---\n\n\n\n\n#### Challenge Overview\n\nDescribe the basic structure of a network following the steps in tutorial of week 2, this time using a dataset of your choice: for instance, you could use Marriages in Game of Thrones or Like/Dislike from week 1.\n\nAnother more complex option is the newly added dataset of the US input-output table of direct requirements by industry, availabe in the Bureau of Economic Analysis. Input-output tables show the economic transactions between industries of an economy and thus can be understood as a directed adjacency matrix. Data is provided in the form of an \\`XLSX\\` file, so using \\`read_xlsx\\` from package \\`readxl\\` is recommended, including the \\`sheet\\` as an argument (\\`2012\\` for instance).\n\nIdentify and describe content of nodes and links, and identify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and whether attribute data are present. Be sure to provide information about network size (e.g., information obtained from network description using week 1 network basic tutorial commands.)\n\nExplore the dataset using commands from week 2 tutorial. Comment on the highlighted aspects of network structure such as:\n\n\\- Geodesic and Path Distances; Path Length\n\n\\- Dyads and Dyad Census\n\n\\- Triads and Triad Census\n\n\\- Network Transitivity and Clustering\n\n\\- Component Structure and Membership\n\nBe sure to both provide the relevant statistics calculated in \\`R\\`, as well as your own interpretation of these statistics.\n\n##### Describe the Network Data\n\n1\\. \\*List and inspect\\* List the objects to make sure the datafiles are working properly.\n\n2\\. \\*Network Size\\* What is the size of the network? You may use \\`vcount\\` and \\`ecount\\`.\n\n3\\. \\*Network features\\* Are these networks weighted, directed, and bipartite?\n\n4\\. \\*Network Attributes\\* Now, using commands from either \\`statnet\\` or \\`igraph\\`, list the vertex and edge attributes.\n\n##### Dyad and Triad Census\n\nNow try a full dyad census. This gives us the number of dyads where the relationship is:\n\n\\- Reciprocal (mutual), or \\`mut\\`\n\n\\- Asymmetric (non-mutual), or \\`asym\\`, and\n\n\\- Absent, or \\`null\\`\n\nNow use \\`triad.census\\` in order to do a triad census.\n\n##### Global and Local Transitivity or Clustering\n\nCompute global transitivity using \\`transitivity\\` on \\`igraph\\` or \\`gtrans\\` on \\`statnet\\` and local transitivity of specific nodes of your choice, in addition to the average clustering coefficient. What is the distribution of node degree and how does it compare with the distribution of local transitivity?\n\n##### Path Length and Component Structure\n\nCan you compute the average path length and the \\_diameter\\_ of the network? Can you find the component structure of the network and identify the cluster membership of each node?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#loading libraries\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n\nThe following objects are masked from 'package:lubridate':\n\n    %--%, union\n\nThe following objects are masked from 'package:dplyr':\n\n    as_data_frame, groups, union\n\nThe following objects are masked from 'package:purrr':\n\n    compose, simplify\n\nThe following object is masked from 'package:tidyr':\n\n    crossing\n\nThe following object is masked from 'package:tibble':\n\n    as_data_frame\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Loading dataset\ngot_family <- read_csv(\"_data/got/got_family.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 21 Columns: 3\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): Family, Region, Color\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(got_family)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  Family       Region       Color      \n  <chr>        <chr>        <chr>      \n1 Crownlands   Crownlands   red        \n2 Targaryen    Crownlands   red3       \n3 Dorne        Dorne        navajowhite\n4 Martell      Dorne        orange     \n5 Iron Islands Iron Islands grey95     \n6 Greyjoy      Iron Islands lightgrey  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nls(got_family)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Color\"  \"Family\" \"Region\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Network size can be determined by vcount and ecount\n#Network features\nnetw <- graph_from_data_frame(got_family, directed = TRUE)\nvcount(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n\n```{.r .cell-code}\necount(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(netw) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_directed(netw) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nThere are 22 edges and 21 vertices\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Network attributes\nigraph::vertex_attr_names(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nigraph::edge_attr_names(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Color\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Dyad census\nigraph::dyad.census(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 0\n\n$asym\n[1] 11\n\n$null\n[1] 220\n```\n:::\n:::\n\n\nreciprocal dyads-0\n\nasymetrics dyads-11\n\nnull dyads-220\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Triad Census\nigraph::triad.census(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1321  218    0    0    1    0    0    0    0    0    0    0    0    0    0\n[16]    0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Global and Transitivity clustering\ntransitivity(netw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\ntransitivity(netw, type = 'global')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\ntransitivity(netw, type = 'average')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pathlength and component structure\naverage.path.length(netw,directed = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nigraph::components(netw)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n\n```{.r .cell-code}\nigraph::components(netw)$csize\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2 2 2 2 2 2 3 2 2 1 2\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}