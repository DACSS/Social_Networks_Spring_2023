{
  "hash": "4e358793422fb13915bea729ee6a6905",
  "result": {
    "markdown": "---\ntitle: \"Challenge_Three\"\nauthor: \"Cynthia Hester\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/06/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories: \n  - hw_challenge_3\n  - Cynthia Hester\n\n---\n\n\n\n\n#### GOT distances data set\n\nDescribe the many measures of degree, as well as density, of a network and compare \n\n\n\n#### Import Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\ngot_distances <- readr::read_csv(\"C:/Users/Bud/Desktop/DACSS_697E_Social Network Analysis_SP2023/Social_Networks_SP_2023/posts/_data/got/got_distances.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 200 Columns: 6\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): Region From, From, To, Mode, Notes\ndbl (1): Miles\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(got_distances)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_distances.ig <-graph_from_data_frame(got_distances, directed = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#nodes\nvcount(got_distances.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#edges\necount(got_distances.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#names of nodes attributes\nvertex_attr_names(got_distances.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#edge attributes\n\nedge_attr_names(got_distances.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#dyad census\n\nigraph::dyad.census(got_distances.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#triad census\n\nigraph::triad.census(got_distances.ig)\n```\n:::\n\n\n\n## Density\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# density\ngraph.density(got_distances.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# density without loops\ngraph.density(got_distances.ig, loops=FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# density with loops\ngraph.density(got_distances.ig, loops=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# the degree of each node\nnode_degrees <- igraph::degree(got_distances.ig)\nprint(node_degrees)\n\n\n# average degree\navg_degree <- mean(node_degrees)\nprint(avg_degree)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# data frame with node names and degree\ngraph_nodes <- data.frame(name = V(got_distances.ig)$name, degree = igraph::degree(got_distances.ig, loops = FALSE))\n\n# in_degree and out_degree \ngraph_nodes <- graph_nodes %>%\n    mutate(in_degree = igraph::degree(got_distances.ig, mode = \"in\", loops = FALSE),\n           out_degree = igraph::degree(got_distances.ig, mode = \"out\", loops = FALSE))\n```\n:::\n\n\n\nrechecking rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(graph_nodes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_nodes <- vcount(got_distances.ig)\nnum_edges <- ecount(got_distances.ig)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(num_nodes)\nprint(num_edges)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_network_erdos <- sample_gnm(n = num_nodes, m = num_edges, directed = FALSE, loops = FALSE)\n\nprint(random_network_erdos)\n```\n:::\n\n\n\n#### Random Network\n\nCreate a random (Erdos-Renyi) network with the same number of nodes and edges than the network of your choice. On `igraph`, the necessary commands are `random.graph.game(n, p.or.m, type = c(\"gnp\", \"gnm\"), directed = FALSE, loops = FALSE)` (deprecated), `sample_gnp(n, p, directed = FALSE, loops = FALSE)` or `sample_gnm(n, m, directed = FALSE, loops = FALSE)`. The `p.or.m` argument is to specify the probability of an edge $p$ or the number of edges $m$.\n  \nCompare the densities, dyad and triad censuses, and degree distributions, with the measures of the network of your choice. Does the comparison us something about the network of your choice? \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Density\ndensity_original <- graph.density(got_distances.ig)\ndensity_random <- graph.density(random_network_erdos)\n\nprint(paste(\"Density of GOT Distances network: \", density_original))\nprint(paste(\"Density of random network: \", density_random))\n\n# Dyad census\ndyad_original <- dyad_census(got_distances.ig)\ndyad_random <- dyad_census(random_network_erdos)\n\nprint(dyad_original)\nprint(dyad_random)\n\n# Triad census\ntriad_original <- triad_census(got_distances.ig)\ntriad_random <- triad_census(random_network_erdos)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in triad_census(random_network_erdos): At core/misc/motifs.c:1165 :\nTriad census called on an undirected graph.\n```\n:::\n\n```{.r .cell-code}\nprint(triad_original)\nprint(triad_random)\n\n# Degree distribution\n\ndegree_original <- degree_distribution(got_distances.ig, cumulative = TRUE)\ndegree_random <- degree_distribution(random_network_erdos, cumulative = TRUE)\n\nplot(degree_original, main=\"Degree Distribution of GOT Distances\", xlab=\"Degree\", ylab=\"Frequency\", type='l')\n```\n\n::: {.cell-output-display}\n![](CynthiaHester_Challenge3_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(degree_random, main=\"Degree Distribution of Random Network_Erdos-Renyi\", xlab=\"Degree\", ylab=\"Frequency\", type='l')\n```\n\n::: {.cell-output-display}\n![](CynthiaHester_Challenge3_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n:::",
    "supporting": [
      "CynthiaHester_Challenge3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}