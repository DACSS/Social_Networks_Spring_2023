{
  "hash": "b550093ea0746a20219c49ddb71283ea",
  "result": {
    "markdown": "---\ntitle: \"Week 1 Challenge\"\nauthor: \"Ananya Pujary\"\ndescription: \"Loading Data and Creating a Network\"\ndate: \"02/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_1\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n## Challenge Overview\n\nToday's challenge is to\n\n1) read in a dataset, and\n\n2) create a network object\n\n## Load the Data\n\nReading in the `got_marriages.csv` file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages<-read_csv(\"../posts/_data/got/got_marriages.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 255 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ngot_marriages\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 255 × 5\n   From      To        Type    Notes  Generation\n   <chr>     <chr>     <chr>   <chr>  <chr>     \n 1 Targaryen Stark     Married R+L=J  Current   \n 2 Baratheon Martell   Engaged died   Current   \n 3 Baratheon Stark     Engaged broken Current   \n 4 Martell   Essos     Married <NA>   Current   \n 5 Martell   Reach     Affair  <NA>   Current   \n 6 Martell   Essos     Affair  <NA>   Current   \n 7 Martell   Essos     Affair  <NA>   Current   \n 8 Martell   Septa     Affair  <NA>   Current   \n 9 Martell   Dorne     Affair  <NA>   Current   \n10 Martell   Targaryen Married <NA>   Current   \n# … with 245 more rows\n```\n:::\n:::\n\n\n## Create a Network\n\nCreating an `igraph` object and finding out whether the network directed, weighted or bipartite.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# not adjacency matrix, not n x n matrix => undirected\ngot_marriages.ig <-graph_from_data_frame(got_marriages, directed = FALSE)\n\nhead(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6 x 20 sparse Matrix of class \"dgCMatrix\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n   [[ suppressing 20 column names 'Targaryen', 'Baratheon', 'Martell' ... ]]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                     \nTargaryen 19 2 3 . .  4 . 7  1 1 2 3 . . 11 3 8 . 2 .\nBaratheon  2 . 1 1 4  2 . 1  1 1 1 . . .  2 1 . . . .\nMartell    3 1 . . .  1 . .  . . . . . .  . . 4 1 2 .\nLannister  . 1 . 4 .  1 . . 15 1 . . . 2  . . . . . .\nTyrell     . 4 . . .  8 . .  . . . . . .  . . . . . .\nReach      4 2 1 1 8 12 1 3  1 . . . . 2  . 1 1 . . .\n```\n:::\n\n```{.r .cell-code}\n# describing the network\nis_directed(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\nThus, this network is undirected, unimodal, and unweighted.\n\nNow, I'll plot the network:\n\n::: {.cell}\n\n```{.r .cell-code}\n# plotting the network \nplot(got_marriages.ig, edge.curved=.1, vertex.color = \"orange\")\n```\n\n::: {.cell-output-display}\n![](Week1_Challenge_AnanyaPujary_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Week1_Challenge_AnanyaPujary_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}