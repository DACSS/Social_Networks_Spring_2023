{
  "hash": "685cd5abf0b7f8e7d09c5d1fef15ecbf",
  "result": {
    "markdown": "---\ntitle: \"Week 3 Challenge Instructions\"\nauthor: \"Mani Kanta Gogula\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/06/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_3\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(network)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'network' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'network' 1.18.1 (2023-01-24), part of the Statnet Project\n* 'news(package=\"network\")' for changes since last version\n* 'citation(\"network\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'network'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:igraph':\n\n    %c%, %s%, add.edges, add.vertices, delete.edges, delete.vertices,\n    get.edge.attribute, get.edges, get.vertex.attribute, is.bipartite,\n    is.directed, list.edge.attributes, list.vertex.attributes,\n    set.edge.attribute, set.vertex.attribute\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.2 --\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nv ggplot2 3.4.0      v purrr   0.3.5 \nv tibble  3.1.8      v dplyr   1.0.10\nv tidyr   1.2.1      v stringr 1.5.0 \nv readr   2.1.3      v forcats 0.5.2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tibble' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'forcats' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::as_data_frame() masks tibble::as_data_frame(), igraph::as_data_frame()\nx purrr::compose()       masks igraph::compose()\nx tidyr::crossing()      masks igraph::crossing()\nx dplyr::filter()        masks stats::filter()\nx dplyr::lag()           masks stats::lag()\nx purrr::simplify()      masks igraph::simplify()\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\ngot_marriages <- read_csv(\"_data/got/got_marriages.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 255 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(got_marriages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  From      To      Type    Notes  Generation\n  <chr>     <chr>   <chr>   <chr>  <chr>     \n1 Targaryen Stark   Married R+L=J  Current   \n2 Baratheon Martell Engaged died   Current   \n3 Baratheon Stark   Engaged broken Current   \n4 Martell   Essos   Married <NA>   Current   \n5 Martell   Reach   Affair  <NA>   Current   \n6 Martell   Essos   Affair  <NA>   Current   \n```\n:::\n\n```{.r .cell-code}\ngot_marriages.ig <-graph_from_data_frame(got_marriages, directed = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of edges\necount(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 255\n```\n:::\n\n```{.r .cell-code}\n# number of vertices\nvcount(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\n# vertex and edge attributes\nvertex_attr_names(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Type\"       \"Notes\"      \"Generation\"\n```\n:::\n\n```{.r .cell-code}\n# network features\nis_directed(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# dyad census\nigraph::dyad.census(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 3\n\n$asym\n[1] 57\n\n$null\n[1] 130\n```\n:::\n\n```{.r .cell-code}\n# triad census\ntriad_census(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 408 227 217 110  44  47   9  18  50   1   0   3   5   1   0   0\n```\n:::\n:::\n\n\nThis network has 255 edges and 20 vertices. The vertex attribute is 'name' and edge attributes are \"Type\", \"Notes\", \"Generation\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of components\nigraph::components(got_marriages.ig)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# size of components\nigraph::components(got_marriages.ig)$csize \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n\n\n\n\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# network density\ngraph.density(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6710526\n```\n:::\n\n```{.r .cell-code}\n# density without loops\ngraph.density(got_marriages.ig, loops=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6375\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# average network degree\nigraph::degree(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Targaryen   Baratheon     Martell   Lannister      Tyrell       Reach \n         85          17          12          28          12          49 \n      North  Riverlands Westerlands       Stark        Vale       Arryn \n         46          39          31          34          37          10 \n      Tully        Frey  Crownlands  Stormlands       Essos       Septa \n          5          51          22          11          15           1 \n      Dorne Beyond Wall \n          4           1 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_ig<-data.frame(name=V(got_marriages.ig)$name, degree=igraph::degree(got_marriages.ig,loops=FALSE))\nnodes_ig<-nodes_ig %>%\n    mutate(indegree=igraph::degree(got_marriages.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(got_marriages.ig, mode=\"out\", loops=FALSE))\nhead(nodes_ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               name degree indegree outdegree\nTargaryen Targaryen     47        1        46\nBaratheon Baratheon     17        2        15\nMartell     Martell     12        3         9\nLannister Lannister     20        2        18\nTyrell       Tyrell     12        4         8\nReach         Reach     25       21         4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nerdos_renyi.ig <- sample_gnm(103, 200, directed = TRUE, loops = FALSE)\n\n# density of random network\ngraph.density(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01903674\n```\n:::\n\n```{.r .cell-code}\n# dyad census of random network\nigraph::dyad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 3\n\n$asym\n[1] 194\n\n$null\n[1] 5056\n```\n:::\n\n```{.r .cell-code}\n# triad census of random network\nigraph::triad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 157678  18168    285    183    166    351     10      5      2      1\n[11]      1      0      1      0      0      0\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_rand<-data.frame(degree=igraph::degree(erdos_renyi.ig))\nnodes_rand<-nodes_rand %>%\n    mutate(indegree=igraph::degree(erdos_renyi.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(erdos_renyi.ig, mode=\"out\", loops=FALSE))\nhead(nodes_rand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree indegree outdegree\n1      4        3         1\n2      5        1         4\n3      8        5         3\n4      4        2         2\n5      5        2         3\n6      4        3         1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(nodes_rand)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     degree         indegree       outdegree    \n Min.   :0.000   Min.   :0.000   Min.   :0.000  \n 1st Qu.:3.000   1st Qu.:1.000   1st Qu.:1.000  \n Median :4.000   Median :2.000   Median :2.000  \n Mean   :3.883   Mean   :1.942   Mean   :1.942  \n 3rd Qu.:5.000   3rd Qu.:3.000   3rd Qu.:3.000  \n Max.   :9.000   Max.   :6.000   Max.   :6.000  \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}