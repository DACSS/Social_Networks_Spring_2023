{
  "hash": "3d6087a7375092a55a3f9918d3103b54",
  "result": {
    "markdown": "---\ntitle: \"Challenge 2 Mekhala\"\nauthor: \"Mekhala Kumar\"\ndescription: \"Describing the Basic Structure of a Network\"\ndate: \"03/24/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_2\n  - Mekhala Kumar\n  - got like_dislike \n\n---\n\n\n\n\n## Reading in the data\n\n::: {.cell}\n\n```{.r .cell-code}\nlike_dislike<-read_csv(\"_data/got/got_like_dislike.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 46 Columns: 49\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Current house, Former house, Name\ndbl (46): Lysa Arryn, Petyr Baelish, Joffrey Baratheon, Margaery Tyrell, Ren...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(like_dislike)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 49\n  Curren…¹ Forme…² Name  Lysa …³ Petyr…⁴ Joffr…⁵ Marga…⁶ Renly…⁷ Rober…⁸ Stann…⁹\n  <chr>    <chr>   <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Arryn    Tully   Lysa…      NA       3       0       0       0       1       0\n2 Baelish  <NA>    Pety…       3      NA      -1       1      -2       1      -1\n3 Lannist… Barath… Joff…       0      -1      NA       4      -3       2      -5\n4 Tyrell   Barath… Marg…       0       1       3      NA       5       0      -5\n5 Barathe… <NA>    Renl…       0      -2      -5       5      NA       3      -5\n6 Barathe… <NA>    Robe…       2       1       4       0       3      NA       2\n# … with 39 more variables: `Brienne of Tarth` <dbl>, Bronn <dbl>,\n#   `Gregor Clegane` <dbl>, `Sandor Clegane` <dbl>, `Xaro Xhoan Daxos` <dbl>,\n#   Gendry <dbl>, `Balon Greyjoy` <dbl>, `Theon Greyjoy` <dbl>,\n#   `Jaqen H'ghar` <dbl>, Hodor <dbl>, `Khal Drogo` <dbl>,\n#   `Cersei Lannister` <dbl>, `Jaime Lannister` <dbl>,\n#   `Lancel Lannister` <dbl>, `Tyrion Lannister` <dbl>,\n#   `Tywin Lannister` <dbl>, `Maester Luwin` <dbl>, Melisandre <dbl>, …\n```\n:::\n:::\n\n\n## Converting into Network data format\nIn the adjacency matrix I looked for which values had an edge to compare the number of edges reported once the network is created. \n\n::: {.cell}\n\n```{.r .cell-code}\nadj<-subset(like_dislike[4:49])\nvertex_names<-colnames(adj)\nrow.names(adj) <- vertex_names\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Setting row names on a tibble is deprecated.\n```\n:::\n\n```{.r .cell-code}\nadj_mat <- data.matrix(adj)\n#diag(adj_mat) <- 0\ntable(adj_mat != 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n  927  1143 \n```\n:::\n\n```{.r .cell-code}\n#igraph\nlike_dislike.net <- graph_from_adjacency_matrix(adj_mat, mode = \"directed\", weighted = TRUE, diag = FALSE)\nV(like_dislike.net)$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Lysa Arryn\"            \"Petyr Baelish\"         \"Joffrey Baratheon\"    \n [4] \"Margaery Tyrell\"       \"Renly Baratheon\"       \"Robert Baratheon\"     \n [7] \"Stannis Baratheon\"     \"Brienne of Tarth\"      \"Bronn\"                \n[10] \"Gregor Clegane\"        \"Sandor Clegane\"        \"Xaro Xhoan Daxos\"     \n[13] \"Gendry\"                \"Balon Greyjoy\"         \"Theon Greyjoy\"        \n[16] \"Jaqen H'ghar\"          \"Hodor\"                 \"Khal Drogo\"           \n[19] \"Cersei Lannister\"      \"Jaime Lannister\"       \"Lancel Lannister\"     \n[22] \"Tyrion Lannister\"      \"Tywin Lannister\"       \"Maester Luwin\"        \n[25] \"Melisandre\"            \"Jeor Mormont\"          \"Jorah Mormont\"        \n[28] \"Osha\"                  \"Podrick Payne\"         \"Pyat Pree\"            \n[31] \"Grand Maester Pycelle\" \"Ros\"                   \"Davos Seaworth\"       \n[34] \"Shae\"                  \"Jon Snow\"              \"Arya Stark\"           \n[37] \"Bran Stark\"            \"Catelyn Stark\"         \"Robb Stark\"           \n[40] \"Sansa Stark\"           \"Daenerys Targaryen\"    \"Viserys Targaryen\"    \n[43] \"Samwell Tarly\"         \"Loras Tyrell\"          \"Varys\"                \n[46] \"Eddard Stark\"         \n```\n:::\n\n```{.r .cell-code}\n#statnet\nlike_dislike_statnet <- network(adj_mat,matrix.type=\"adjacency\", directed=TRUE, loops = FALSE)\n```\n:::\n\n\n\n## Describe the Network Data\n\nThe network has 46 vertices and 1143 edges. It is unimodal, directed and weighted. I tried the commands both in igraph and statnet because initially I was getting different number of edges for the two so I wanted to check if there were any inconsistencies remaining. \n\n::: {.cell}\n\n```{.r .cell-code}\n#igraph\nvcount(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n\n```{.r .cell-code}\necount(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1143\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_directed(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nvertex_attr_names(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"weight\"\n```\n:::\n\n```{.r .cell-code}\nV(like_dislike.net)$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Lysa Arryn\"            \"Petyr Baelish\"         \"Joffrey Baratheon\"    \n [4] \"Margaery Tyrell\"       \"Renly Baratheon\"       \"Robert Baratheon\"     \n [7] \"Stannis Baratheon\"     \"Brienne of Tarth\"      \"Bronn\"                \n[10] \"Gregor Clegane\"        \"Sandor Clegane\"        \"Xaro Xhoan Daxos\"     \n[13] \"Gendry\"                \"Balon Greyjoy\"         \"Theon Greyjoy\"        \n[16] \"Jaqen H'ghar\"          \"Hodor\"                 \"Khal Drogo\"           \n[19] \"Cersei Lannister\"      \"Jaime Lannister\"       \"Lancel Lannister\"     \n[22] \"Tyrion Lannister\"      \"Tywin Lannister\"       \"Maester Luwin\"        \n[25] \"Melisandre\"            \"Jeor Mormont\"          \"Jorah Mormont\"        \n[28] \"Osha\"                  \"Podrick Payne\"         \"Pyat Pree\"            \n[31] \"Grand Maester Pycelle\" \"Ros\"                   \"Davos Seaworth\"       \n[34] \"Shae\"                  \"Jon Snow\"              \"Arya Stark\"           \n[37] \"Bran Stark\"            \"Catelyn Stark\"         \"Robb Stark\"           \n[40] \"Sansa Stark\"           \"Daenerys Targaryen\"    \"Viserys Targaryen\"    \n[43] \"Samwell Tarly\"         \"Loras Tyrell\"          \"Varys\"                \n[46] \"Eddard Stark\"         \n```\n:::\n\n```{.r .cell-code}\n#statnet\nprint(like_dislike_statnet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 46 \n  directed = TRUE \n  hyper = FALSE \n  loops = FALSE \n  multiple = FALSE \n  bipartite = FALSE \n  total edges= 1143 \n    missing edges= 0 \n    non-missing edges= 1143 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names not shown \n```\n:::\n:::\n\n## Dyad and Triad Census\nThere are 554 mutual connections, 35 non-mutual connections and 446 nodes which are not connected. \n\n::: {.cell}\n\n```{.r .cell-code}\nigraph::dyad.census(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 554\n\n$asym\n[1] 35\n\n$null\n[1] 446\n```\n:::\n\n```{.r .cell-code}\nsna::dyad.census(like_dislike_statnet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Mut Asym Null\n[1,] 554   35  446\n```\n:::\n:::\n\n## Triad Census\n\n::: {.cell}\n\n```{.r .cell-code}\nigraph::triad_census(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1780  308 4637    5   11   22  222  285    1    1 3849    8   19   26  537\n[16] 3469\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsna::triad.census(like_dislike_statnet, mode=\"graph\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        0    1    2    3\n[1,] 1975 5109 4405 3691\n```\n:::\n:::\n\n\n\n## Global and Local Transitivity or Clustering\n\nThe global transitivity is slightly smaller than the average local clustering coefficient. This shows on average, the density globally is comparable to the density for the local ego networks. \n\n::: {.cell}\n\n```{.r .cell-code}\n#Global\ntransitivity(like_dislike.net, type=\"global\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7349339\n```\n:::\n\n```{.r .cell-code}\n##Average local clustering coefficient\ntransitivity(like_dislike.net, type=\"average\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.754549\n```\n:::\n\n```{.r .cell-code}\ngtrans(like_dislike_statnet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7184677\n```\n:::\n:::\n\nIt can  be seen that the density for Ros' network higher in comparison to the density across the network whereas the density for Arya Stark's and Bronn's networks are comparable to the global and average clustering coefficients. \n\n::: {.cell}\n\n```{.r .cell-code}\n#Local\nV(like_dislike.net)[c(\"Arya Stark\",\"Ros\", \"Bronn\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 3/46 vertices, named, from c2734b5:\n[1] Arya Stark Ros        Bronn     \n```\n:::\n\n```{.r .cell-code}\ntransitivity(like_dislike.net,type=\"local\",vids=V(like_dislike.net)[c(\"Arya Stark\",\"Ros\", \"Bronn\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7045455 0.8888889 0.7632184\n```\n:::\n:::\n\n\n## Path Length, Geodesic and Component Structure \nI looked into the shortest paths and distances between a few of the people. \n\n::: {.cell}\n\n```{.r .cell-code}\nall_shortest_paths(like_dislike.net,from=\"Ros\",to=\"Jon Snow\", mode=\"out\",weights=NA)$res\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros              Cersei Lannister Jon Snow        \n\n[[2]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros           Theon Greyjoy Jon Snow     \n\n[[3]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros              Robert Baratheon Jon Snow        \n\n[[4]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros               Joffrey Baratheon Jon Snow         \n```\n:::\n\n```{.r .cell-code}\nall_shortest_paths(like_dislike.net,from=\"Ros\",to=\"Jon Snow\", mode=\"in\",weights=NA)$res\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros              Cersei Lannister Jon Snow        \n\n[[2]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros           Theon Greyjoy Jon Snow     \n\n[[3]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros              Robert Baratheon Jon Snow        \n\n[[4]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Ros               Joffrey Baratheon Jon Snow         \n```\n:::\n\n```{.r .cell-code}\nall_shortest_paths(like_dislike.net,from=\"Bronn\",to=\"Arya Stark\", mode=\"in\",weights=NA)$res\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn        Eddard Stark Arya Stark  \n\n[[2]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn      Varys      Arya Stark\n\n[[3]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn        Loras Tyrell Arya Stark  \n\n[[4]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn             Viserys Targaryen Arya Stark       \n\n[[5]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn              Daenerys Targaryen Arya Stark        \n\n[[6]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn       Sansa Stark Arya Stark \n\n[[7]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn      Robb Stark Arya Stark\n\n[[8]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn         Catelyn Stark Arya Stark   \n\n[[9]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn          Davos Seaworth Arya Stark    \n\n[[10]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn         Jorah Mormont Arya Stark   \n\n[[11]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn      Melisandre Arya Stark\n\n[[12]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn           Tywin Lannister Arya Stark     \n\n[[13]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn           Jaime Lannister Arya Stark     \n\n[[14]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn            Cersei Lannister Arya Stark      \n\n[[15]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn         Theon Greyjoy Arya Stark   \n\n[[16]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn      Gendry     Arya Stark\n\n[[17]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn          Gregor Clegane Arya Stark    \n\n[[18]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn            Brienne of Tarth Arya Stark      \n\n[[19]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn             Stannis Baratheon Arya Stark       \n\n[[20]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn             Joffrey Baratheon Arya Stark       \n\n[[21]]\n+ 3/46 vertices, named, from c2734b5:\n[1] Bronn         Petyr Baelish Arya Stark   \n```\n:::\n\n```{.r .cell-code}\ndistances(like_dislike.net,v=\"Bronn\",to=\"Ros\",weights=NA,algorithm=\"johnson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Ros\nBronn   2\n```\n:::\n\n```{.r .cell-code}\ndistances(like_dislike.net,v=\"Bronn\",to=\"Arya Stark\",weights=NA,algorithm=\"johnson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Arya Stark\nBronn          2\n```\n:::\n\n```{.r .cell-code}\ndistances(like_dislike.net,v=\"Arya Stark\",to=\"Jon Snow\",weights=NA,algorithm=\"johnson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jon Snow\nArya Stark        1\n```\n:::\n:::\n\n## Average path length\nSince this network has negative weights, I was unable to use the commands for average path length and diameter directly. Hence, I converted the values by adding 10 to each observation to make the values positive. This made the original neutral connections equal to 10 which I changed back to 0 in order to avoid confusion regarding the distances calculated. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_adj<-adj_mat+10\nnew_adj[new_adj == 10] <- 0\nlike_dislike2 <- graph_from_adjacency_matrix(new_adj, mode = \"directed\", weighted = TRUE, diag = FALSE)\n\naverage.path.length(like_dislike2,directed=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.24589\n```\n:::\n\n```{.r .cell-code}\ndiameter(like_dislike2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n:::\n\n\n## Component Structure\nThis network consists of a single component with 46 members. \n\n::: {.cell}\n\n```{.r .cell-code}\nnames(igraph::components(like_dislike.net))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"membership\" \"csize\"      \"no\"        \n```\n:::\n\n```{.r .cell-code}\n#igraph::components(like_dislike.net)$membership #very long list\nigraph::components(like_dislike.net)$no \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nigraph::components(like_dislike.net)$csize\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n:::\n\nThere are no isolates in this network. \n\n::: {.cell}\n\n```{.r .cell-code}\nisolates(like_dislike_statnet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ninteger(0)\n```\n:::\n:::\n\n## Plot\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(like_dislike.net)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in v(graph): Non-positive edge weight found, ignoring all weights\nduring graph layout.\n```\n:::\n\n::: {.cell-output-display}\n![](Challenge_2_Mekhala_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::",
    "supporting": [
      "Challenge_2_Mekhala_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}