{
  "hash": "4e1ac6f83232b7ba96e0e62c34c1afa0",
  "result": {
    "markdown": "---\ntitle: \"Week 4 Challenge\"\nauthor: \"Akhilesh Kumar\"\ndescription: \"Centrality of a Network\"\ndate: \"04/20/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_4\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\nlibrary(network)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'network' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n'network' 1.18.1 (2023-01-24), part of the Statnet Project\n* 'news(package=\"network\")' for changes since last version\n* 'citation(\"network\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'network'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:igraph':\n\n    %c%, %s%, add.edges, add.vertices, delete.edges, delete.vertices,\n    get.edge.attribute, get.edges, get.vertex.attribute, is.bipartite,\n    is.directed, list.edge.attributes, list.vertex.attributes,\n    set.edge.attribute, set.vertex.attribute\n```\n:::\n:::\n\n\n## Reading Data\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages <- read.csv(\"_data/got/got_marriages.csv\")\nhead(got_marriages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       From      To    Type  Notes Generation\n1 Targaryen   Stark Married  R+L=J    Current\n2 Baratheon Martell Engaged   died    Current\n3 Baratheon   Stark Engaged broken    Current\n4   Martell   Essos Married           Current\n5   Martell   Reach  Affair           Current\n6   Martell   Essos  Affair           Current\n```\n:::\n\n```{.r .cell-code}\ngot_marriages.ig <-graph_from_data_frame(got_marriages, directed = TRUE)\n```\n:::\n\n\n## Challenge Overview\n\nDescribe the many measures of centrality of at least one network of your choice.\n\n\n## Describe the Network Data\n\nIf you have not done it before, always start by evaluating the basic structure of the network (number of edges and vertices, dyad and triad census, etc.). Create a data frame `nodes` with the corresponding local attributes such as degree or local transitivity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of vertices in got_marriages network:\n\nvcount(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\n# Number of edges in got_marriages network:\n\necount(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 255\n```\n:::\n\n```{.r .cell-code}\n# Bipartite or single mode network verification in got_marriages network:\n\nis_bipartite(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Directed or undirected edges verification in got_marriages network\n\nis_directed(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Weighted or unweighted edges verification in got_marriages network\n\nis_weighted(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Is Connected verification in got_marriages network\n\nis_connected(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Degree calculation in got_marriages network\n\ndegree = degree(got_marriages.ig)\n\n# Indegree\n\ndegree(got_marriages.ig, mode = 'out')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Targaryen   Baratheon     Martell   Lannister      Tyrell       Reach \n         65          15           9          22           8          16 \n      North  Riverlands Westerlands       Stark        Vale       Arryn \n         13           5           3          27          11           6 \n      Tully        Frey  Crownlands  Stormlands       Essos       Septa \n          2          47           5           1           0           0 \n      Dorne Beyond Wall \n          0           0 \n```\n:::\n\n```{.r .cell-code}\n# Local Transitivity calculation in got_marriages network\n\ntransitivity(got_marriages.ig, type = \"local\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.3636364 0.4181818 0.4000000 0.7000000 1.0000000 0.3636364 0.1666667\n [8] 0.5714286 0.6666667 0.4166667 0.4666667 0.6666667 0.5000000 0.2888889\n[15] 0.5714286 0.7000000 0.6000000       NaN 1.0000000       NaN\n```\n:::\n\n```{.r .cell-code}\n# Global Transitivity calculation in got_marriages network\n\ntransitivity(got_marriages.ig, type = \"global\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4411765\n```\n:::\n\n```{.r .cell-code}\n# Local Average Transitivity calculation in got_marriages network\n\ntransitivity(got_marriages.ig, type = \"localaverage\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5478074\n```\n:::\n:::\n\n\n## Centrality\n\nCompute at least one measure of centrality for each node, adding them as attributes to `nodes` in the form of extra columns: eigencentrality, betweenness, closeness, etc. Compute the distribution of at least one of those measures. What do we learn from comparing these measures of centrality with an equivalent random network (i.e. with the same number of edges and vertices)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Betweenness\n\nV(got_marriages.ig)$betweenness <-igraph::betweenness(got_marriages.ig)\n\n# closeness\n\nV(got_marriages.ig)$closeness <-igraph::closeness(got_marriages.ig)\n\n# eigen_centrality\n\nV(got_marriages.ig)$eigen_centrality <-igraph::eigen_centrality(got_marriages.ig)$vector\n\n\n# Compute the Distribution eigencentrality\n\neigen_table <- table(V(got_marriages.ig)$eigen_centrality)\nprint(eigen_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n0.00188957823728034 0.00267282274631418  0.0181467469620076  0.0460144124992235 \n                  1                   1                   1                   1 \n 0.0553241324308683  0.0572737777541878  0.0799514319349533  0.0892625167697577 \n                  1                   1                   1                   1 \n 0.0893830361240074  0.0894787158944623  0.0996550027383895   0.113194498217204 \n                  1                   1                   1                   1 \n  0.126568322197617   0.151988689747416   0.192767892034525   0.214820599128922 \n                  1                   1                   1                   1 \n  0.272772859787063   0.282784491545718   0.299362264517051                   1 \n                  1                   1                   1                   1 \n```\n:::\n\n```{.r .cell-code}\n# Compute the Distribution closeness\n\nclose_table <- table(V(got_marriages.ig)$closeness)\nprint(close_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n0.0256410256410256 0.0285714285714286 0.0294117647058824 0.0333333333333333 \n                 1                  1                  1                  1 \n0.0357142857142857 0.0416666666666667 0.0476190476190476 0.0526315789473684 \n                 1                  1                  1                  1 \n0.0666666666666667 0.0769230769230769 0.0833333333333333                0.1 \n                 1                  1                  2                  1 \n 0.166666666666667                  1 \n                 1                  1 \n```\n:::\n\n```{.r .cell-code}\n# Compute the Distribution of betweenness\n\nbetween_table <- table(V(got_marriages.ig)$betweenness)\nprint(between_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n               0              0.6             1.75             2.25 \n               6                1                1                1 \n2.66666666666667              4.5              4.9              5.5 \n               1                1                1                2 \n7.55714285714286           12.375               14 20.1424603174603 \n               1                1                1                1 \n            25.5 31.7587301587302 \n               1                1 \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}