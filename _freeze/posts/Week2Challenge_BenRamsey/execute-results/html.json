{
  "hash": "654e61eca505ca6f7b628232e4a7009c",
  "result": {
    "markdown": "---\ntitle: \"Week 2 Challenge\"\nauthor: \"Ben Ramsey\"\ndescription: \"Describing the Basic Structure of a Network\"\ndate: \"02/22/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_2\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n## Challenge Overview\n\nDescribe the basic structure of a network following the steps in tutorial of week 2, this time using a dataset of your choice: for instance, you could use Marriages in Game of Thrones or Like/Dislike from week 1. \n\nAnother more complex option is the newly added dataset of the US input-output table of direct requirements by industry, availabe in the Bureau of Economic Analysis. Input-output tables show the economic transactions between industries of an economy and thus can be understood as a directed adjacency matrix. Data is provided in the form of an `XLSX` file, so using `read_xlsx` from package `readxl` is recommended, including the `sheet` as an argument (`2012` for instance).\n\nIdentify and describe content of nodes and links, and identify format of data set (i.e., matrix or edgelist, directed or not, weighted or not), and whether attribute data are present. Be sure to provide information about network size (e.g., information obtained from network description using week 1 network basic tutorial commands.)\n\nExplore the dataset using commands from week 2 tutorial. Comment on the highlighted aspects of network structure such as: \n\n- Geodesic and Path Distances; Path Length\n- Dyads and Dyad Census\n- Triads and Triad Census\n- Network Transitivity and Clustering\n- Component Structure and Membership\n\nBe sure to both provide the relevant statistics calculated in `R`, as well as your own interpretation of these statistics.\n\n## Describe the Network Data\n\n1. *List and inspect* List the objects to make sure the datafiles are working properly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages <- read_csv(\"_data/got/got_marriages.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 255 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ngot_marriages.net <- as.network(got_marriages, loops = TRUE, multiple = TRUE, directed = FALSE)\ngot_marriages.ig <- graph_from_data_frame(got_marriages)\n\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"got_marriages\"     \"got_marriages.ig\"  \"got_marriages.net\"\n```\n:::\n:::\n\n\n\n2. *Network Size* What is the size of the network? You may use `vcount` and `ecount`.\n3. *Network features* Are these networks weighted, directed, and bipartite?\n4. *Network Attributes* Now, using commands from either `statnet` or `igraph`, list the vertex and edge attributes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(got_marriages.net) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 20 \n  directed = FALSE \n  hyper = FALSE \n  loops = TRUE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 255 \n    missing edges= 0 \n    non-missing edges= 255 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names: \n    Generation Notes Type \n```\n:::\n:::\n\nThe network has twenty vertices and 255 edges and is not directed, not bipartite and not weighted. \n\n## Dyad and Triad Census\n\nNow try a full dyad census. This gives us the number of dyads where the relationship is:\n\n- Reciprocal (mutual), or `mut`\n- Asymmetric (non-mutual), or `asym`, and\n- Absent, or `null`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsna::dyad.census(got_marriages.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Mut Asym Null\n[1,] 310 -250  130\n```\n:::\n:::\n\n\nNow use `triad.census` in order to do a triad census.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsna::triad.census(got_marriages.net, mode = \"graph\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       0   1   2  3\n[1,] 408 444 228 60\n```\n:::\n:::\n\n\n\n## Global and Local Transitivity or Clustering\n\nCompute global transitivity using `transitivity` on `igraph` or `gtrans` on `statnet` and local transitivity of specific nodes of your choice, in addition to the average clustering coefficient. What is the distribution of node degree and how does it compare with the distribution of local transitivity?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransitivity(got_marriages.ig, type = \"global\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4411765\n```\n:::\n\n```{.r .cell-code}\ntransitivity(got_marriages.ig, type = \"average\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5478074\n```\n:::\n\n```{.r .cell-code}\ntransitivity(got_marriages.ig, type = \"local\", vids = V(got_marriages.ig)[c(\"Targaryen\", \"Stark\", \"Martell\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3636364 0.4166667 0.4000000\n```\n:::\n:::\n\nThe alters of the ego could be more connected, although I don't have the information to make that determination.   \n\n## Path Length and Component Structure \n\nCan you compute the average path length and the _diameter_ of the network? Can you find the component structure of the network and identify the cluster membership of each node?\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage.path.length(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.86875\n```\n:::\n\n```{.r .cell-code}\ndiameter(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ncomponents(got_marriages.ig)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ncomponents(got_marriages.ig)$csize\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\n\nThe average path length is 1.86875. The graph has one component, and the component is made up of twenty nodes. The diameter is four. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}