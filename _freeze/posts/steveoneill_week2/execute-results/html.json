{
  "hash": "09ce34e1551315b4d480aa4b30a0a754",
  "result": {
    "markdown": "---\ntitle: \"Short Assignment 1: Reading Network Data\"\nauthor: \"Steve O'Neill\"\neditor: visual\ntags: \n  - shortassignment1\n---\n\n\n\n\n## Short Assignment 1: Reading Network Data (GOT Marriage Dataset)\n\n### Reading in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages <- read_csv(\"_data/got/got_marriages.csv\", show_col_types = FALSE)\n```\n:::\n\n\n### IGraph from Edgelist\n\nThis edgelist comes with edge attributes `Type`, `Notes` and `Generation`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Directed = FALSE because marriages are intrinsically symmetric:\ngot_marriages.net <- graph_from_data_frame(got_marriages,\n                                           directed = FALSE)\ngot_marriages.net\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 48cdbac UN-- 20 255 -- \n+ attr: name (v/c), Type (e/c), Notes (e/c), Generation (e/c)\n+ edges from 48cdbac (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n+ ... omitted several edges\n```\n:::\n:::\n\n\nThese are the vertexes (e.g. nodes). They represent a blend of land areas, administrative zones, and family Houses:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(got_marriages.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 20/20 vertices, named, from 48cdbac:\n [1] Targaryen   Baratheon   Martell     Lannister   Tyrell      Reach      \n [7] North       Riverlands  Westerlands Stark       Vale        Arryn      \n[13] Tully       Frey        Crownlands  Stormlands  Essos       Septa      \n[19] Dorne       Beyond Wall\n```\n:::\n:::\n\n\nAnd these are the types of edges we have:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(E(got_marriages.net)$Type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Married\" \"Engaged\" \"Affair\" \n```\n:::\n:::\n\n\n#### Plot\n\nHere is the most basic plot, before assigning `$Type` to `$weight`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(got_marriages.net,\n            arrow.mode=\"-\")\n```\n\n::: {.cell-output-display}\n![](steveoneill_week2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nHere we add each marriage relationship, including affairs, to the `weight` value which has meaning to the `igraph` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nE(got_marriages.net)$weight<-E(got_marriages.net)$Type\n```\n:::\n\n\nAfter `weight` has been added, the graph looks much different:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(got_marriages.net,\n            arrow.mode=\"-\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in (function (graph, coords = NULL, dim = 2, niter = 500, start.temp =\nsqrt(vcount(graph)), : NAs introduced by coercion\n```\n:::\n\n::: {.cell-output-display}\n![](steveoneill_week2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nI want to color the edges according to specific marriage types:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Define colors for each type of marriage\ncolors <- c(Married = \"red\", \n            Engaged = \"green\", \n            Affair = \"blue\")\n\n#Match() matches \"Married\" with \"red\", and so on\nE(got_marriages.net)$color <- colors[match(E(got_marriages.net)$Type, names(colors))]\n\nplot(got_marriages.net,\n     arrow.mode=\"-\",\n     edge.color=E(got_marriages.net)$color,\n     vertex.label.family=\"Helvetica\",\n     main=\"Game of Thrones Marriage Network\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in (function (graph, coords = NULL, dim = 2, niter = 500, start.temp =\nsqrt(vcount(graph)), : NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in text.default(x, y, labels = labels, col = label.color, family =\nlabel.family, : font family not found in Windows font database\n```\n:::\n\n```{.r .cell-code}\nlegend(\"bottomleft\", legend=c(\"Married\", \"Engaged\", \"Affair\"), fill=colors, title=\"Type of marriage\", cex=0.8)\n```\n\n::: {.cell-output-display}\n![](steveoneill_week2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nHere is an alternative, circular layout that in my opinion is not as useful because it does not highlight the social isolation of `Beyond Wall`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayout1 <- layout_in_circle(got_marriages.net)\n\nplot(got_marriages.net,\n     arrow.mode=\"-\",\n     vertex.label.family=\"Helvetica\",\n     vertex.label.cex=.5,\n     edge.color=E(got_marriages.net)$color,\n     edge.width=1,\n     main=\"Game of Thrones Marriage Network\",\n     layout = layout1\n     )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in text.default(x, y, labels = labels, col = label.color, family =\nlabel.family, : font family not found in Windows font database\n```\n:::\n\n```{.r .cell-code}\nlegend(\"bottomleft\", legend=c(\"Married\", \"Engaged\", \"Affair\"), fill=colors, title=\"Type of marriage\", cex=0.8)\n```\n\n::: {.cell-output-display}\n![](steveoneill_week2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Statnet\n\nI am assuming \"loops\" are cases where Lannister -- Lannister, or similar. So I'll be setting that to TRUE. And multiple to TRUE as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages.stat <- as.network(got_marriages, loops = TRUE, multiple = TRUE)\nprint(got_marriages.stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Network attributes:\n  vertices = 20 \n  directed = TRUE \n  hyper = FALSE \n  loops = TRUE \n  multiple = TRUE \n  bipartite = FALSE \n  total edges= 255 \n    missing edges= 0 \n    non-missing edges= 255 \n\n Vertex attribute names: \n    vertex.names \n\n Edge attribute names: \n    Generation Notes Type \n```\n:::\n:::\n\n\nThis is a `network` object rather than a `igraph` object we were using before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(got_marriages.stat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"network\"\n```\n:::\n\n```{.r .cell-code}\nclass(got_marriages.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"igraph\"\n```\n:::\n:::\n\n\nPlotting is ugly, but functional:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(got_marriages.stat,\n     displaylabels = T)\n```\n\n::: {.cell-output-display}\n![](steveoneill_week2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "steveoneill_week2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}