{
  "hash": "1de3e36c45c21392e25fd3ad70906250",
  "result": {
    "markdown": "---\ntitle: \"Week 4 Challenge\"\nauthor: \"Niharika Pola\"\ndescription: \"Centrality of a Network\"\ndate: \"03/10/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_4\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n#### Challenge Overview\n\nDescribe the many measures of centrality of at least one network of your choice.\n\n##### Describe the Network Data\n\nIf you have not done it before, always start by evaluating the basic structure of the network (number of edges and vertices, dyad and triad census, etc.). Create a data frame \\`nodes\\` with the corresponding local attributes such as degree or local transitivity.\n\n##### Centrality\n\nCompute at least one measure of centrality for each node, adding them as attributes to \\`nodes\\` in the form of extra columns: eigencentrality, betweenness, closeness, etc. Compute the distribution of at least one of those measures. What do we learn from comparing these measures of centrality with an equivalent random network (i.e. with the same number of edges and vertices)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.3\n```\n:::\n\n```{.r .cell-code}\ngot_distances <- read_csv(\"posts/_data/got/got_distances.csv\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: 'posts/_data/got/got_distances.csv' does not exist in current working directory ('C:/Users/91955/Desktop/Social_Networks_Spring_2023/posts').\n```\n:::\n\n```{.r .cell-code}\nhead(got_distances)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in head(got_distances): object 'got_distances' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the required package\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\n# Create the network from the dataset\nnet <- graph.data.frame(got_distances, directed = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in as.data.frame(d): object 'got_distances' not found\n```\n:::\n\n```{.r .cell-code}\n# Basic structure of the network\nedges <- ecount(net)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\nvertices <- vcount(net)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\n# Dyad and triad census\ndyads <- dyad_census(net)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\ntriads <- triad_census(net)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\n# Create the nodes data frame with local attributes\nnodes <- data.frame(\n  vertex = V(net)$name,  # Assuming the vertices have a 'name' attribute\n  degree = degree(net),\n  transitivity = transitivity(net, type = \"local\")\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the basic network structure\ncat(\"Number of edges:\", edges, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of edges: \n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"Number of edges:\", edges, \"\\n\"): argument 2 (type 'closure') cannot be handled by 'cat'\n```\n:::\n\n```{.r .cell-code}\ncat(\"Number of vertices:\", vertices, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of vertices: \n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in cat(\"Number of vertices:\", vertices, \"\\n\"): argument 2 (type 'closure') cannot be handled by 'cat'\n```\n:::\n\n```{.r .cell-code}\nprint(dyads)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(dyads): object 'dyads' not found\n```\n:::\n\n```{.r .cell-code}\nprint(triads)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(triads): object 'triads' not found\n```\n:::\n\n```{.r .cell-code}\n# Print the nodes data frame\nprint(nodes)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(nodes): object 'nodes' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nin_net <- centr_degree(net, loops = FALSE, mode = \"in\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\nin_net\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'in_net' not found\n```\n:::\n\n```{.r .cell-code}\nout_net <- centr_degree(net, loops = FALSE, mode = \"out\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\nout_net\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'out_net' not found\n```\n:::\n\n```{.r .cell-code}\nnet_total <- centr_degree(net, loops = FALSE, mode = \"total\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\nnet_total\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'net_total' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neigen <- eigen_centrality(net)$vector\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\nbetweeness <- igraph::betweenness(net, directed = F)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n\n```{.r .cell-code}\nclose <- igraph::closeness(net, mode = \"out\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"igraph\" %in% class(graph): object 'net' not found\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the distribution of one centrality measure (e.g., eigencentrality)\neigen_dist <- table(nodes$eigen)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in table(nodes$eigen): object 'nodes' not found\n```\n:::\n\n```{.r .cell-code}\n# Print the distribution of eigencentrality\nprint(eigen_dist)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in print(eigen_dist): object 'eigen_dist' not found\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}