{
  "hash": "a6986aea03fa74a2f2991170af1c5bcb",
  "result": {
    "markdown": "---\ntitle: \"Week 4 Challenge\"\nauthor: \"Ananya Pujary\"\ndescription: \"Centrality of a Network\"\ndate: \"03/28/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_4\n  - Ananya Pujary\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n## Describe the Network Data\n\nI've chosen to work with the `got_like_dislike.csv` dataset.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_like_dislike <-read_csv(\"../posts/_data/got/got_like_dislike.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 46 Columns: 49\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Current house, Former house, Name\ndbl (46): Lysa Arryn, Petyr Baelish, Joffrey Baratheon, Margaery Tyrell, Ren...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ngot_like_dislike\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 46 × 49\n   `Current house` `Former house` Name              `Lysa Arryn` `Petyr Baelish`\n   <chr>           <chr>          <chr>                    <dbl>           <dbl>\n 1 Arryn           Tully          Lysa Arryn                  NA               3\n 2 Baelish         <NA>           Petyr Baelish                3              NA\n 3 Lannister       Baratheon      Joffrey Baratheon            0              -1\n 4 Tyrell          Baratheon      Margaery Tyrell              0               1\n 5 Baratheon       <NA>           Renly Baratheon              0              -2\n 6 Baratheon       <NA>           Robert Baratheon             2               1\n 7 Baratheon       <NA>           Stannis Baratheon            0              -1\n 8 Stark           <NA>           Brienne of Tarth             1              -1\n 9 Lannister       <NA>           Bronn                        0              -1\n10 Lannister       <NA>           Gregor Clegane               0              -1\n# ℹ 36 more rows\n# ℹ 44 more variables: `Joffrey Baratheon` <dbl>, `Margaery Tyrell` <dbl>,\n#   `Renly Baratheon` <dbl>, `Robert Baratheon` <dbl>,\n#   `Stannis Baratheon` <dbl>, `Brienne of Tarth` <dbl>, Bronn <dbl>,\n#   `Gregor Clegane` <dbl>, `Sandor Clegane` <dbl>, `Xaro Xhoan Daxos` <dbl>,\n#   Gendry <dbl>, `Balon Greyjoy` <dbl>, `Theon Greyjoy` <dbl>,\n#   `Jaqen H'ghar` <dbl>, Hodor <dbl>, `Khal Drogo` <dbl>, …\n```\n:::\n\n```{.r .cell-code}\ngot_like_dislike.ig <- graph_from_adjacency_matrix(as.matrix(got_like_dislike[ , - c(1 : 3)]), mode = 'directed', weighted = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of edges\necount(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1189\n```\n:::\n\n```{.r .cell-code}\n# number of vertices\nvcount(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n\n```{.r .cell-code}\n# vertex and edge attributes\nvertex_attr_names(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"weight\"\n```\n:::\n\n```{.r .cell-code}\n# network features\nis_directed(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis_bipartite(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# dyad census\nigraph::dyad.census(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 554\n\n$asym\n[1] 35\n\n$null\n[1] 446\n```\n:::\n\n```{.r .cell-code}\n# triad census\ntriad_census(got_like_dislike.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1780  308 4637    5   11   22  222  285    1    1 3849    8   19   26  537\n[16] 3469\n```\n:::\n:::\n\n\nThis network has 1189 edges and 46 vertices. Its vertex attribute is \"name\" and edge attribute is \"weight\". This is a directed network that is not bipartite and is weighted. The dyad census indicated that there are 554 mutual, 35 asymmetric, and 446 null relationships.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of components\nigraph::components(got_like_dislike.ig)$no\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# size of components\nigraph::components(got_like_dislike.ig)$csize \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n:::\n\nThis network has one major component and that component has 46 nodes.\n\nMaking a new dataframe `nodes` with the in-degree, out-degree, and total degree values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_like_dislike.nodes<-data.frame(name=V(got_like_dislike.ig)$name,\n    totdegree=igraph::degree(got_like_dislike.ig, loops=FALSE),\n    indegree=igraph::degree(got_like_dislike.ig, mode=\"in\", loops=FALSE),\n    outdegree=igraph::degree(got_like_dislike.ig, mode=\"out\", loops=FALSE))\n\nhead(got_like_dislike.nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               name totdegree indegree outdegree\nLysa Arryn               Lysa Arryn        38       19        19\nPetyr Baelish         Petyr Baelish        50       25        25\nJoffrey Baratheon Joffrey Baratheon        77       39        38\nMargaery Tyrell     Margaery Tyrell        52       28        24\nRenly Baratheon     Renly Baratheon        65       32        33\nRobert Baratheon   Robert Baratheon        61       31        30\n```\n:::\n:::\n\n\n\n## Centrality\n\nFirst, I'm calculating the eigenvector centrality of each node and adding them to the `got_like_dislike.nodes` dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculating eigenvector centrality scores\ntemp<-centr_eigen(got_like_dislike.ig,directed=T)\nnames(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"vector\"          \"value\"           \"options\"         \"centralization\" \n[5] \"theoretical_max\"\n```\n:::\n\n```{.r .cell-code}\nlength(temp$vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n\n```{.r .cell-code}\nhead(temp$vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5205582 0.6903608 1.0000000 0.7698198 0.8582532 0.8079125\n```\n:::\n\n```{.r .cell-code}\ntemp$centralization\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3420564\n```\n:::\n\n```{.r .cell-code}\n#add eigenvector centrality to node measures\ngot_like_dislike.nodes$eigen<-evcent(got_like_dislike.ig)$vector\n#arrange descending and return top 5 nodes\narrange(got_like_dislike.nodes, desc(eigen)) %>%\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               name totdegree indegree outdegree     eigen\nRobb Stark               Robb Stark        74       37        37 1.0000000\nPyat Pree                 Pyat Pree         6        3         3 0.9305896\nStannis Baratheon Stannis Baratheon        66       33        33 0.9197787\nViserys Targaryen Viserys Targaryen        42       21        21 0.9161455\nEddard Stark           Eddard Stark        56       27        29 0.8969999\n```\n:::\n:::\n\n\nSimilarly, calculating the Bonacich power centrality and adding them to the nodes dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculating bonacich power centrality for nodes\nhead(power_centrality(got_like_dislike.ig))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Lysa Arryn     Petyr Baelish Joffrey Baratheon   Margaery Tyrell \n        0.2311048         0.5088790        -1.6047201         0.1408855 \n  Renly Baratheon  Robert Baratheon \n       -0.3614043        -0.7448860 \n```\n:::\n\n```{.r .cell-code}\n# add bonachic power centrality to node measures\ngot_like_dislike.nodes$bonpow<-power_centrality(got_like_dislike.ig)\n# arrange descending and return top 5 nodes\narrange(got_like_dislike.nodes, desc(bonpow)) %>%\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                               name totdegree indegree outdegree        eigen\nPetyr Baelish         Petyr Baelish        50       25        25 0.0008802262\nViserys Targaryen Viserys Targaryen        42       21        21 0.9161454694\nLysa Arryn               Lysa Arryn        38       19        19 0.4027269581\nMargaery Tyrell     Margaery Tyrell        52       28        24 0.0000000000\nArya Stark               Arya Stark        65       33        32 0.1176348421\n                      bonpow\nPetyr Baelish     0.50887898\nViserys Targaryen 0.30764903\nLysa Arryn        0.23110481\nMargaery Tyrell   0.14088546\nArya Stark        0.06106321\n```\n:::\n:::\n\nCalculating the distribution of both centrality measure values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# distribution of eigenvector centrality scores\nhist(table(got_like_dislike.nodes$eigen))\n```\n\n::: {.cell-output-display}\n![](Week4_Challenge_AnanyaPujary_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(got_like_dislike.nodes$eigen))\n```\n\n::: {.cell-output-display}\n![](Week4_Challenge_AnanyaPujary_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# distribution of bonacich power centrality scores\nhist(table(got_like_dislike.nodes$bonpow))\n```\n\n::: {.cell-output-display}\n![](Week4_Challenge_AnanyaPujary_files/figure-html/unnamed-chunk-8-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(density(got_like_dislike.nodes$bonpow))\n```\n\n::: {.cell-output-display}\n![](Week4_Challenge_AnanyaPujary_files/figure-html/unnamed-chunk-8-4.png){width=672}\n:::\n:::\n\nBoth measures have a similar distribution of values.\n\n# Random Network Comparison\n\nGenerating a random network with the same number of edges (1189) and vertices (46):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerdos_renyi.ig <- sample_gnm(46, 1189, directed = TRUE, loops = FALSE)\n\n# density of random network\ngraph.density(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5743961\n```\n:::\n\n```{.r .cell-code}\n# dyad census of random network\nigraph::dyad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 346\n\n$asym\n[1] 497\n\n$null\n[1] 192\n```\n:::\n\n```{.r .cell-code}\n# triad census of random network\nigraph::triad.census(erdos_renyi.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   85  784  500  486  468  921 1380 1422 1259  431  948  902  849 1754 2452\n[16]  539\n```\n:::\n:::\n\n\nCreating a nodes dataframe for this network with total degree, in-degree, and out-degree values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerdos_renyi.nodes<-data.frame(degree=igraph::degree(erdos_renyi.ig))\nerdos_renyi.nodes<-erdos_renyi.nodes %>%\n    mutate(indegree=igraph::degree(erdos_renyi.ig, mode=\"in\", loops=FALSE),\n           outdegree=igraph::degree(erdos_renyi.ig, mode=\"out\", loops=FALSE))\nhead(erdos_renyi.nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree indegree outdegree\n1     43       17        26\n2     61       26        35\n3     61       31        30\n4     52       29        23\n5     52       29        23\n6     52       23        29\n```\n:::\n:::\n\n\nFirst, I'm calculating the eigenvector centrality of each node and adding them to the `got_like_dislike.nodes` dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculating eigenvector centrality scores\ntemp<-centr_eigen(erdos_renyi.ig,directed=T)\nnames(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"vector\"          \"value\"           \"options\"         \"centralization\" \n[5] \"theoretical_max\"\n```\n:::\n\n```{.r .cell-code}\nlength(temp$vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 46\n```\n:::\n\n```{.r .cell-code}\nhead(temp$vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5471242 0.8163483 0.9904156 0.8971429 0.8923585 0.7332920\n```\n:::\n\n```{.r .cell-code}\ntemp$centralization\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.197041\n```\n:::\n\n```{.r .cell-code}\n#add eigenvector centrality to node measures\nerdos_renyi.nodes$eigen<-evcent(erdos_renyi.ig)$vector\n#arrange descending and return top 5 nodes\narrange(erdos_renyi.nodes, desc(eigen)) %>%\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree indegree outdegree     eigen\n1     61       31        30 1.0000000\n2     61       26        35 0.9894859\n3     59       32        27 0.9601890\n4     58       31        27 0.9473595\n5     58       27        31 0.9447701\n```\n:::\n:::\n\n\nSimilarly, calculating the Bonacich power centrality and adding them to the nodes dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculating bonacich power centrality for nodes\nhead(power_centrality(erdos_renyi.ig))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.9924564 -0.9058985 -1.2946816 -0.9157178 -1.1668815 -1.1708260\n```\n:::\n\n```{.r .cell-code}\n# add bonachic power centrality to node measures\nerdos_renyi.nodes$bonpow<-power_centrality(erdos_renyi.ig)\n# arrange descending and return top 5 nodes\narrange(erdos_renyi.nodes, desc(bonpow)) %>%\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  degree indegree outdegree     eigen     bonpow\n1     53       29        24 0.8705401 -0.5578755\n2     47       24        23 0.7681401 -0.5993879\n3     46       23        23 0.7620806 -0.7157912\n4     54       28        26 0.8872706 -0.7894939\n5     52       28        24 0.8554152 -0.7986151\n```\n:::\n:::\n\nCalculating the distribution of both centrality measure values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(erdos_renyi.nodes$eigen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n0.710459524483067 0.730773737248582 0.762080618679934 0.763854446274567 \n                1                 1                 1                 1 \n0.768140052215201 0.775694826757958 0.783787341726523 0.784700320387665 \n                1                 1                 1                 1 \n 0.79141086769108 0.795424162226855   0.7964332642134 0.799432647857085 \n                1                 1                 1                 1 \n0.801651628621503 0.802985710724236  0.81345162285852 0.816334621848167 \n                1                 1                 1                 1 \n0.821944712043148 0.826625564944117 0.832781505482511  0.83380715230376 \n                1                 1                 1                 1 \n0.836159855792579 0.837575593087785 0.848475224417039  0.85076562676721 \n                1                 1                 1                 1 \n0.852580324727284 0.855125215140171 0.855415234648243 0.855708262663948 \n                1                 1                 1                 1 \n0.860542251613786 0.861101305850915 0.862734161327381 0.867516644283842 \n                1                 1                 1                 1 \n0.870540141274848 0.873990581409109 0.876885728746854 0.878176339549181 \n                1                 1                 1                 1 \n0.887270618631575 0.887946065936564 0.891205712117302 0.915697440881502 \n                1                 1                 1                 1 \n0.919469563194441 0.944770097330143 0.947359538574922 0.960189011205497 \n                1                 1                 1                 1 \n0.989485943747128                 1 \n                1                 1 \n```\n:::\n\n```{.r .cell-code}\n# distribution of eigenvector centrality density scores\nplot(density(erdos_renyi.nodes$eigen))\n```\n\n::: {.cell-output-display}\n![](Week4_Challenge_AnanyaPujary_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntable(erdos_renyi.nodes$bonpow)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n -1.32490952447138  -1.29468156788833  -1.28834974241691  -1.21448112454971 \n                 1                  1                  1                  1 \n -1.17728714785492  -1.17082602103025   -1.1689896561108  -1.16688154272432 \n                 1                  1                  1                  1 \n -1.14062398554819  -1.11316699858162  -1.10529933805968  -1.07551193248265 \n                 1                  1                  1                  1 \n  -1.0609220796921  -1.05162411027476  -1.05036322151678  -1.04226466387798 \n                 1                  1                  1                  1 \n -1.04174313839012  -1.03770717937863  -1.03643801888203  -1.03050297334381 \n                 1                  1                  1                  1 \n -1.02577952110278  -1.02247064440326  -1.01849163664304 -0.998740001730098 \n                 1                  1                  1                  1 \n-0.998289804857671 -0.993260939917644 -0.992456390480723 -0.975268672125168 \n                 1                  1                  1                  1 \n -0.92468861466528 -0.915717775843969 -0.908925705598518 -0.905898486753508 \n                 1                  1                  1                  1 \n -0.88553150384365 -0.885011864653844  -0.87596546447822  -0.86198148814366 \n                 1                  1                  1                  1 \n-0.834478423892282 -0.834023981010559 -0.827883694226589 -0.817608114431377 \n                 1                  1                  1                  1 \n-0.806943589798597 -0.798615110646334 -0.789493864739947 -0.715791168664969 \n                 1                  1                  1                  1 \n-0.599387899552842 -0.557875459245137 \n                 1                  1 \n```\n:::\n\n```{.r .cell-code}\n# distribution of bonacich power centrality density scores\nplot(density(erdos_renyi.nodes$bonpow))\n```\n\n::: {.cell-output-display}\n![](Week4_Challenge_AnanyaPujary_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\nComparing the density distribution of eigenvector centrality scores in the like-dislike network and the random network, there's a right skew in the like-dislike network while the scores are normally distributed in the random network. As for the Bonacich power centrality scores, they are similarly distributed in both networks.",
    "supporting": [
      "Week4_Challenge_AnanyaPujary_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}