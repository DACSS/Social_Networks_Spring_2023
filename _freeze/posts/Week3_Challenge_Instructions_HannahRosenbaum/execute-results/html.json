{
  "hash": "ad2c6f57bba36846370efd97bf743a1d",
  "result": {
    "markdown": "---\ntitle: \"Week 3 Challenge Instructions\"\nauthor: \"Hannah Rosenbaum\"\ndescription: \"Degree and Density of a Network\"\ndate: \"03/06/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_3\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n\n\n\n## Challenge Overview\n\nDescribe the many measures of degree, as well as density, of a network and compare \n\n## Degree\n\nIf you have not done it before, evaluate the structure of the network (number of edges and vertices, dyad and triad census, etc.).\n\nCompute the many measures of _degree_ of the network of your choice, most preferably directed. Create a data frame called `nodes` where each row corresponds to a node and each column to an attribute of the node, namely the id, name or label, and different measures of degree: total, out-degree, and in-degree. What is the average degree of the network?\n\nCompute the distributions of those measures (or histograms if your network is small). What does this tell us about the structure of the network?\n\n## Density\n\nCompute the density of the network. Is this a global or local measure? Does it have a relationship with average degree? \n\n## Random Network\n\nCreate a random (Erdos-Renyi) network with the same number of nodes and edges than the network of your choice. On `igraph`, the necessary commands are `random.graph.game(n, p.or.m, type = c(\"gnp\", \"gnm\"), directed = FALSE, loops = FALSE)` (deprecated), `sample_gnp(n, p, directed = FALSE, loops = FALSE)` or `sample_gnm(n, m, directed = FALSE, loops = FALSE)`. The `p.or.m` argument is to specify the probability of an edge $p$ or the number of edges $m$.\n  \nCompare the densities, dyad and triad censuses, and degree distributions, with the measures of the network of your choice. Does the comparison us something about the network of your choice? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages <- read.csv(\"C:/Users/18639/Social_Networks_Spring_2023/posts/_data/got/got_marriages.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- graph_from_edgelist(as.matrix(got_marriages[, c(\"From\", \"To\")]))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# List/display data\nhead(got_marriages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       From      To    Type  Notes Generation\n1 Targaryen   Stark Married  R+L=J    Current\n2 Baratheon Martell Engaged   died    Current\n3 Baratheon   Stark Engaged broken    Current\n4   Martell   Essos Married           Current\n5   Martell   Reach  Affair           Current\n6   Martell   Essos  Affair           Current\n```\n:::\n\n```{.r .cell-code}\n# Show network size\nvcount(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\necount(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 255\n```\n:::\n\n```{.r .cell-code}\n# Is the graph bipartite\nis_bipartite(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Is teh graph weighted\nis_weighted(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Is the graph directed\nis_directed(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Listing vertex attributes\nvertex_attr_names(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\n# Listing edge attributes\nedge_attr_names(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n\n```{.r .cell-code}\n# Perform a dyad census of the network\ndyad.census(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 3\n\n$asym\n[1] 57\n\n$null\n[1] 130\n```\n:::\n\n```{.r .cell-code}\n# Perform a triad census on the network\ntriad.census(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 408 227 217 110  44  47   9  18  50   1   0   3   5   1   0   0\n```\n:::\n\n```{.r .cell-code}\n# Compute the transitivity of the netwrok\ntransitivity(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4411765\n```\n:::\n\n```{.r .cell-code}\n# Find the average path length\naverage.path.length(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.86875\n```\n:::\n\n```{.r .cell-code}\n# Find the width of the network\ndiameter(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Compute the degree of the network\ndegree(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Targaryen       Stark   Baratheon     Martell       Essos       Reach \n         85          34          17          12          15          49 \n      Septa       Dorne   Lannister        Vale  Riverlands  Crownlands \n          1           4          28          37          39          22 \nWesterlands      Tyrell       North Beyond Wall        Frey       Tully \n         31          12          46           1          51           5 \n      Arryn  Stormlands \n         10          11 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build `nodes`\nnodes <- data.frame(\"Name\"=c(), \"Total\"=c(), \"Out\"=c(), \"In\"=c())\nfamilies <- unique.data.frame(as.data.frame(got_marriages[, c(\"To\")]))\n\n# Iterate across family names computing degrees\nfor (name in families) {\n  obs <- data.frame(\"Name\"=name, \"Total\"=degree(graph, v = name, mode = \"total\"), \"Out\"=degree(graph, v = name, mode = \"out\"), \"In\"=degree(graph, v = name, mode = \"in\"))\n\n  nodes <- rbind(nodes, obs)\n}\nnodes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Name Total Out In\nStark             Stark    34  27  7\nMartell         Martell    12   9  3\nEssos             Essos    15   0 15\nReach             Reach    49  16 33\nSepta             Septa     1   0  1\nDorne             Dorne     4   0  4\nTargaryen     Targaryen    85  65 20\nLannister     Lannister    28  22  6\nVale               Vale    37  11 26\nRiverlands   Riverlands    39   5 34\nCrownlands   Crownlands    22   5 17\nWesterlands Westerlands    31   3 28\nTyrell           Tyrell    12   8  4\nNorth             North    46  13 33\nBeyond Wall Beyond Wall     1   0  1\nFrey               Frey    51  47  4\nTully             Tully     5   2  3\nStormlands   Stormlands    11   1 10\nArryn             Arryn    10   6  4\nBaratheon     Baratheon    17  15  2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the average total degree\nmean(nodes$Total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25.5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show histogram of total degree\nhist(nodes$Total)\n```\n\n::: {.cell-output-display}\n![](Week3_Challenge_Instructions_HannahRosenbaum_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show histogram of In degree\nhist(nodes$In)\n```\n\n::: {.cell-output-display}\n![](Week3_Challenge_Instructions_HannahRosenbaum_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show histogram of Out degree\nhist(nodes$Out)\n```\n\n::: {.cell-output-display}\n![](Week3_Challenge_Instructions_HannahRosenbaum_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the density of the network\ngraph.density(graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6710526\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_network <- sample_gnp(length(V(graph)), graph.density(graph))\nplot(random_network)\n```\n\n::: {.cell-output-display}\n![](Week3_Challenge_Instructions_HannahRosenbaum_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find density of random network\ngraph.density(random_network)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6578947\n```\n:::\n\n```{.r .cell-code}\n# Performa a dyad census of the random network\ndyad.census(random_network)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$mut\n[1] 125\n\n$asym\n[1] 0\n\n$null\n[1] 65\n```\n:::\n\n```{.r .cell-code}\n# Perform a triad census on the random network\ntriad.census(random_network)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in triad.census(random_network): At core/misc/motifs.c:1165 : Triad\ncensus called on an undirected graph.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  38   0 283   0   0   0   0   0   0   0 490   0   0   0   0 329\n```\n:::\n\n```{.r .cell-code}\n#Compute the degree of the random network\ndegree(random_network)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 13 14 13 15  9 15 11 13 10  8 12 13 16 11 12 15 13 12 12 13\n```\n:::\n:::",
    "supporting": [
      "Week3_Challenge_Instructions_HannahRosenbaum_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}