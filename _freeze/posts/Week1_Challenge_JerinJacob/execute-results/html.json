{
  "hash": "10892014fd183f30c64d30fa4bd8e17c",
  "result": {
    "markdown": "---\ntitle: \"Week 1 Challenge\"\nauthor: \"Jerin Jacob\"\ndescription: \"Loading Data and Creating a Network\"\ndate: \"02/15/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_1\n\n---\n\n\n\n\n## Reading in the Data\nGOT Marriage data is read in.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriage <- read_csv(\"_data/got/got_marriages.csv\", show_col_types = FALSE) \ngot_marriage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 255 × 5\n   From      To        Type    Notes  Generation\n   <chr>     <chr>     <chr>   <chr>  <chr>     \n 1 Targaryen Stark     Married R+L=J  Current   \n 2 Baratheon Martell   Engaged died   Current   \n 3 Baratheon Stark     Engaged broken Current   \n 4 Martell   Essos     Married <NA>   Current   \n 5 Martell   Reach     Affair  <NA>   Current   \n 6 Martell   Essos     Affair  <NA>   Current   \n 7 Martell   Essos     Affair  <NA>   Current   \n 8 Martell   Septa     Affair  <NA>   Current   \n 9 Martell   Dorne     Affair  <NA>   Current   \n10 Martell   Targaryen Married <NA>   Current   \n# … with 245 more rows\n```\n:::\n:::\n\nThe data is about the marriages happened between families in GOT. There are 5 variables and 255 case. First 2 variables are 'From' and 'To' which are the most important part of a 'Network Analysis' data. We also have the 'Type' of relationship and 'Generation' which classify the case as 'Past' or 'Current'. \n\n## Creating igraph from dataframe\n\nWe are cretaing an igraph from the GOT marriage dataframe so that we can do the network analysis.\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriage.net<-graph_from_data_frame(got_marriage,\n                                      directed=FALSE)\n#deg <- degree(got_marriage.net, mode=\"all\")\n  \n\ngot_marriage.net\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH c0f6780 UN-- 20 255 -- \n+ attr: name (v/c), Type (e/c), Notes (e/c), Generation (e/c)\n+ edges from c0f6780 (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n+ ... omitted several edges\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n # got_marriage.net %>%\n #  group_by(From, To, Type) %>%\n #  summarise(total_count = n())\n```\n:::\n\n\nAn igraph is created for the data that is groouped by 'From', 'To', and 'Type'\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriage_group <- got_marriage %>%\n  group_by(From, To, Type) %>%\n  summarise(total_count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'From', 'To'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\ngot_marriage_group.net<-graph_from_data_frame(got_marriage_group,\n                                      directed=FALSE)\n  \n\ngot_marriage_group.net\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH ffe3463 UN-- 20 88 -- \n+ attr: name (v/c), Type (e/c), total_count (e/n)\n+ edges from ffe3463 (vertex names):\n [1] Arryn     --Arryn       Arryn     --Tully       Arryn     --Vale       \n [4] Baratheon --Crownlands  Baratheon --Lannister   Baratheon --Martell    \n [7] Baratheon --Reach       Baratheon --Reach       Baratheon --Riverlands \n[10] Baratheon --Stark       Baratheon --Stormlands  Baratheon --Tyrell     \n[13] Baratheon --Tyrell      Baratheon --Vale        Baratheon --Westerlands\n[16] Crownlands--Essos       Crownlands--Riverlands  Crownlands--Stormlands \n[19] Crownlands--Westerlands Crownlands--Frey        Frey      --Essos      \n[22] Frey      --Frey        Frey      --Lannister   Frey      --North      \n+ ... omitted several edges\n```\n:::\n:::\n\n\n\n\n\nGOT marriage network has 20 vertices as listed below. It has 255 edges but the number of unique type relationship is 3; 'Married', 'Engagedf', 'Affair'. Unique classification of 'generation' attribute are 'Current' and 'Past'.\n\n::: {.cell}\n\n```{.r .cell-code}\n#table(got_marriage$Type)\n\nV(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 20/20 vertices, named, from c0f6780:\n [1] Targaryen   Baratheon   Martell     Lannister   Tyrell      Reach      \n [7] North       Riverlands  Westerlands Stark       Vale        Arryn      \n[13] Tully       Frey        Crownlands  Stormlands  Essos       Septa      \n[19] Dorne       Beyond Wall\n```\n:::\n\n```{.r .cell-code}\nunique(E(got_marriage.net)$Type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Married\" \"Engaged\" \"Affair\" \n```\n:::\n\n```{.r .cell-code}\nunique(E(got_marriage.net)$Generation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Current\" \"Past\"   \n```\n:::\n:::\n\n\nAgain, checking the vertex count and edge count of the network. \nThe vertex count for grouped network data and the original network data are same as 20. But edge count differs. For original network data, there are 255 edges but for grouped data, edges are 88. This is because, in the grouped network, each edge is a type of relationship from a family to another family. In the original data, each edge represent a unique relationship between families and therefore it is 255. \n\n::: {.cell}\n\n```{.r .cell-code}\nvcount(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\necount(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 255\n```\n:::\n\n```{.r .cell-code}\nvcount(got_marriage_group.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\necount(got_marriage_group.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 88\n```\n:::\n:::\n\nThe network is not bipartite which means it is a single mode network. It is un directed or other words symmetrical. It is also not weighted.\n\n::: {.cell}\n\n```{.r .cell-code}\nis_bipartite(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_directed(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\nThe vertex attributes and edge attributes are listed. Vertices has only one attribute named 'name'. and edges have 3 attributes; 'Type', 'Notes', 'Generation'.\n\n::: {.cell}\n\n```{.r .cell-code}\nvertex_attr_names(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"name\"\n```\n:::\n\n```{.r .cell-code}\nedge_attr_names(got_marriage.net)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Type\"       \"Notes\"      \"Generation\"\n```\n:::\n:::\n\nThe vertex attribute name is accessed.\n\n::: {.cell}\n\n```{.r .cell-code}\nV(got_marriage.net)$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Targaryen\"   \"Baratheon\"   \"Martell\"     \"Lannister\"   \"Tyrell\"     \n [6] \"Reach\"       \"North\"       \"Riverlands\"  \"Westerlands\" \"Stark\"      \n[11] \"Vale\"        \"Arryn\"       \"Tully\"       \"Frey\"        \"Crownlands\" \n[16] \"Stormlands\"  \"Essos\"       \"Septa\"       \"Dorne\"       \"Beyond Wall\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nE(got_marriage.net)$Generation\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n  [8] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [15] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [22] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [29] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [36] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [43] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [50] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [57] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [64] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [71] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [78] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [85] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [92] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n [99] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n[106] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n[113] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[120] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[127] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[134] \"Past\"    \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n[141] \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\" \"Current\"\n[148] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[155] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[162] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[169] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[176] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[183] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[190] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[197] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[204] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[211] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[218] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[225] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[232] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[239] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[246] \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"    \"Past\"   \n[253] \"Past\"    \"Past\"    \"Past\"   \n```\n:::\n:::\n\n\nPlotting the GOT marriage network\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(got_marriage.net, \n            arrow.mode=\"-\")\n```\n\n::: {.cell-output-display}\n![](Week1_Challenge_JerinJacob_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nPlotting the grouped GOT marriage network\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(got_marriage_group.net, arrow_mode = \"-\")\n```\n\n::: {.cell-output-display}\n![](Week1_Challenge_JerinJacob_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Week1_Challenge_JerinJacob_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}