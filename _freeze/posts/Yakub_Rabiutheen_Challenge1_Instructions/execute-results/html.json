{
  "hash": "894f11bd53309f105a1aa4ef1e96957a",
  "result": {
    "markdown": "---\ntitle: \"Week 1 Challenge Instructions\"\nauthor: \"Yakub Rabiutheen\"\ndescription: \"Loading Data and Creating a Network\"\ndate: \"02/27/2023\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\n# editor: visual\ncategories: \n  - challenge_1\n  - instructions\n  # - railroads\n  # - faostat\n  # - wildbirds\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.1.3\n```\n:::\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to\n\n1) read in a dataset, and\n\n2) create a network object\n\n## Load the Data\n\nRead in one (or more) of the following data sets, using the correct R package and command.\n\n-   got_marriages.csv\n-   fish_encounters dataset (available in the `tidyr` package)\n-   got_like_dislike.csv\n\nFind the `_data` folder, located inside the `posts` folder. Then you can read in the data, using base `read.csv` or `read_csv` standard tidy read command to read Comma Separated Values files or, alternatively, read the data in directly from loading a package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nsetwd(\"~/GitHub/Social_Networks_Spring_2023/posts/_data\")\ngot_marriages <- read_csv(\"got/got_marriages.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 255 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (5): From, To, Type, Notes, Generation\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngot_marriages\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 255 x 5\n   From      To        Type    Notes  Generation\n   <chr>     <chr>     <chr>   <chr>  <chr>     \n 1 Targaryen Stark     Married R+L=J  Current   \n 2 Baratheon Martell   Engaged died   Current   \n 3 Baratheon Stark     Engaged broken Current   \n 4 Martell   Essos     Married <NA>   Current   \n 5 Martell   Reach     Affair  <NA>   Current   \n 6 Martell   Essos     Affair  <NA>   Current   \n 7 Martell   Essos     Affair  <NA>   Current   \n 8 Martell   Septa     Affair  <NA>   Current   \n 9 Martell   Dorne     Affair  <NA>   Current   \n10 Martell   Targaryen Married <NA>   Current   \n# ... with 245 more rows\n```\n:::\n:::\n\n\n\n\n## Create a Network\n\nLoad the package `igraph` and create an `igraph` object (i.e. a graph or network) in the form of an edge list. The command may vary whether the data is given as a list of connections or an adjacency matrix. Is the network directed or undirected; weighted or unweighted; unimodal or bipartite? Can you plot it?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'igraph' was built under R version 4.1.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'igraph'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n:::\n\n```{.r .cell-code}\ngot_marriages.ig = graph_from_data_frame(got_marriages, directed = FALSE) \ngot_marriages.ig\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 76aa63c UN-- 20 255 -- \n+ attr: name (v/c), Type (e/c), Notes (e/c), Generation (e/c)\n+ edges from 76aa63c (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n+ ... omitted several edges\n```\n:::\n:::\n\n\n##Node and Edge Exploration\n\n::: {.cell}\n\n```{.r .cell-code}\n##Nodes\nV(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 20/20 vertices, named, from 76aa63c:\n [1] Targaryen   Baratheon   Martell     Lannister   Tyrell      Reach      \n [7] North       Riverlands  Westerlands Stark       Vale        Arryn      \n[13] Tully       Frey        Crownlands  Stormlands  Essos       Septa      \n[19] Dorne       Beyond Wall\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nE(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 255/255 edges from 76aa63c (vertex names):\n [1] Targaryen--Stark       Baratheon--Martell     Baratheon--Stark      \n [4] Martell  --Essos       Martell  --Reach       Martell  --Essos      \n [7] Martell  --Essos       Martell  --Septa       Martell  --Dorne      \n[10] Targaryen--Martell     Targaryen--Essos       Targaryen--Essos      \n[13] Baratheon--Lannister   Baratheon--Vale        Baratheon--Riverlands \n[16] Baratheon--Crownlands  Baratheon--Reach       Baratheon--Westerlands\n[19] Baratheon--Crownlands  Lannister--Lannister   Baratheon--Reach      \n[22] Baratheon--Tyrell      Tyrell   --Reach       Tyrell   --Reach      \n[25] Tyrell   --Reach       Tyrell   --Reach       Tyrell   --Reach      \n[28] Baratheon--Tyrell      Tyrell   --Reach       Baratheon--Tyrell     \n+ ... omitted several edges\n```\n:::\n:::\n\n\n##Directed,Bipariate,Weighted Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_bipartite(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_directed(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis_weighted(got_marriages.ig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\nThis network is not directed, it's unweighted and unimodal.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(got_marriages.ig)\n```\n\n::: {.cell-output-display}\n![](Yakub_Rabiutheen_Challenge1_Instructions_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Yakub_Rabiutheen_Challenge1_Instructions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}